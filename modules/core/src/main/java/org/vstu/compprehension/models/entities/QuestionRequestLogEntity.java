package org.vstu.compprehension.models.entities;

import com.vladmihalcea.hibernate.type.json.JsonType;
import jakarta.persistence.*;
import lombok.*;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.Type;
import org.vstu.compprehension.models.entities.EnumData.SearchDirections;

import java.util.Date;
import java.util.List;

@Entity
@Getter
@Setter
@Builder
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "QuestionRequestLog")
public class QuestionRequestLogEntity {
    
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private Long exerciseAttemptId;

    private String domainShortname;

    @Type(JsonType.class)
    private List<String> targetConceptNames;

    @Type(JsonType.class)
    private List<String> deniedConceptNames;

    /** Question Storage can treat this as "optional targets" or "preferred" */
    @Type(JsonType.class)
    private List<String> allowedConceptNames;

    @Type(JsonType.class)
    private List<String> targetLawNames;

    @Type(JsonType.class)
    private List<String> deniedLawNames;

    @Type(JsonType.class)
    private List<String> allowedLawNames;

    @Type(JsonType.class)
    private List<String> targetSkillNames;

    @Type(JsonType.class)
    private List<String> deniedSkillNames;

    @Type(JsonType.class)
    private List<String> allowedSkillNames;


    @Type(JsonType.class)
    private List<String> targetTags;

    // bit fields
    long conceptsTargetedBitmask;  // set to 0 if traceConceptsTargetedBitmask set
    long conceptsDeniedBitmask;
    long lawsTargetedBitmask;
    long lawsDeniedBitmask;
    long skillsDeniedBitmask;
    long skillsTargetedBitmask;
    long targetTagsBitmask;

    @Type(JsonType.class)
    private List<String> deniedQuestionNames;

    @Type(JsonType.class)
    private List<String> deniedQuestionTemplateIds = null;
    
    @Type(JsonType.class)
    private List<Integer> deniedQuestionMetaIds = null;  // same as deniedQuestionNames but using ids instead of names

    /**
     * Условная единица, показывающая долго или быстро решается вопрос
     * 1 - быстро, 10 - очень долго
     */
    private int solvingDuration;


    /**
     * Сложность задания [0..1]
     */
    private float complexity;

    /** минимум шагов в решении */
    private int stepsMin;
    /** максимум шагов в решении */
    private int stepsMax;

    /**
     * Направление поиска по сложности
     */
    @Enumerated(EnumType.ORDINAL)
    private SearchDirections complexitySearchDirection;

    /**
     * Направление поиска по сложности
     */
    @Enumerated(EnumType.ORDINAL)
    private SearchDirections lawsSearchDirection;

    /**
     * Probability of choosing an auto-generated question
     * Вероятность выбора авто-сгенерированного вопроса
     * range: [0..1]
     * 0: always pick manual question
     * 1: always pick auto-generated question
     */
    private double chanceToPickAutogeneratedQuestion = 1;

    @Column(nullable = true)
    private int foundCount = -1;
    
    @CreationTimestamp
    @Column(name = "created_at", nullable = false, updatable = false)
    private Date createdAt;

    // fields filled by generator:

    /** if > 0, no more need to process it (problem resolved) (positive number denotes the version of resolver; may need to re-calculate when requirements are updated)*/
    private int outdated = 0;
    /** number of times it was processed */
    private int processedCount = 0;
    /** set any time it tried to be processed by generator */
    Date lastProcessedDate;
    /** how many questions were added thanks to this request log entry */
    private Integer addedQuestions = null;

}

