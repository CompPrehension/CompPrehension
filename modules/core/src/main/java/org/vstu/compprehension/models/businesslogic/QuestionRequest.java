package org.vstu.compprehension.models.businesslogic;

import org.vstu.compprehension.models.entities.EnumData.SearchDirections;
import org.vstu.compprehension.models.entities.ExerciseAttemptEntity;
import lombok.Data;
import org.vstu.compprehension.models.entities.QuestionRequestLogEntity;

import java.util.List;
import java.util.stream.Collectors;

@Data
public class QuestionRequest {
    
    private List<Concept> deniedConcepts;

    private List<Concept> targetConcepts;
    private List<Concept> targetConceptsInPlan;

    /** Question Storage can treat this as "optional targets" or "preferred" */
    private List<Concept> allowedConcepts;

    private List<Law> targetLaws;
    private List<Law> targetLawsInPlan;

    private List<Law> deniedLaws;

    private List<Law> allowedLaws;

    long conceptsTargetedBitmask;  // set to 0 if traceConceptsTargetedBitmask set
    long conceptsTargetedInPlanBitmask;
    long traceConceptsTargetedBitmask = 0;  // set if required for search
    long conceptsDeniedBitmask;
    long lawsTargetedInPlanBitmask;
    long lawsTargetedBitmask;
    long lawsDeniedBitmask;

    private List<String> deniedQuestionNames;

    // see also: QuestionEntity.options.metadata
    private List<Integer> deniedQuestionTemplateIds = null;
    private List<Integer> deniedQuestionMetaIds = null;  // same as deniedQuestionNames but using ids instead of names

    /**
     * Условная единица, показывающая долго или быстро решается вопрос
     * 1 - быстро, 10 - очень долго
     */
    private int solvingDuration;


    /**
     * Сложность задания [0..1]
     */
    private float complexity;

    /**
     * Направление поиска по сложности
     */
    private SearchDirections complexitySearchDirection;

    /**
     * Направление поиска по сложности
     */
    private SearchDirections lawsSearchDirection;

    /**
     * Probability of choosing an auto-generated question
     * Вероятность выбора авто-сгенерированного вопроса
     * range: [0..1]
     * 0: always pick manual question
     * 1: always pick auto-generated question
     */
    private double chanceToPickAutogeneratedQuestion = 1;

    String domainShortname;
    
    ExerciseAttemptEntity exerciseAttempt;


    QuestionRequestLogEntity getLogEntity() {
        return new QuestionRequestLogEntity(
                0L,
                exerciseAttempt.getId(),
                exerciseAttempt.getExercise().getDomain().getShortName(),
                targetConcepts.stream().map(Concept::getName).collect(Collectors.toList()),
                targetConceptsInPlan.stream().map(Concept::getName).collect(Collectors.toList()),
                deniedConcepts.stream().map(Concept::getName).collect(Collectors.toList()),
                allowedConcepts.stream().map(Concept::getName).collect(Collectors.toList()),
                targetLaws.stream().map(Law::getName).collect(Collectors.toList()),
                targetLawsInPlan.stream().map(Law::getName).collect(Collectors.toList()),
                deniedLaws.stream().map(Law::getName).collect(Collectors.toList()),
                allowedLaws.stream().map(Law::getName).collect(Collectors.toList()),
                conceptsTargetedBitmask,
                traceConceptsTargetedBitmask,
                conceptsDeniedBitmask,
                lawsTargetedBitmask,
                lawsDeniedBitmask,
                deniedQuestionNames,
                deniedQuestionTemplateIds,
                deniedQuestionMetaIds,
                solvingDuration,
                complexity,
                complexitySearchDirection,
                lawsSearchDirection,
                chanceToPickAutogeneratedQuestion,
                -1,
                null
        );
    }
}

