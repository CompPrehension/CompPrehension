package org.vstu.compprehension.models.businesslogic;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.jetbrains.annotations.Nullable;
import org.vstu.compprehension.models.entities.EnumData.SearchDirections;
import org.vstu.compprehension.models.entities.QuestionRequestLogEntity;

import java.util.List;
import java.util.stream.Collectors;

@Builder(toBuilder = true)
@NoArgsConstructor
@AllArgsConstructor
@Data
public class QuestionRequest {
    private List<Concept> deniedConcepts;
    private List<Concept> targetConcepts;
    private List<Concept> targetConceptsInPlan;
    /** Question Storage can treat this as "optional targets" or "preferred" */
    private List<Concept> allowedConcepts;
    private List<Law> targetLaws;
    private List<Law> targetLawsInPlan;
    private List<Law> deniedLaws;
    private List<Law> allowedLaws;

    private List<String> deniedQuestionNames;

    // see also: QuestionEntity.options.metadata
    @Builder.Default
    private List<Integer> deniedQuestionTemplateIds = List.of(0);
    @Builder.Default
    private List<Integer> deniedQuestionMetaIds = List.of(0);  // same as deniedQuestionNames but using ids instead of names

    /**
     * Условная единица, показывающая долго или быстро решается вопрос
     * 1 - быстро, 10 - очень долго
     */
    private int solvingDuration;
    /**
     * Сложность задания [0..1]
     */
    private float complexity;

    /** минимум шагов в решении */
    private int stepsMin;
    /** максимум шагов в решении */
    private int stepsMax;

    /**
     * Направление поиска по сложности
     */
    private SearchDirections complexitySearchDirection;

    /**
     * Направление поиска по сложности
     */
    private SearchDirections lawsSearchDirection;

    /**
     * Probability of choosing an auto-generated question
     * Вероятность выбора авто-сгенерированного вопроса
     * range: [0..1]
     * 0: always pick manual question
     * 1: always pick auto-generated question
     */
    @Builder.Default
    private double chanceToPickAutogeneratedQuestion = 1;

    private String domainShortname;

    private @Nullable Long exerciseAttemptId;

    public QuestionRequestLogEntity getLogEntity() {
        return QuestionRequestLogEntity.builder()
                // .id(0L)
                .exerciseAttemptId(exerciseAttemptId)
                .domainShortname(domainShortname)
                .targetConceptNames(targetConcepts.stream().map(Concept::getName).collect(Collectors.toList()))
                .targetConceptNamesInPlan(targetConceptsInPlan.stream().map(Concept::getName).collect(Collectors.toList()))
                .deniedConceptNames(deniedConcepts.stream().map(Concept::getName).collect(Collectors.toList()))
                .allowedConceptNames(allowedConcepts.stream().map(Concept::getName).collect(Collectors.toList()))
                .targetLawNames(targetLaws.stream().map(Law::getName).collect(Collectors.toList()))
                .targetLawNamesInPlan(targetLawsInPlan.stream().map(Law::getName).collect(Collectors.toList()))
                .deniedLawNames(deniedLaws.stream().map(Law::getName).collect(Collectors.toList()))
                .allowedLawNames(allowedLaws.stream().map(Law::getName).collect(Collectors.toList()))
                .conceptsTargetedBitmask(Concept.combineToBitmask(targetConcepts))
                .conceptsDeniedBitmask(Concept.combineToBitmask(deniedConcepts))
                .lawsTargetedBitmask(Law.combineToBitmask(targetLaws))
                .lawsDeniedBitmask(Law.combineToBitmask(deniedLaws))
                .deniedQuestionNames(deniedQuestionNames)
                .deniedQuestionTemplateIds(deniedQuestionTemplateIds.isEmpty() ? List.of(0) : deniedQuestionTemplateIds)
                .deniedQuestionMetaIds(deniedQuestionMetaIds.isEmpty() ? List.of(0) : deniedQuestionMetaIds)
                .solvingDuration(solvingDuration)
                .complexity(complexity)
                .stepsMin(stepsMin)
                .stepsMax(stepsMax)
                .complexitySearchDirection(complexitySearchDirection)
                .lawsSearchDirection(lawsSearchDirection)
                .chanceToPickAutogeneratedQuestion(chanceToPickAutogeneratedQuestion)
                .foundCount(-1)
                .createdDate(null)
        .build();
    }

    public QuestionBankSearchRequest toBankSearchRequest() {
        return QuestionBankSearchRequest.builder()
                .deniedConcepts(deniedConcepts)
                .targetConcepts(targetConcepts)
                .targetLaws(targetLaws)
                .deniedLaws(deniedLaws)
                .deniedQuestionNames(deniedQuestionNames)
                .deniedQuestionTemplateIds(deniedQuestionTemplateIds)
                .deniedQuestionMetaIds(deniedQuestionMetaIds)
                .domainShortname(domainShortname)
                .complexity(complexity)
                .stepsMin(stepsMin)
                .stepsMax(stepsMax)
                .lawsSearchDirection(lawsSearchDirection)
                .build();
    }
}

