<DecisionTree>
    <InputVariables>
        <DecisionTreeVarDecl name="X" type="operator"/>
        <AdditionalVarDecl name="X1" type="token">
            <Expression>
                <GetExtreme extremeVarName="x1" type="token" varName="x_token">
                    <CheckRelationship relationshipName="has">
                        <DecisionTreeVar name="X"/>
                        <Variable name="x_token"/>
                    </CheckRelationship>
                    <CheckRelationship relationshipName="leftOf">
                        <Variable name="x1"/>
                        <Variable name="x_token"/>
                    </CheckRelationship>
                </GetExtreme>
            </Expression>
        </AdditionalVarDecl>
    </InputVariables>
    <ThoughtBranch _EN_description="${val('X','и')} ${result ? 'can' : 'cant'} be evaluated next"
                   _EN_error_prefix="${val('X','и')} cannot be evaluated yet, because "
                   _EN_hint_prefix="${val('X','и')} can be evaluated, because "
                   _RU_description="${val('X','и')} ${result ? '' : 'не'} может выполниться следующим"
                   _RU_error_prefix="${val('X','и')} не может быть вычислен в настоящее время потому, что "
                   _RU_hint_prefix="${val('X','и')} может быть вычислен в настоящее время потому, что "
                   _TEMPLATING_ID="1" _alias="main">
        <BranchAggregationNode _EN_asNextStep="We should check if ${val('X','и')} can be evaluated next."
                               _EN_description="${val('X','и')} ${result ? 'can' : 'cant'} be evaluated next"
                               _EN_endingCause="Because one of the operands of ${val('X','и')} prevents its evaluation"
                               _RU_asNextStep="Необходимо проверить, может ли ${val('X','и')} выполниться следующим."
                               _RU_description="${val('X','и')} ${result ? '' : 'не'} может выполниться следующим"
                               _RU_endingCause="Потому что есть факторы, мешающие дальнейшему вычислению ${val('X','р')}"
                               _TEMPLATING_ID="2" _alias="main.and" operator="AND">
            <ThoughtBranch
                    _EN_description="inner operand of ${val('X','р')} ${result ? 'doesnt require' : 'requires'} further evaluation"
                    _EN_nextStepExplanation="That's incorrect. One should first check if the operator needs inner operand at all."
                    _EN_nextStepQuestion="What is the first step when considering operator's inner operand?"
                    _RU_description="внутренний операнд ${val('X','р')} ${result ? 'не' : ''} требует дальнейших вычислений"
                    _RU_nextStepExplanation="Это неверно. Прежде всего необходимо проверить, нужен ли оператору внутренний операнд."
                    _RU_nextStepQuestion="С чего надо начать при рассмотрении внутреннего операнда?" _TEMPLATING_ID="3"
                    _alias="central">
                <QuestionNode _EN_asNextStep="We should check if the operator needs inner operand at all."
                              _EN_endingCause="Because ${class('X','и')} doesn't need inner operand."
                              _EN_question="How many token does ${class('X','и')} have?"
                              _RU_asNextStep="Необходимо проверить, нужен ли ${val('X','д')} внутренний операнд."
                              _RU_endingCause="Потому что ${class('X','и')} не требует внутреннего операнда"
                              _RU_question="Сколько токенов имеет ${class('X','и')}?" _TEMPLATING_ID="4"
                              _alias="central.isNeeded">
                    <Expression>
                        <GetPropertyValue propertyName="countOfTokens">
                            <DecisionTreeVar name="X"/>
                        </GetPropertyValue>
                    </Expression>
                    <Outcome _EN_explanation="That's incorrect. ${class('X','и')} has just one token."
                             _EN_nextStepExplanation="That's incorrect. Because ${class('X','и')} has just one token, it can't have an inner operand at all (only a left and a right one). Therefore, no inner operand to prevent its evaluation."
                             _EN_nextStepQuestion="What is the next reasoning step if we know that ${class('X','и')} has just one token?"
                             _RU_explanation="Это неверно. ${class('X','и')} имеет только один токен."
                             _RU_nextStepExplanation="Это неверно. Т.к. ${class('X','и')} имеет только один токен, а значит, не имеет внутреннего операнда (только левый и правый). Получается, внутренний операнд не может помешать его вычислению."
                             _RU_nextStepQuestion="Какие выводы можно сделать, если ${class('X','и')} имеет только один токен?"
                             _TEMPLATING_ID="5" value="1">
                        <BranchResultNode
                                _EN_explanation="${val('X','и')} has one token and so does not have a central operand."
                                _RU_explanation="${val('X','и')}  имеет одну лексему и поэтому не может иметь центрального операнда."
                                _TEMPLATING_ID="6" _skill="central_operand_needed" value="CORRECT"/>
                    </Outcome>
                    <Outcome _EN_explanation="That's incorrect. ${class('X','и')} has two tokens."
                             _EN_nextStepExplanation="That's incorrect - ${class('X','и')} having two tokens means it has an inner operand positioned between them. So we need to find the second token of ${val('X','р')}, to then find and check the state of the inner operand."
                             _EN_nextStepQuestion="What is the next reasoning step if we know that ${class('X','и')} has two tokens?"
                             _RU_explanation="Это неверно. ${class('X','и')} имеет два токена."
                             _RU_nextStepExplanation="Это неверно. Т.к. ${class('X','и')} имеет два токена, а значит, требует внутренний операнд, необходимо дальнейшее нахождение и рассмотрение данного операнда."
                             _RU_nextStepQuestion="Какой дальнейший шаг можно сделать, если ${class('X','и')} имеет два токена?"
                             _TEMPLATING_ID="7" value="2">
                        <FindActionNode _EN_asNextStep="We should find the second token of ${val('X','р')}."
                                        _EN_question="Find the second token of ${val('X', 'Gen')}."
                                        _RU_asNextStep="Необходимо найти второй токен ${val('X','р')}."
                                        _RU_question="Найдите второй токен ${val('X', 'Gen')}." _TEMPLATING_ID="8"
                                        _alias="central.findX2">
                            <DecisionTreeVarDecl name="X2" type="token"/>
                            <Expression>
                                <GetByCondition type="token" varName="x2">
                                    <LogicalAnd>
                                        <LogicalAnd>
                                            <CheckClass>
                                                <Variable name="x2"/>
                                                <Class name="token"/>
                                            </CheckClass>
                                            <CheckRelationship relationshipName="belongsTo">
                                                <Variable name="x2"/>
                                                <DecisionTreeVar name="X"/>
                                            </CheckRelationship>
                                        </LogicalAnd>
                                        <CheckRelationship relationshipName="rightOf">
                                            <Variable name="x2"/>
                                            <DecisionTreeVar name="X1"/>
                                        </CheckRelationship>
                                    </LogicalAnd>
                                </GetByCondition>
                            </Expression>
                            <FindError
                                    _EN_explanation="That's incorrect, because ${obj(checked, 'Nom')} can't be the token of ${class('X', 'Gen')} - tokens of this type are unrelated to ${class('X', 'Gen')}."
                                    _RU_explanation="Это неверно, поскольку ${obj(checked, 'Nom')} не может являться токеном ${class('X', 'Gen')} - он является токеном другого типа."
                                    _TEMPLATING_ID="9" _alias="X2_wrongType" priority="1">
                                <Expression>
                                    <LogicalAnd>
                                        <LogicalAnd>
                                            <CheckClass>
                                                <Variable name="checked"/>
                                                <Class name="token"/>
                                            </CheckClass>
                                            <CheckClass>
                                                <GetByRelationship relationshipName="belongsTo">
                                                    <Variable name="checked"/>
                                                </GetByRelationship>
                                                <Class name="operator"/>
                                            </CheckClass>
                                        </LogicalAnd>
                                        <Compare operator="NotEqual">
                                            <GetClass>
                                                <GetByRelationship relationshipName="belongsTo">
                                                    <Variable name="checked"/>
                                                </GetByRelationship>
                                            </GetClass>
                                            <GetClass>
                                                <DecisionTreeVar name="X"/>
                                            </GetClass>
                                        </Compare>
                                    </LogicalAnd>
                                </Expression>
                            </FindError>
                            <FindError
                                    _EN_explanation="That's incorrect - ${obj(checked, 'Nom')} is on the wrong side of ${val('X1', 'Gen')}."
                                    _RU_explanation="Это неверно - ${obj(checked, 'Nom')} находится не с той стороны от ${val('X1', 'Gen')}."
                                    _TEMPLATING_ID="10" _alias="X2_wrongSide" priority="2">
                                <Expression>
                                    <LogicalAnd>
                                        <LogicalAnd>
                                            <CheckClass>
                                                <Variable name="checked"/>
                                                <Class name="token"/>
                                            </CheckClass>
                                            <CheckClass>
                                                <GetByRelationship relationshipName="belongsTo">
                                                    <Variable name="checked"/>
                                                </GetByRelationship>
                                                <Class name="operator"/>
                                            </CheckClass>
                                        </LogicalAnd>
                                        <CheckRelationship relationshipName="isBetween">
                                            <DecisionTreeVar name="X1"/>
                                            <DecisionTreeVar name="X2"/>
                                            <Variable name="checked"/>
                                        </CheckRelationship>
                                    </LogicalAnd>
                                </Expression>
                            </FindError>
                            <FindError
                                    _EN_explanation="That's incorrect, ${obj(checked, 'Nom')} is too far to be the second token to ${val('X1', 'Gen')}."
                                    _RU_explanation="Это неверно, ${obj(checked, 'Nom')} слишком далеко, чтобы быть парой для ${val('X1', 'Gen')}."
                                    _TEMPLATING_ID="11" _alias="X2_tooFar" priority="3">
                                <Expression>
                                    <LogicalAnd>
                                        <LogicalAnd>
                                            <CheckClass>
                                                <Variable name="checked"/>
                                                <Class name="token"/>
                                            </CheckClass>
                                            <CheckClass>
                                                <GetByRelationship relationshipName="belongsTo">
                                                    <Variable name="checked"/>
                                                </GetByRelationship>
                                                <Class name="operator"/>
                                            </CheckClass>
                                        </LogicalAnd>
                                        <CheckRelationship relationshipName="isBetween">
                                            <DecisionTreeVar name="X2"/>
                                            <DecisionTreeVar name="X1"/>
                                            <Variable name="checked"/>
                                        </CheckRelationship>
                                    </LogicalAnd>
                                </Expression>
                            </FindError>
                            <FindError
                                    _EN_explanation="That's incorrect, ${obj(checked, 'Nom')} is too close to be the second token to ${val('X1', 'Gen')}."
                                    _RU_explanation="Это неверно, ${obj(checked, 'Nom')} слишком близко, чтобы быть парой для ${val('X1', 'Gen')}."
                                    _TEMPLATING_ID="12" _alias="X2_tooClose" priority="4">
                                <Expression>
                                    <LogicalAnd>
                                        <LogicalAnd>
                                            <CheckClass>
                                                <Variable name="checked"/>
                                                <Class name="token"/>
                                            </CheckClass>
                                            <CheckClass>
                                                <GetByRelationship relationshipName="belongsTo">
                                                    <Variable name="checked"/>
                                                </GetByRelationship>
                                                <Class name="operator"/>
                                            </CheckClass>
                                        </LogicalAnd>
                                        <CheckRelationship relationshipName="isBetween">
                                            <Variable name="checked"/>
                                            <DecisionTreeVar name="X1"/>
                                            <DecisionTreeVar name="X2"/>
                                        </CheckRelationship>
                                    </LogicalAnd>
                                </Expression>
                            </FindError>
                            <Outcome _EN_explanation="second token of ${val('X','р')} is ${val('X2','и')}"
                                     _RU_explanation="второй токен ${val('X','р')} это ${val('X2','и')}"
                                     _TEMPLATING_ID="13" value="true">
                                <QuestionNode
                                        _EN_asNextStep="We should check if there are unevaluated operators between ${val('X1', 'и')} and ${val('X2', 'и')}."
                                        _EN_endingCause="Because of the presence/absence of unevaluated operators between ${val('X1', 'и')} and ${val('X2', 'и')}."
                                        _EN_question="Are there unevaluated operators between ${val('X1', 'и')} and ${val('X2', 'и')}?"
                                        _RU_asNextStep="Необходимо проверить, есть ли внутри ${val('X','р')} невычисленные операторы."
                                        _RU_endingCause="Из-за наличия/отсутствия внутри ${val('X','р')} невычисленных операторов."
                                        _RU_question="Есть ли внутри ${val('X','р')} невычисленные операторы?"
                                        _TEMPLATING_ID="14" _alias="central.isUnevaluated">
                                    <Expression>
                                        <LogicalAnd>
                                            <LogicalOr>
                                                <Boolean value="true"/>
                                                <Boolean value="true"/>
                                            </LogicalOr>
                                            <ExistenceQuantifier type="operator" varName="i">
                                                <CheckClass>
                                                    <Variable name="i"/>
                                                    <Class name="operator"/>
                                                </CheckClass>
                                                <LogicalAnd>
                                                    <CheckRelationship relationshipName="isBetween">
                                                        <Variable name="i"/>
                                                        <DecisionTreeVar name="X1"/>
                                                        <DecisionTreeVar name="X2"/>
                                                    </CheckRelationship>
                                                    <Compare operator="Equal">
                                                        <GetPropertyValue propertyName="state">
                                                            <Variable name="i"/>
                                                        </GetPropertyValue>
                                                        <Enum owner="state" value="unevaluated"/>
                                                    </Compare>
                                                </LogicalAnd>
                                            </ExistenceQuantifier>
                                        </LogicalAnd>
                                    </Expression>
                                    <Outcome
                                            _EN_explanation="That's incorrect. There are unevaluated operators between ${val('X1', 'и')} and ${val('X2', 'и')}."
                                            _EN_nextStepExplanation="That's incorrect. Any unevaluated operator between ${val('X1', 'и')} and ${val('X2', 'и')}, means that the inner operand of ${val('X','р')} is not fully evaluated. Therefore, it is preventing its further evaluation.."
                                            _EN_nextStepQuestion="What can we conclude if there are unevaluated operators between ${val('X1', 'и')} and ${val('X2', 'и')}?"
                                            _RU_explanation="Это неверно. Внутри ${val('X','р')} присутствуют невычисленные операторы."
                                            _RU_nextStepExplanation="Это неверно. Т.к. внутри ${val('X','р')} присутствуют невычисленные операторы, это значит, что его внутренний операнд невычислен и мешает дальнейшему вычислению ${val('X','р')}."
                                            _RU_nextStepQuestion="Какие выводы можно сделать, если внутри ${val('X','р')} присутствуют невычисленные операторы?"
                                            _TEMPLATING_ID="15" value="true">
                                        <BranchResultNode _EN_explanation=" its central operand is not evaluated yet."
                                                          _RU_explanation="еще не вычислен его центральный операнд."
                                                          _TEMPLATING_ID="16" _error="central.isUnevaluated"
                                                          _law="error_base_student_error_in_complex;error_base_student_error_unevaluated_operand;error_base_enclosing_operators"
                                                          _skill="is_central_operand_evaluated" value="ERROR"/>
                                    </Outcome>
                                    <Outcome
                                            _EN_explanation="That's incorrect. There are no unevaluated operators between ${val('X1', 'и')} and ${val('X2', 'и')}."
                                            _EN_nextStepExplanation="That's incorrect. If all of the operators between ${val('X1', 'и')} and ${val('X2', 'и')} are evaluated, then the inner operand of ${val('X','р')} is fully evaluated. Therefore, it is not preventing its further evaluation."
                                            _EN_nextStepQuestion="What can we conclude if there are no unevaluated operators between ${val('X1', 'и')} and ${val('X2', 'и')}?"
                                            _RU_explanation="Это неверно. Все операторы внутри  ${val('X','р')} вычислены."
                                            _RU_nextStepExplanation="Это неверно. Т.к. внутри ${val('X','р')} нет невычисленные операторов, это значит, что его внутренний операнд полностью вычислен и не мешает дальнейшему вычислению ${val('X','р')}."
                                            _RU_nextStepQuestion="Какие выводы можно сделать, если  Все операторы внутри  ${val('X','р')} вычислены?"
                                            _TEMPLATING_ID="17" value="false">
                                        <BranchResultNode _EN_explanation="its central operand has been evaluated."
                                                          _RU_explanation=" его центральный операнд уже вычислен."
                                                          _TEMPLATING_ID="18" _skill="is_central_operand_evaluated"
                                                          value="CORRECT"/>
                                    </Outcome>
                                </QuestionNode>
                            </Outcome>
                        </FindActionNode>
                    </Outcome>
                </QuestionNode>
            </ThoughtBranch>
            <ThoughtBranch
                    _EN_description="left operand of ${val('X','р')} ${result ? 'doesnt require' : 'requires'} further evaluation"
                    _EN_nextStepExplanation="That's incorrect. One should first check if the operator needs left operand at all."
                    _EN_nextStepQuestion="What is the first step when considering operator's left operand?"
                    _RU_description="левый операнд ${val('X','р')} ${result ? 'не' : ''} требует дальнейших вычислений"
                    _RU_nextStepExplanation="Это неверно. Прежде всего необходимо проверить, нужен ли оператору левый операнд."
                    _RU_nextStepQuestion="С чего надо начать при рассмотрении левого операнда?" _TEMPLATING_ID="19"
                    _alias="left">
                <QuestionNode _EN_asNextStep="We should check if ${val('X','д')} needs a left operand."
                              _EN_endingCause="Because ${val('X','и')} doesn't need a left operand."
                              _EN_question="Does ${class('X','д')} need a left operand?"
                              _RU_asNextStep="Необходимо проверить, нужен ли ${val('X','д')} левый операнд."
                              _RU_endingCause="Потому что ${val('X','и')} не требует левого операнда"
                              _RU_question="Нужен ли ${class('X','д')} левый операнд?" _TEMPLATING_ID="20"
                              _alias="left.isNeeded">
                    <Expression>
                        <GetPropertyValue propertyName="needsOperand">
                            <DecisionTreeVar name="X"/>
                            <ParamsValues type="ordered">
                                <Enum owner="OperandPlacement" value="left"/>
                            </ParamsValues>
                        </GetPropertyValue>
                    </Expression>
                    <Outcome _EN_explanation="That's incorrect, because ${class('X','и')} doesn't need a left operand."
                             _EN_nextStepExplanation="That's incorrect. If it doesn't need a left operand, then the left operand can't prevent its further evaluation."
                             _EN_nextStepQuestion="What is the next reasoning step if we know that ${class('X','и')} doesn't need a left operand?"
                             _RU_explanation="Это неверно. ${class('X','и')} не имеет (не требует) левого операнда."
                             _RU_nextStepExplanation="Это неверно. Если оператор не имеет левого операнда, то и дальнейших вычислений его левый операнд требовать не может."
                             _RU_nextStepQuestion="Какие выводы можно сделать, если ${val('X','и')} не требует левого операнда?"
                             _TEMPLATING_ID="21" value="false">
                        <BranchResultNode _EN_explanation="it does not have a left operand"
                                          _RU_explanation="он не имеет левого операнда" _TEMPLATING_ID="22"
                                          _skill="left_operand_needed" value="CORRECT"/>
                    </Outcome>
                    <Outcome _EN_explanation="That's incorrect, because ${class('X','и')} does require a left operand."
                             _EN_nextStepExplanation="That's incorrect. From here, one should check if there are any operators that should still be evaluated in the left operand, and then reason based on that."
                             _EN_nextStepQuestion="What is the next reasoning step if we know that ${class('X','и')} needs a left operand?"
                             _RU_explanation="Это неверно. ${class('X','д')} всегда необходим левый операнд."
                             _RU_nextStepExplanation="Это неверно. Необходимо дальше рассмотреть потенциально конкурирующие с ${val('X','т')} операторы, и делать выводы исходя из их наличия/отсуствия."
                             _RU_nextStepQuestion="Какие выводы можно сделать, если ${val('X','д')} нужен левый операнд?"
                             _TEMPLATING_ID="23" value="true">
                        <FindActionNode
                                _EN_asNextStep="We should look for an unevaluated operator that could be in the left operand of ${val('X','р')}, preventing its further evaluation."
                                _EN_endingCause="Because there are only evaluated operators to the left of ${val('X','р')}."
                                _EN_question="Find an operator that could be in the left operand of ${val('X','р')}, preventing its further evaluation?"
                                _RU_asNextStep="Необходимо найти потенциально мешающий оператор слева от ${val('X','р')}"
                                _RU_endingCause="Потому что слева от ${val('X','р')} находятся только вычисленные операторы"
                                _RU_question="Какой оператор может помешать выполнению ${val('X', 'Gen')} слева?"
                                _TEMPLATING_ID="24" _alias="left.findY">
                            <DecisionTreeVarDecl name="Y1" type="token"/>
                            <Expression>
                                <GetExtreme extremeVarName="y1_ex" type="token" varName="y1">
                                    <LogicalAnd>
                                        <LogicalAnd>
                                            <LogicalAnd>
                                                <CheckClass>
                                                    <Variable name="y1"/>
                                                    <Class name="token"/>
                                                </CheckClass>
                                                <CheckRelationship relationshipName="leftOf">
                                                    <Variable name="y1"/>
                                                    <DecisionTreeVar name="X"/>
                                                </CheckRelationship>
                                            </LogicalAnd>
                                            <LogicalAnd>
                                                <CheckClass>
                                                    <GetByRelationship relationshipName="belongsTo">
                                                        <Variable name="y1"/>
                                                    </GetByRelationship>
                                                    <Class name="operator"/>
                                                </CheckClass>
                                                <Compare operator="Equal">
                                                    <GetPropertyValue propertyName="state">
                                                        <GetByRelationship relationshipName="belongsTo">
                                                            <Variable name="y1"/>
                                                        </GetByRelationship>
                                                    </GetPropertyValue>
                                                    <Enum owner="state" value="unevaluated"/>
                                                </Compare>
                                            </LogicalAnd>
                                        </LogicalAnd>
                                        <LogicalNot>
                                            <ExistenceQuantifier type="separator" varName="commaSep">
                                                <CheckRelationship relationshipName="isBetween">
                                                    <Variable name="commaSep"/>
                                                    <Variable name="y1"/>
                                                    <DecisionTreeVar name="X"/>
                                                </CheckRelationship>
                                                <LogicalNot>
                                                    <ExistenceQuantifier type="token" varName="f1">
                                                        <CheckClass>
                                                            <GetByRelationship relationshipName="belongsTo">
                                                                <Variable name="f1"/>
                                                            </GetByRelationship>
                                                            <Class name="operator"/>
                                                        </CheckClass>
                                                        <ExistenceQuantifier type="token" varName="f2">
                                                            <Compare operator="Equal">
                                                                <GetByRelationship relationshipName="belongsTo">
                                                                    <Variable name="f2"/>
                                                                </GetByRelationship>
                                                                <GetByRelationship relationshipName="belongsTo">
                                                                    <Variable name="f1"/>
                                                                </GetByRelationship>
                                                            </Compare>
                                                            <LogicalAnd>
                                                                <LogicalAnd>
                                                                    <CheckRelationship relationshipName="isBetween">
                                                                        <Variable name="commaSep"/>
                                                                        <Variable name="f1"/>
                                                                        <Variable name="f2"/>
                                                                    </CheckRelationship>
                                                                    <CheckRelationship relationshipName="isBetween">
                                                                        <Variable name="f1"/>
                                                                        <Variable name="y1"/>
                                                                        <DecisionTreeVar name="X"/>
                                                                    </CheckRelationship>
                                                                </LogicalAnd>
                                                                <CheckRelationship relationshipName="isBetween">
                                                                    <Variable name="f2"/>
                                                                    <Variable name="y1"/>
                                                                    <DecisionTreeVar name="X"/>
                                                                </CheckRelationship>
                                                            </LogicalAnd>
                                                        </ExistenceQuantifier>
                                                    </ExistenceQuantifier>
                                                </LogicalNot>
                                            </ExistenceQuantifier>
                                        </LogicalNot>
                                    </LogicalAnd>
                                    <CheckRelationship relationshipName="isBetween">
                                        <Variable name="y1_ex"/>
                                        <Variable name="y1"/>
                                        <DecisionTreeVar name="X"/>
                                    </CheckRelationship>
                                </GetExtreme>
                            </Expression>
                            <FindError
                                    _EN_explanation="That's incorrect, because ${obj(checked, 'Nom')} is to the right of ${val('X', 'Gen')}."
                                    _RU_explanation="Это неверно, поскольку ${obj(checked, 'Nom')} находится справа от ${val('X', 'Gen')}."
                                    _TEMPLATING_ID="25" _alias="Y1_wrongSide" priority="1">
                                <Expression>
                                    <LogicalAnd>
                                        <LogicalAnd>
                                            <CheckClass>
                                                <Variable name="checked"/>
                                                <Class name="token"/>
                                            </CheckClass>
                                            <CheckClass>
                                                <GetByRelationship relationshipName="belongsTo">
                                                    <Variable name="checked"/>
                                                </GetByRelationship>
                                                <Class name="operator"/>
                                            </CheckClass>
                                        </LogicalAnd>
                                        <CheckRelationship relationshipName="rightOf">
                                            <Variable name="checked"/>
                                            <DecisionTreeVar name="X"/>
                                        </CheckRelationship>
                                    </LogicalAnd>
                                </Expression>
                            </FindError>
                            <FindError
                                    _EN_explanation="That's incorrect, as ${obj(checked, 'Nom')} is omitted by an operator with a strict operand order (can you tell which one?), and therefore cannot prevent the evaluation of ${val('X', 'р')}."
                                    _RU_explanation="Это неверно, поскольку ${obj(checked, 'Nom')} опускается оператором со строгим порядком операндов (можете сказать, каким?), а значит не может помешать вычислению ${val('X', 'р')}."
                                    _TEMPLATING_ID="26" _alias="Y1_omitted" priority="2">
                                <Expression>
                                    <LogicalAnd>
                                        <CheckClass>
                                            <Variable name="checked"/>
                                            <Class name="token"/>
                                        </CheckClass>
                                        <LogicalAnd>
                                            <CheckClass>
                                                <GetByRelationship relationshipName="belongsTo">
                                                    <Variable name="checked"/>
                                                </GetByRelationship>
                                                <Class name="operator"/>
                                            </CheckClass>
                                            <Compare operator="Equal">
                                                <GetPropertyValue propertyName="state">
                                                    <GetByRelationship relationshipName="belongsTo">
                                                        <Variable name="checked"/>
                                                    </GetByRelationship>
                                                </GetPropertyValue>
                                                <Enum owner="state" value="omitted"/>
                                            </Compare>
                                        </LogicalAnd>
                                    </LogicalAnd>
                                </Expression>
                            </FindError>
                            <FindError
                                    _EN_explanation="That's incorrect - ${obj(checked, 'Nom')} is already evaluated and now serves as just an operand, and therefore cannot prevent the evaluation of ${val('X', 'Gen')}."
                                    _RU_explanation="Это неверно - ${obj(checked, 'Nom')} уже вычислен и по сути является операндом, а значит не может помешать вычислению ${val('X', 'Gen')}."
                                    _TEMPLATING_ID="27" _alias="Y1_evaluated" priority="3">
                                <Expression>
                                    <LogicalAnd>
                                        <CheckClass>
                                            <Variable name="checked"/>
                                            <Class name="token"/>
                                        </CheckClass>
                                        <LogicalAnd>
                                            <CheckClass>
                                                <GetByRelationship relationshipName="belongsTo">
                                                    <Variable name="checked"/>
                                                </GetByRelationship>
                                                <Class name="operator"/>
                                            </CheckClass>
                                            <Compare operator="NotEqual">
                                                <GetPropertyValue propertyName="state">
                                                    <GetByRelationship relationshipName="belongsTo">
                                                        <Variable name="checked"/>
                                                    </GetByRelationship>
                                                </GetPropertyValue>
                                                <Enum owner="state" value="unevaluated"/>
                                            </Compare>
                                        </LogicalAnd>
                                    </LogicalAnd>
                                </Expression>
                            </FindError>
                            <FindError
                                    _EN_explanation="That might be true, but there is a fitting operator closer to the ${val('X', 'Gen')} than ${obj(checked, 'Nom')} and it should be considered first."
                                    _RU_explanation="Это неверно, ${obj(checked, 'Nom')} слишком далеко от ${val('X', 'Gen')} чтобы помешать ему."
                                    _TEMPLATING_ID="28" _alias="Y1_tooFar" priority="4">
                                <Expression>
                                    <LogicalAnd>
                                        <LogicalAnd>
                                            <CheckClass>
                                                <Variable name="checked"/>
                                                <Class name="token"/>
                                            </CheckClass>
                                            <CheckClass>
                                                <GetByRelationship relationshipName="belongsTo">
                                                    <Variable name="checked"/>
                                                </GetByRelationship>
                                                <Class name="operator"/>
                                            </CheckClass>
                                        </LogicalAnd>
                                        <CheckRelationship relationshipName="isBetween">
                                            <DecisionTreeVar name="Y1"/>
                                            <DecisionTreeVar name="X"/>
                                            <Variable name="checked"/>
                                        </CheckRelationship>
                                    </LogicalAnd>
                                </Expression>
                            </FindError>
                            <AdditionalVarDecl name="Y" type="operator">
                                <Expression>
                                    <Cast>
                                        <GetByRelationship relationshipName="belongsTo">
                                            <DecisionTreeVar name="Y1"/>
                                        </GetByRelationship>
                                        <Class name="operator"/>
                                    </Cast>
                                </Expression>
                            </AdditionalVarDecl>
                            <Outcome _EN_explanation="there are no unevaluated operators to the left of ${val('X','р')}"
                                     _EN_nextStepExplanation="That's incorrect. If the expression to the left of the ${val('X','р')} is already evaluated, then the left operand of ${val('X','р')} is fully evaluated. Therefore, it is not preventing its further evaluation."
                                     _EN_nextStepQuestion="What is the next reasoning step if we know that there are only evaluated operators to the left of ${val('X','р')}?"
                                     _RU_explanation="слева от ${val('X','р')} нет потенциально мешающих операторов"
                                     _RU_nextStepExplanation="Это неверно. Если все выражение слева от ${val('X','р')} вычислено, значит и его левый операнд вычислен и не мешает вычислению ${val('X','р')}."
                                     _RU_nextStepQuestion="Какие выводы можно сделать, если слева от ${val('X','р')} находятся только вычисленные операторы?"
                                     _TEMPLATING_ID="29" value="false">
                                <BranchResultNode
                                        _EN_explanation="all operators to the left of it have been already evaluated."
                                        _RU_explanation="все операторы слева от него уже вычислены." _TEMPLATING_ID="30"
                                        _skill="left_competing_operator_present" value="CORRECT"/>
                            </Outcome>
                            <Outcome
                                    _EN_explanation="there is a potentially blocking operator to the left of ${val('X','р')} - it's ${val('Y','и')}"
                                    _EN_nextStepBranchResult="The one on the ${branchResult ? 'right' : 'left'} is always evaluated first"
                                    _EN_nextStepExplanation="That's incorrect. One should first determine if parentheses have any effect on the precedence of the two operators."
                                    _EN_nextStepQuestion="How should one determine the order of evaluation between two operators?"
                                    _RU_explanation="слева от ${val('X','р')} есть потенциально мешающий оператор - это ${val('Y','и')}"
                                    _RU_nextStepBranchResult="${branchResult ? 'Правый' : 'Левый'} оператор всегда выполняется первым"
                                    _RU_nextStepExplanation="Это неверно. Определение порядка вычислений двух операторов надо начинать с рассмотрения влияния скобок на их приоритет."
                                    _RU_nextStepQuestion="Как определяется порядок вычисления двух конкурирующих операторов?"
                                    _TEMPLATING_ID="31" value="true">
                                <QuestionNode
                                        _EN_asNextStep="We should check if ${val('X','и')} is between ${val('Y1', 'и')} and ${val('Y2', 'и')}"
                                        _EN_endingCause="Because ${val('X','и')} is between ${val('Y1', 'и')} and ${val('Y2', 'и')}"
                                        _EN_question="Is ${val('X','и')} between ${val('Y1', 'и')} and ${val('Y2', 'и')}?"
                                        _RU_asNextStep="Необходимо проверить, находится ли ${val('X','и')} между ${val('Y1','р')} И ${val('Y2','р')}"
                                        _RU_endingCause="Потому что ${val('X','и')} находится между ${val('Y1','р')} И ${val('Y2','р')}"
                                        _RU_question="Верно ли, что ${val('X','и')} находится между ${val('Y1','р')} И ${val('Y2','р')}?"
                                        _TEMPLATING_ID="32" _alias="left.predetermining.1.isXinY">
                                    <Expression>
                                        <ExistenceQuantifier type="token" varName="y2">
                                            <LogicalAnd>
                                                <LogicalAnd>
                                                    <CheckClass>
                                                        <Variable name="y2"/>
                                                        <Class name="token"/>
                                                    </CheckClass>
                                                    <CheckRelationship relationshipName="belongsTo">
                                                        <Variable name="y2"/>
                                                        <DecisionTreeVar name="Y"/>
                                                    </CheckRelationship>
                                                </LogicalAnd>
                                                <Compare operator="NotEqual">
                                                    <Variable name="y2"/>
                                                    <DecisionTreeVar name="Y1"/>
                                                </Compare>
                                            </LogicalAnd>
                                            <CheckRelationship relationshipName="isBetween">
                                                <DecisionTreeVar name="X"/>
                                                <DecisionTreeVar name="Y1"/>
                                                <Variable name="y2"/>
                                            </CheckRelationship>
                                        </ExistenceQuantifier>
                                    </Expression>
                                    <Outcome _EN_nextStepExplanation="That's incorrect."
                                             _EN_nextStepQuestion="What can we now conclude?"
                                             _RU_nextStepExplanation="Это неверно."
                                             _RU_nextStepQuestion="Какие выводы можно сделать на данном этапе?"
                                             _TEMPLATING_ID="33" value="true">
                                        <BranchResultNode
                                                _EN_explanation="it is enclosed in the ${val('Y','и')}, which is closest to it from the left"
                                                _RU_explanation="он заключен в ближайший оператор слева к нему ${val('Y','и')}"
                                                _TEMPLATING_ID="34" _skill="left_operator_enclosed" value="CORRECT"/>
                                    </Outcome>
                                    <Outcome _EN_nextStepExplanation="That's incorrect."
                                             _EN_nextStepQuestion="What can we now conclude?"
                                             _RU_nextStepExplanation="Это неверно."
                                             _RU_nextStepQuestion="Какие выводы можно сделать на данном этапе?"
                                             _TEMPLATING_ID="35" value="false">
                                        <BranchAggregationNode
                                                _EN_asNextStep="We should check if parentheses have any effect on the precedence of the two operators."
                                                _EN_endingCause="Because of the effect of the parentheses"
                                                _EN_question="How do parentheses affect the evaluation of ${val('X','т')} and ${val('Y','т')}?"
                                                _RU_asNextStep="Необходимо рассмотреть влияние скобок на взаимодействие между ${val('X','т')} и ${val('Y','т')}."
                                                _RU_endingCause="Из-за роли скобок в выражении"
                                                _RU_question="Как скобки влияют на взаимодействие между ${val('X','т')} и ${val('Y','т')}?"
                                                _TEMPLATING_ID="36" _alias="left.predetermining" operator="MUTEX">
                                            <ThoughtBranch
                                                    _EN_description="${result ? '${val('X','и')} is inside of parenthesis, and ${val('Y','и')} is ouside of them' : 'there are no parenthesis that enclose ${val('X','и')} but not ${val('Y','в')}'}"
                                                    _RU_description="${result ? '${val('X','и')} находится в скобках, а ${val('Y','и')} - за их пределами' : 'не существует скобок, окружающих ${val('X','и')}, но не окружающих ${val('Y','в')}'}"
                                                    _TEMPLATING_ID="37" _alias="left.predetermining.2">
                                                <QuestionNode
                                                        _EN_asNextStep="Необходимо проверить, существуют ли скобки, окружающие ${val('X','и')}, но не ${val('Y','и')}"
                                                        _EN_endingCause="Потому что существуют скобки, окружающие ${val('X','и')}, но не ${val('Y','и')}"
                                                        _EN_question="Существуют ли скобки, окружающие ${val('X','и')}, но не ${val('Y','и')}?"
                                                        _RU_asNextStep="Необходимо проверить, существуют ли скобки, окружающие ${val('X','и')}, но не ${val('Y','и')}"
                                                        _RU_endingCause="Потому что существуют скобки, окружающие ${val('X','и')}, но не ${val('Y','и')}"
                                                        _RU_question="Существуют ли скобки, окружающие ${val('X','и')}, но не ${val('Y','и')}?"
                                                        _TEMPLATING_ID="38"
                                                        _alias="left.predetermining.2.isXinParenthesis">
                                                    <Expression>
                                                        <ExistenceQuantifier type="parenthesis" varName="p">
                                                            <CheckClass>
                                                                <Variable name="p"/>
                                                                <Class name="parenthesis"/>
                                                            </CheckClass>
                                                            <ExistenceQuantifier type="token" varName="p1">
                                                                <CheckRelationship relationshipName="belongsTo">
                                                                    <Variable name="p1"/>
                                                                    <Variable name="p"/>
                                                                </CheckRelationship>
                                                                <ExistenceQuantifier type="token" varName="p2">
                                                                    <CheckRelationship relationshipName="belongsTo">
                                                                        <Variable name="p2"/>
                                                                        <Variable name="p"/>
                                                                    </CheckRelationship>
                                                                    <LogicalAnd>
                                                                        <CheckRelationship relationshipName="isBetween">
                                                                            <DecisionTreeVar name="X"/>
                                                                            <Variable name="p1"/>
                                                                            <Variable name="p2"/>
                                                                        </CheckRelationship>
                                                                        <LogicalNot>
                                                                            <CheckRelationship
                                                                                    relationshipName="isBetween">
                                                                                <DecisionTreeVar name="Y"/>
                                                                                <Variable name="p1"/>
                                                                                <Variable name="p2"/>
                                                                            </CheckRelationship>
                                                                        </LogicalNot>
                                                                    </LogicalAnd>
                                                                </ExistenceQuantifier>
                                                            </ExistenceQuantifier>
                                                        </ExistenceQuantifier>
                                                    </Expression>
                                                    <Outcome value="false">
                                                        <BranchResultNode value="NULL"/>
                                                    </Outcome>
                                                    <Outcome value="true">
                                                        <BranchResultNode value="CORRECT"/>
                                                    </Outcome>
                                                </QuestionNode>
                                            </ThoughtBranch>
                                            <ThoughtBranch
                                                    _EN_description="${result ? '${val('Y','и')} is inside of parenthesis, and ${val('X','и')} is ouside of them' : 'there are no parenthesis that enclose ${val('Y','и')} but not ${val('X','в')}'}"
                                                    _RU_description="${result ? '${val('Y','и')} находится в скобках, а ${val('X','и')} - за их пределами' : 'не существует скобок, окружающих ${val('Y','и')}, но не окружающих ${val('X','в')}'}"
                                                    _TEMPLATING_ID="39" _alias="left.predetermining.3">
                                                <QuestionNode
                                                        _EN_asNextStep="Необходимо проверить, существуют ли скобки, окружающие ${val('Y','и')}, но не ${val('X','в')}"
                                                        _EN_endingCause="Потому что существуют скобки, окружающие ${val('Y','и')}, но не ${val('X','в')}"
                                                        _EN_question="Существуют ли скобки, окружающие ${val('Y','и')}, но не ${val('X','в')}?"
                                                        _RU_asNextStep="Необходимо проверить, существуют ли скобки, окружающие ${val('Y','и')}, но не ${val('X','в')}"
                                                        _RU_endingCause="Потому что существуют скобки, окружающие ${val('Y','и')}, но не ${val('X','в')}"
                                                        _RU_question="Существуют ли скобки, окружающие ${val('Y','и')}, но не ${val('X','в')}?"
                                                        _TEMPLATING_ID="40"
                                                        _alias="left.predetermining.3.isYinParenthesis">
                                                    <Expression>
                                                        <ExistenceQuantifier type="parenthesis" varName="p">
                                                            <CheckClass>
                                                                <Variable name="p"/>
                                                                <Class name="parenthesis"/>
                                                            </CheckClass>
                                                            <ExistenceQuantifier type="token" varName="p1">
                                                                <CheckRelationship relationshipName="belongsTo">
                                                                    <Variable name="p1"/>
                                                                    <Variable name="p"/>
                                                                </CheckRelationship>
                                                                <ExistenceQuantifier type="token" varName="p2">
                                                                    <CheckRelationship relationshipName="belongsTo">
                                                                        <Variable name="p2"/>
                                                                        <Variable name="p"/>
                                                                    </CheckRelationship>
                                                                    <LogicalAnd>
                                                                        <CheckRelationship relationshipName="isBetween">
                                                                            <DecisionTreeVar name="Y"/>
                                                                            <Variable name="p1"/>
                                                                            <Variable name="p2"/>
                                                                        </CheckRelationship>
                                                                        <LogicalNot>
                                                                            <CheckRelationship
                                                                                    relationshipName="isBetween">
                                                                                <DecisionTreeVar name="X"/>
                                                                                <Variable name="p1"/>
                                                                                <Variable name="p2"/>
                                                                            </CheckRelationship>
                                                                        </LogicalNot>
                                                                    </LogicalAnd>
                                                                </ExistenceQuantifier>
                                                            </ExistenceQuantifier>
                                                        </ExistenceQuantifier>
                                                    </Expression>
                                                    <Outcome value="false">
                                                        <BranchResultNode value="NULL"/>
                                                    </Outcome>
                                                    <Outcome value="true">
                                                        <BranchResultNode value="ERROR"/>
                                                    </Outcome>
                                                </QuestionNode>
                                            </ThoughtBranch>
                                            <Outcome
                                                    _EN_explanation="parentheses do ${result ? 'not' : ''} affect the evaluation of ${val('X','т')} and ${val('Y','т')}"
                                                    _EN_nextStepBranchResult="The operator on the ${branchResult ? 'right' : 'left'} is always evaluated first."
                                                    _EN_nextStepExplanation="That's incorrect. In the absence of parentheses' effect, the order of evaluation is determined by the precedence of the operators - so it should be considered next."
                                                    _EN_nextStepQuestion="In the absence of parentheses' effect, how should one determine the order of evaluation between two operator?"
                                                    _EN_text="They don't - parentheses have no effect on ${val('X','т')} and ${val('Y','т')}"
                                                    _RU_explanation="${result ? 'скобки не влияют на порядок вычисления ${val('X','р')} и ${val('Y','р')}' : 'скобки имеют влияние на порядок вычисления ${val('X','р')} и ${val('Y','р')}'}"
                                                    _RU_nextStepBranchResult="${branchResult ? 'Правый' : 'Левый'} оператор всегда выполняется первым"
                                                    _RU_nextStepExplanation="Это неверно. В отсутствии скобок, порядок выполнения стоящих рядом операторов определяется их приоритетом - его и надо рассматривать следующим."
                                                    _RU_nextStepQuestion="В отсутствии влияния скобок, как определяется порядок выполнения стоящих рядом операторов?"
                                                    _RU_text="Никак - скобки не влияют на порядок вычисления ${val('X','р')} и ${val('Y','р')}"
                                                    _TEMPLATING_ID="41" value="NULL">
                                                <QuestionNode
                                                        _EN_asNextStep="We should compare the precendence of ${class('X','р')} and ${class('Y','р')}."
                                                        _EN_endingCause="Because of the precendences of ${class('X','р')} and ${class('Y','р')}."
                                                        _EN_question="Compare the precendence of ${class('X','р')} and ${class('Y','р')}."
                                                        _EN_triviality="Precendences of ${val('X','р')} and ${val('Y','р')} are obviously equal as they are the same operator."
                                                        _RU_asNextStep="Необходимо сравнить приоритеты ${class('X','р')} и ${class('Y','р')}"
                                                        _RU_endingCause="Из-за соотношения приоритетов ${class('X','р')} и ${class('Y','р')}"
                                                        _RU_question="Сравните приоритеты ${class('X','р')} и ${class('Y','р')}"
                                                        _RU_triviality="Приоритеты ${val('X','р')} и ${val('Y','р')} очевидно равны, так как это один и тот же оператор."
                                                        _TEMPLATING_ID="42" _alias="left.precedence">
                                                    <Triviality>
                                                        <Compare operator="Equal">
                                                            <GetClass>
                                                                <DecisionTreeVar name="X"/>
                                                            </GetClass>
                                                            <GetClass>
                                                                <DecisionTreeVar name="Y"/>
                                                            </GetClass>
                                                        </Compare>
                                                    </Triviality>
                                                    <Expression>
                                                        <Compare>
                                                            <GetPropertyValue propertyName="precedence">
                                                                <DecisionTreeVar name="X"/>
                                                            </GetPropertyValue>
                                                            <GetPropertyValue propertyName="precedence">
                                                                <DecisionTreeVar name="Y"/>
                                                            </GetPropertyValue>
                                                        </Compare>
                                                    </Expression>
                                                    <Outcome
                                                            _EN_explanation="That's incorrect, because ${class('X','р')} has higher precendence than ${class('Y','р')}."
                                                            _EN_nextStepBranchResult="Operator with a ${branchResult ? 'higher' : 'lower'} precedence is always evaluated first"
                                                            _EN_nextStepExplanation="That's incorrect. The operator with a higher precedence is always evaluated first. Therefore, in this case, the ${val('X','и')} should be evaluated first, and we can conclude that its left operand does not prevent its evaluation."
                                                            _EN_nextStepQuestion="How should one determine the order of evaluation between two operators that have different precedences?"
                                                            _EN_text="${class('X','р')} has higher precendence."
                                                            _RU_explanation="Это неверно, поскольку ${class('X','и')} имеет больший приоритет, чем ${class('Y','и')}."
                                                            _RU_nextStepBranchResult="Оператор с ${branchResult ? 'большим' : 'меньшим'} приоритетом всегда выполняется первым"
                                                            _RU_nextStepExplanation="Это неверно. Оператор с большим приоритетом всегда выполняется первым. Т.к. ${class('X','и')} имеет больший приоритет, а значит может быть вычислен первым. Получается, левый операнд ${val('X','и')} не требует дальнейших вычислений."
                                                            _RU_nextStepQuestion="Как определяется порядок выполнения операторов, имеющих разные приоритеты?"
                                                            _RU_text="Приоритет ${class('X','р')} больше."
                                                            _TEMPLATING_ID="43" value="Comparison:less">
                                                        <BranchResultNode
                                                                _EN_explanation="it has a higher priority than ${val('Y','в')}."
                                                                _RU_explanation="он имеет приоритет выше, чем ${val('Y','в')}."
                                                                _TEMPLATING_ID="44"
                                                                _skill="right_competing_to_left_precedence"
                                                                value="CORRECT"/>
                                                    </Outcome>
                                                    <Outcome
                                                            _EN_explanation="That's incorrect, because ${class('Y','р')} has higher precendence than ${class('X','р')}."
                                                            _EN_nextStepBranchResult="Operator with a ${branchResult ? 'lower' : 'higher'} precedence is always evaluated first"
                                                            _EN_nextStepExplanation="That's incorrect. The operator with a higher precedence is always evaluated first. Therefore, in this case, the ${val('Y','и')} should be evaluated first, and we can conclude that the left operand of ${val('X','и')} does prevent its evaluation."
                                                            _EN_nextStepQuestion="How should one determine the order of evaluation between two operators that have different precedences?"
                                                            _EN_text="${class('Y','р')} has higher precendence."
                                                            _RU_explanation="Это неверно, поскольку ${class('Y','и')} имеет больший приоритет, чем ${class('X','и')}."
                                                            _RU_nextStepBranchResult="Оператор с ${branchResult ? 'меньшим' : 'большим'} приоритетом всегда выполняется первым"
                                                            _RU_nextStepExplanation="Это неверно. Оператор с большим приоритетом всегда выполняется первым. Т.к. ${class('Y','и')} имеет больший приоритет, он должен быть вычислен первым. Получается, левый операнд ${val('X','и')} требует дальнейших вычислений."
                                                            _RU_nextStepQuestion="Как определяется порядок выполнения операторов, имеющих разные приоритеты?"
                                                            _RU_text="Приоритет ${class('Y','р')} больше."
                                                            _TEMPLATING_ID="45" value="Comparison:greater">
                                                        <BranchResultNode
                                                                _EN_explanation="${val('Y','и')} on its left must be evaluated first because it has a higher precedence."
                                                                _RU_explanation="сначала должен быть вычислен ${val('Y','и')} слева от него, который имеет более высокий приоритет."
                                                                _TEMPLATING_ID="46" _error="left.precedence"
                                                                _law="error_base_higher_precedence_left"
                                                                _skill="right_competing_to_left_precedence"
                                                                value="ERROR"/>
                                                    </Outcome>
                                                    <Outcome
                                                            _EN_explanation="That's incorrect because ${class('X','р')} and ${class('Y','р')} have the same precedence."
                                                            _EN_nextStepBranchResult="The operator on the ${branchResult ? 'right' : 'left'} is always evaluated first."
                                                            _EN_nextStepExplanation="That's incorrect. The order of evaluation between two operators that have the same precedence is determined by their associativity. Therefore we should next check the associativity of ${class('X','р')} and ${class('Y','р')}."
                                                            _EN_nextStepQuestion="How should one determine the order of evaluation between two operators that have the same precedence?"
                                                            _EN_text="They have the same precedence."
                                                            _RU_explanation="Это неверно, поскольку приоритеты ${class('X','р')} и ${class('Y','р')} одинаковы."
                                                            _RU_nextStepBranchResult="${branchResult ? 'Правый' : 'Левый'} оператор всегда выполняется первым"
                                                            _RU_nextStepExplanation="Это неверно. Порядок выполнения операторов, имеющих одинаковые приоритеты, задается ассоциативностью, а значит следующим шагом необходимо проверить ассоциативность ${class('X','р')} и ${class('Y','р')}."
                                                            _RU_nextStepQuestion="Как определяется порядок выполнения операторов, имеющих равные приоритеты?"
                                                            _RU_text="Их приоритеты одинаковы." _TEMPLATING_ID="47"
                                                            value="Comparison:equal">
                                                        <QuestionNode
                                                                _EN_asNextStep="We should check if ${val('X','д')} needs a right operand."
                                                                _EN_endingCause="Because ${val('X','и')} doesn't need a right operand."
                                                                _EN_question="Does ${class('X','д')} need a right operand?"
                                                                _RU_asNextStep="Необходимо проверить, нужен ли ${val('X','д')} правый операнд."
                                                                _RU_endingCause="Потому что ${val('X','и')} не требует правого операнда"
                                                                _RU_question="Нужен ли ${class('X','д')} правый операнд?"
                                                                _TEMPLATING_ID="48" _alias="rightOperandAssoc.isNeeded">
                                                            <Expression>
                                                                <GetPropertyValue propertyName="needsOperand">
                                                                    <DecisionTreeVar name="X"/>
                                                                    <ParamsValues type="ordered">
                                                                        <Enum owner="OperandPlacement" value="right"/>
                                                                    </ParamsValues>
                                                                </GetPropertyValue>
                                                            </Expression>
                                                            <Outcome
                                                                    _EN_explanation="That's incorrect, because ${class('X','и')} doesn't need a right operand."
                                                                    _EN_nextStepExplanation="That's incorrect. If it doesn't need a right operand, then the right operand can't prevent its further evaluation."
                                                                    _EN_nextStepQuestion="What is the next reasoning step if we know that ${class('X','и')} doesn't need a right operand?"
                                                                    _RU_explanation="Это неверно. ${class('X','и')} не имеет (не требует) правого операнда."
                                                                    _RU_nextStepExplanation="Это неверно. Если оператор не имеет правого операнда, то и дальнейших вычислений его правый операнд требовать не может."
                                                                    _RU_nextStepQuestion="Какие выводы можно сделать, если ${val('X','и')} не требует правого операнда?"
                                                                    _TEMPLATING_ID="49" value="false">
                                                                <BranchResultNode
                                                                        _EN_explanation=" ${val('Y','и')} on its left must be evaluated first - these operators have the same precedence, but are evaluated from left to right (have left associativity)."
                                                                        _RU_explanation="сначала должен быть вычислен ${val('Y','и')} слева от него: эти операторы имеют одинаковый приоритет, и вычисляются слева направо (левоассоциативны)."
                                                                        _TEMPLATING_ID="50"
                                                                        _skill="associativity_without_right_opposing_operand"
                                                                        value="ERROR"/>
                                                            </Outcome>
                                                            <Outcome
                                                                    _EN_explanation="That's incorrect, because ${class('X','и')} does require a right operand."
                                                                    _EN_nextStepExplanation="That's incorrect. From here, one should check if there are any operators that should still be evaluated in the right operand, and then reason based on that."
                                                                    _EN_nextStepQuestion="What is the next reasoning step if we know that ${class('X','и')} needs a right operand?"
                                                                    _RU_explanation="Это неверно. ${class('X','д')} всегда необходим правый операнд."
                                                                    _RU_nextStepExplanation="Это неверно. Необходимо дальше рассмотреть потенциально конкурирующие с ${val('X','т')} операторы, и делать выводы исходя из их наличия/отсуствия."
                                                                    _RU_nextStepQuestion="Какие выводы можно сделать, если ${val('X','д')} нужен правый операнд?"
                                                                    _TEMPLATING_ID="51" value="true">
                                                                <QuestionNode
                                                                        _EN_asNextStep="We should determine the associativity of ${class('X','р')} and ${class('Y','р')}"
                                                                        _EN_endingCause="Because of the associatity of ${class('X','р')} and ${class('Y','р')}"
                                                                        _EN_question="What's the associativity of ${class('X','р')} and ${class('Y','р')}?"
                                                                        _RU_asNextStep="Необходимо проверить, какова ассоциативность ${class('X','р')} и ${class('Y','р')}"
                                                                        _RU_endingCause="Из-за ассоциативности ${class('X','р')} и ${class('Y','р')}"
                                                                        _RU_question="Какова ассоциативность ${class('X','р')} и ${class('Y','р')}?"
                                                                        _TEMPLATING_ID="52" _alias="left.associativity">
                                                                    <Expression>
                                                                        <GetPropertyValue propertyName="associativity">
                                                                            <DecisionTreeVar name="Y"/>
                                                                        </GetPropertyValue>
                                                                    </Expression>
                                                                    <Outcome
                                                                            _EN_explanation="That's incorrect, because ${class('X','р')} and ${class('Y','р')} have left associativity."
                                                                            _EN_nextStepBranchResult="The one on the ${branchResult ? 'right' : 'left'}"
                                                                            _EN_nextStepExplanation="That's incorrect. Operators that have left associativity evaluate from left to right. Therefore, in this case, ${class('Y','и')} should be evaluated first, and we can conclude that the left operand of ${val('X','и')} does prevent its evaluation."
                                                                            _EN_nextStepQuestion="Which of the two nearby operators evaluates first if they have left associativity?"
                                                                            _EN_text="left"
                                                                            _RU_explanation="Это неверно, поскольку ${class('X','и')} и ${class('Y','и')} имеют левую ассоциативность."
                                                                            _RU_nextStepBranchResult="${branchResult ? 'Правый' : 'Левый'}"
                                                                            _RU_nextStepExplanation="Это неверно. При левой ассоциативности операторы выполняются слева направо. В данном случае это значит, ${class('Y','и')} должен быть вычислен первым. Получается, левый операнд ${val('X','и')} требует дальнейших вычислений."
                                                                            _RU_nextStepQuestion="Какой из двух рядом стоящих операторов выполнится первым, если операторы имеют левую ассоциативность?"
                                                                            _RU_text="левая" _TEMPLATING_ID="53"
                                                                            value="associativity:left">
                                                                        <BranchResultNode
                                                                                _EN_explanation=" ${val('Y','и')} on its left must be evaluated first - these operators have the same precedence, but are evaluated from left to right (have left associativity)."
                                                                                _RU_explanation=" имеет одинаковый приоритет с ${val('Y','р')} и правую ассоциативность (вычисляются справа налево) ."
                                                                                _TEMPLATING_ID="54"
                                                                                _error="left.associativity"
                                                                                _law="error_base_same_precedence_left_associativity_left"
                                                                                _skill="right_competing_to_left_associativity"
                                                                                value="ERROR"/>
                                                                    </Outcome>
                                                                    <Outcome
                                                                            _EN_explanation="That's incorrect, because ${class('X','р')} and ${class('Y','р')} have right associativity."
                                                                            _EN_nextStepBranchResult="The one on the ${branchResult ? 'right' : 'left'}"
                                                                            _EN_nextStepExplanation="That's incorrect. Operators that have right associativity evaluate from right to left. Therefore, in this case, ${class('X','и')} should be evaluated first, anand we can conclude that its left operand does not prevent its evaluation."
                                                                            _EN_nextStepQuestion="Which of the two nearby operators evaluates first if they have right associativity?"
                                                                            _EN_text="right"
                                                                            _RU_explanation="Это неверно, поскольку ${class('X','и')} и ${class('Y','и')} имеют правую ассоциативность."
                                                                            _RU_nextStepBranchResult="${branchResult ? 'Правый' : 'Левый'}"
                                                                            _RU_nextStepExplanation="Это неверно. При правой ассоциативности операторы выполняются справа налево. В данном случае это значит, ${class('X','и')} должен быть вычислен первым. Получается, левый операнд ${val('X','и')} не требует дальнейших вычислений."
                                                                            _RU_nextStepQuestion="Какой из двух рядом стоящих операторов выполнится первым, если операторы имеют правую ассоциативность?"
                                                                            _RU_text="правая" _TEMPLATING_ID="55"
                                                                            value="associativity:right">
                                                                        <BranchResultNode
                                                                                _EN_explanation="it has the same precedence as ${val('Y','р')} and right associativity."
                                                                                _RU_explanation=" имеет одинаковый приоритет с ${val('Y','р')} и правую ассоциативность (вычисляются справа налево) ."
                                                                                _TEMPLATING_ID="56"
                                                                                _skill="right_competing_to_left_associativity"
                                                                                value="CORRECT"/>
                                                                    </Outcome>
                                                                </QuestionNode>
                                                            </Outcome>
                                                        </QuestionNode>
                                                    </Outcome>
                                                </QuestionNode>
                                            </Outcome>
                                        </BranchAggregationNode>
                                    </Outcome>
                                </QuestionNode>
                            </Outcome>
                        </FindActionNode>
                    </Outcome>
                </QuestionNode>
            </ThoughtBranch>
            <ThoughtBranch
                    _EN_description="right operand of ${val('X','р')} ${result ? 'doesnt require' : 'requires'} further evaluation"
                    _EN_nextStepExplanation="That's incorrect. One should first check if the operator needs right operand at all."
                    _EN_nextStepQuestion="What is the first step when considering operator's right operand?"
                    _RU_description="правый операнд ${val('X','р')} ${result ? 'не' : ''} требует дальнейших вычислений"
                    _RU_nextStepExplanation="Это неверно. Прежде всего необходимо проверить, нужен ли оператору правый операнд."
                    _RU_nextStepQuestion="С чего надо начать при рассмотрении правого операнда?" _TEMPLATING_ID="57"
                    _alias="right">
                <QuestionNode _EN_asNextStep="We should check if ${val('X','д')} needs a right operand."
                              _EN_endingCause="Because ${val('X','и')} doesn't need a right operand."
                              _EN_question="Does ${class('X','д')} need a right operand?"
                              _RU_asNextStep="Необходимо проверить, нужен ли ${val('X','д')} правый операнд."
                              _RU_endingCause="Потому что ${val('X','и')} не требует правого операнда"
                              _RU_question="Нужен ли ${class('X','д')} правый операнд?" _TEMPLATING_ID="58"
                              _alias="right.isNeeded">
                    <Expression>
                        <GetPropertyValue propertyName="needsOperand">
                            <DecisionTreeVar name="X"/>
                            <ParamsValues type="ordered">
                                <Enum owner="OperandPlacement" value="right"/>
                            </ParamsValues>
                        </GetPropertyValue>
                    </Expression>
                    <Outcome _EN_explanation="That's incorrect, because ${class('X','и')} doesn't need a right operand."
                             _EN_nextStepExplanation="That's incorrect. If it doesn't need a right operand, then the right operand can't prevent its further evaluation."
                             _EN_nextStepQuestion="What is the next reasoning step if we know that ${class('X','и')} doesn't need a right operand?"
                             _RU_explanation="Это неверно. ${class('X','и')} не имеет (не требует) правого операнда."
                             _RU_nextStepExplanation="Это неверно. Если оператор не имеет правого операнда, то и дальнейших вычислений его правый операнд требовать не может."
                             _RU_nextStepQuestion="Какие выводы можно сделать, если ${val('X','и')} не требует правого операнда?"
                             _TEMPLATING_ID="59" value="false">
                        <BranchResultNode _EN_explanation="it does not have a right operand"
                                          _RU_explanation="он не имеет правого операнда" _TEMPLATING_ID="60"
                                          _skill="right_operand_needed" value="CORRECT"/>
                    </Outcome>
                    <Outcome _EN_explanation="That's incorrect, because ${class('X','и')} does require a right operand."
                             _EN_nextStepExplanation="That's incorrect. From here, one should check if there are any operators that should still be evaluated in the right operand, and then reason based on that."
                             _EN_nextStepQuestion="What is the next reasoning step if we know that ${class('X','и')} needs a right operand?"
                             _RU_explanation="Это неверно. ${class('X','д')} всегда необходим правый операнд."
                             _RU_nextStepExplanation="Это неверно. Необходимо дальше рассмотреть потенциально конкурирующие с ${val('X','т')} операторы, и делать выводы исходя из их наличия/отсуствия."
                             _RU_nextStepQuestion="Какие выводы можно сделать, если ${val('X','д')} нужен правый операнд?"
                             _TEMPLATING_ID="61" value="true">
                        <FindActionNode
                                _EN_asNextStep="We should look for an unevaluated operator that could be in the right operand of ${val('X','р')}, preventing its further evaluation."
                                _EN_endingCause="Because there are only evaluated operators to the right of ${val('X','р')}."
                                _EN_question="Find an operator that could be in the right operand of ${val('X','р')}, preventing its further evaluation?"
                                _RU_asNextStep="Необходимо найти потенциально мешающий оператор справа от ${val('X','р')}"
                                _RU_endingCause="Потому что справа от ${val('X','р')} находятся только вычисленные операторы"
                                _RU_question="Какой оператор может помешать выполнению ${val('X', 'Gen')} справа?"
                                _TEMPLATING_ID="62" _alias="right.findZ">
                            <DecisionTreeVarDecl name="Z1" type="token"/>
                            <Expression>
                                <GetExtreme extremeVarName="z1_ex" type="token" varName="z1">
                                    <LogicalAnd>
                                        <LogicalAnd>
                                            <LogicalAnd>
                                                <CheckClass>
                                                    <Variable name="z1"/>
                                                    <Class name="token"/>
                                                </CheckClass>
                                                <CheckRelationship relationshipName="rightOf">
                                                    <Variable name="z1"/>
                                                    <DecisionTreeVar name="X"/>
                                                </CheckRelationship>
                                            </LogicalAnd>
                                            <LogicalAnd>
                                                <CheckClass>
                                                    <GetByRelationship relationshipName="belongsTo">
                                                        <Variable name="z1"/>
                                                    </GetByRelationship>
                                                    <Class name="operator"/>
                                                </CheckClass>
                                                <Compare operator="Equal">
                                                    <GetPropertyValue propertyName="state">
                                                        <GetByRelationship relationshipName="belongsTo">
                                                            <Variable name="z1"/>
                                                        </GetByRelationship>
                                                    </GetPropertyValue>
                                                    <Enum owner="state" value="unevaluated"/>
                                                </Compare>
                                            </LogicalAnd>
                                        </LogicalAnd>
                                        <LogicalNot>
                                            <ExistenceQuantifier type="separator" varName="commaSep">
                                                <CheckRelationship relationshipName="isBetween">
                                                    <Variable name="commaSep"/>
                                                    <Variable name="z1"/>
                                                    <DecisionTreeVar name="X"/>
                                                </CheckRelationship>
                                                <LogicalNot>
                                                    <ExistenceQuantifier type="token" varName="f1">
                                                        <CheckClass>
                                                            <GetByRelationship relationshipName="belongsTo">
                                                                <Variable name="f1"/>
                                                            </GetByRelationship>
                                                            <Class name="operator"/>
                                                        </CheckClass>
                                                        <ExistenceQuantifier type="token" varName="f2">
                                                            <Compare operator="Equal">
                                                                <GetByRelationship relationshipName="belongsTo">
                                                                    <Variable name="f2"/>
                                                                </GetByRelationship>
                                                                <GetByRelationship relationshipName="belongsTo">
                                                                    <Variable name="f1"/>
                                                                </GetByRelationship>
                                                            </Compare>
                                                            <LogicalAnd>
                                                                <LogicalAnd>
                                                                    <CheckRelationship relationshipName="isBetween">
                                                                        <Variable name="commaSep"/>
                                                                        <Variable name="f1"/>
                                                                        <Variable name="f2"/>
                                                                    </CheckRelationship>
                                                                    <CheckRelationship relationshipName="isBetween">
                                                                        <Variable name="f1"/>
                                                                        <Variable name="z1"/>
                                                                        <DecisionTreeVar name="X"/>
                                                                    </CheckRelationship>
                                                                </LogicalAnd>
                                                                <CheckRelationship relationshipName="isBetween">
                                                                    <Variable name="f2"/>
                                                                    <Variable name="z1"/>
                                                                    <DecisionTreeVar name="X"/>
                                                                </CheckRelationship>
                                                            </LogicalAnd>
                                                        </ExistenceQuantifier>
                                                    </ExistenceQuantifier>
                                                </LogicalNot>
                                            </ExistenceQuantifier>
                                        </LogicalNot>
                                    </LogicalAnd>
                                    <CheckRelationship relationshipName="isBetween">
                                        <Variable name="z1_ex"/>
                                        <Variable name="z1"/>
                                        <DecisionTreeVar name="X"/>
                                    </CheckRelationship>
                                </GetExtreme>
                            </Expression>
                            <FindError
                                    _EN_explanation="That's incorrect, because ${obj(checked, 'Nom')} is to the left of ${val('X', 'Gen')}."
                                    _RU_explanation="Это неверно, поскольку ${obj(checked, 'Nom')} находится слева от ${val('X', 'Gen')}."
                                    _TEMPLATING_ID="63" _alias="Z1_wrongSide" priority="1">
                                <Expression>
                                    <LogicalAnd>
                                        <LogicalAnd>
                                            <CheckClass>
                                                <Variable name="checked"/>
                                                <Class name="token"/>
                                            </CheckClass>
                                            <CheckClass>
                                                <GetByRelationship relationshipName="belongsTo">
                                                    <Variable name="checked"/>
                                                </GetByRelationship>
                                                <Class name="operator"/>
                                            </CheckClass>
                                        </LogicalAnd>
                                        <CheckRelationship relationshipName="leftOf">
                                            <Variable name="checked"/>
                                            <DecisionTreeVar name="X"/>
                                        </CheckRelationship>
                                    </LogicalAnd>
                                </Expression>
                            </FindError>
                            <FindError
                                    _EN_explanation="That's incorrect, as ${obj(checked, 'Nom')} is omitted by an operator with a strict operand order (can you tell which one?), and therefore cannot prevent the evaluation of ${val('X', 'р')}."
                                    _RU_explanation="Это неверно, поскольку ${obj(checked, 'Nom')} опускается оператором со строгим порядком операндов (можете сказать, каким?), а значит не может помешать вычислению ${val('X', 'р')}."
                                    _TEMPLATING_ID="64" _alias="Z1_omitted" priority="2">
                                <Expression>
                                    <LogicalAnd>
                                        <CheckClass>
                                            <Variable name="checked"/>
                                            <Class name="token"/>
                                        </CheckClass>
                                        <LogicalAnd>
                                            <CheckClass>
                                                <GetByRelationship relationshipName="belongsTo">
                                                    <Variable name="checked"/>
                                                </GetByRelationship>
                                                <Class name="operator"/>
                                            </CheckClass>
                                            <Compare operator="Equal">
                                                <GetPropertyValue propertyName="state">
                                                    <GetByRelationship relationshipName="belongsTo">
                                                        <Variable name="checked"/>
                                                    </GetByRelationship>
                                                </GetPropertyValue>
                                                <Enum owner="state" value="omitted"/>
                                            </Compare>
                                        </LogicalAnd>
                                    </LogicalAnd>
                                </Expression>
                            </FindError>
                            <FindError
                                    _EN_explanation="That's incorrect - ${obj(checked, 'Nom')} is already evaluated and now serves as just an operand, and therefore cannot prevent the evaluation of ${val('X', 'Gen')}."
                                    _RU_explanation="Это неверно - ${obj(checked, 'Nom')} уже вычислен и по сути является операндом, а значит не может помешать вычислению ${val('X', 'Gen')}."
                                    _TEMPLATING_ID="65" _alias="Z1_evaluated" priority="3">
                                <Expression>
                                    <LogicalAnd>
                                        <CheckClass>
                                            <Variable name="checked"/>
                                            <Class name="token"/>
                                        </CheckClass>
                                        <LogicalAnd>
                                            <CheckClass>
                                                <GetByRelationship relationshipName="belongsTo">
                                                    <Variable name="checked"/>
                                                </GetByRelationship>
                                                <Class name="operator"/>
                                            </CheckClass>
                                            <Compare operator="NotEqual">
                                                <GetPropertyValue propertyName="state">
                                                    <GetByRelationship relationshipName="belongsTo">
                                                        <Variable name="checked"/>
                                                    </GetByRelationship>
                                                </GetPropertyValue>
                                                <Enum owner="state" value="unevaluated"/>
                                            </Compare>
                                        </LogicalAnd>
                                    </LogicalAnd>
                                </Expression>
                            </FindError>
                            <FindError
                                    _EN_explanation="That might be true, but there is a fitting operator closer to the ${val('X', 'Gen')} than ${obj(checked, 'Nom')} and it should be considered first."
                                    _RU_explanation="Это неверно, ${obj(checked, 'Nom')} слишком далеко от ${val('X', 'Gen')} чтобы помешать ему."
                                    _TEMPLATING_ID="66" _alias="Z1_tooFar" priority="4">
                                <Expression>
                                    <LogicalAnd>
                                        <LogicalAnd>
                                            <CheckClass>
                                                <Variable name="checked"/>
                                                <Class name="token"/>
                                            </CheckClass>
                                            <CheckClass>
                                                <GetByRelationship relationshipName="belongsTo">
                                                    <Variable name="checked"/>
                                                </GetByRelationship>
                                                <Class name="operator"/>
                                            </CheckClass>
                                        </LogicalAnd>
                                        <CheckRelationship relationshipName="isBetween">
                                            <DecisionTreeVar name="Z1"/>
                                            <DecisionTreeVar name="X"/>
                                            <Variable name="checked"/>
                                        </CheckRelationship>
                                    </LogicalAnd>
                                </Expression>
                            </FindError>
                            <AdditionalVarDecl name="Z" type="operator">
                                <Expression>
                                    <Cast>
                                        <GetByRelationship relationshipName="belongsTo">
                                            <DecisionTreeVar name="Z1"/>
                                        </GetByRelationship>
                                        <Class name="operator"/>
                                    </Cast>
                                </Expression>
                            </AdditionalVarDecl>
                            <Outcome
                                    _EN_explanation="there are no unevaluated operators to the right of ${val('X','р')}"
                                    _EN_nextStepExplanation="That's incorrect. If the expression to the right of the ${val('X','р')} is already evaluated, then the right operand of ${val('X','р')} is fully evaluated. Therefore, it is not preventing its further evaluation."
                                    _EN_nextStepQuestion="What is the next reasoning step if we know that there are only evaluated operators to the right of ${val('X','р')}?"
                                    _RU_explanation="справа от ${val('X','р')} нет потенциально мешающих операторов"
                                    _RU_nextStepExplanation="Это неверно. Если все выражение справа от ${val('X','р')} вычислено, значит и его правый операнд вычислен и не мешает вычислению ${val('X','р')}."
                                    _RU_nextStepQuestion="Какие выводы можно сделать, если справа от ${val('X','р')} находятся только вычисленные операторы?"
                                    _TEMPLATING_ID="67" value="false">
                                <BranchResultNode
                                        _EN_explanation="All operators to the right of it have been already evaluated."
                                        _RU_explanation="Все операторы справа от него уже вычислены."
                                        _TEMPLATING_ID="68" value="CORRECT"/>
                            </Outcome>
                            <Outcome
                                    _EN_explanation="there is a potentially blocking operator to the right of ${val('X','р')} - it's ${val('Z','и')}"
                                    _EN_nextStepBranchResult="The one on the ${branchResult ? 'left' : 'right'} is always evaluated first"
                                    _EN_nextStepExplanation="That's incorrect. One should first determine if parentheses have any effect on the precedence of the two operators."
                                    _EN_nextStepQuestion="How should one determine the order of evaluation between two operators?"
                                    _RU_explanation="справа от ${val('X','р')} есть потенциально мешающий оператор - это ${val('Z','и')}"
                                    _RU_nextStepBranchResult="${branchResult ? 'Левый' : 'Правый'} оператор всегда выполняется первым"
                                    _RU_nextStepExplanation="Это неверно. Определение порядка вычислений двух операторов надо начинать с рассмотрения влияния скобок на их приоритет."
                                    _RU_nextStepQuestion="Как определяется порядок вычисления двух конкурирующих операторов?"
                                    _TEMPLATING_ID="69" value="true">
                                <QuestionNode
                                        _EN_asNextStep="We should check if ${val('X','и')} is between ${val('Z1', 'и')} and ${val('Z2', 'и')}"
                                        _EN_endingCause="Because ${val('X','и')} is between ${val('Z1', 'и')} and ${val('Z2', 'и')}"
                                        _EN_question="Is ${val('X','и')} between ${val('Z1', 'и')} and ${val('Z2', 'и')}?"
                                        _RU_asNextStep="Необходимо проверить, находится ли ${val('X','и')} между ${val('Z1','р')} и между ${val('Z2','р')}"
                                        _RU_endingCause="Потому что ${val('X','и')} находится между ${val('Z1','р')} и между ${val('Z2','р')}"
                                        _RU_question="Верно ли, что ${val('X','и')} находится между ${val('Z1','р')} и между ${val('Z2','р')}?"
                                        _TEMPLATING_ID="70" _alias="right.predetermining.1.isXinZ">
                                    <Expression>
                                        <ExistenceQuantifier type="token" varName="z2">
                                            <LogicalAnd>
                                                <LogicalAnd>
                                                    <CheckClass>
                                                        <Variable name="z2"/>
                                                        <Class name="token"/>
                                                    </CheckClass>
                                                    <CheckRelationship relationshipName="belongsTo">
                                                        <Variable name="z2"/>
                                                        <DecisionTreeVar name="Z"/>
                                                    </CheckRelationship>
                                                </LogicalAnd>
                                                <Compare operator="NotEqual">
                                                    <Variable name="z2"/>
                                                    <DecisionTreeVar name="Z1"/>
                                                </Compare>
                                            </LogicalAnd>
                                            <CheckRelationship relationshipName="isBetween">
                                                <DecisionTreeVar name="X"/>
                                                <DecisionTreeVar name="Z1"/>
                                                <Variable name="z2"/>
                                            </CheckRelationship>
                                        </ExistenceQuantifier>
                                    </Expression>
                                    <Outcome _EN_nextStepExplanation="That's incorrect."
                                             _EN_nextStepQuestion="What can we now conclude?"
                                             _RU_nextStepExplanation="Это неверно."
                                             _RU_nextStepQuestion="Какие выводы можно сделать на данном этапе?"
                                             _TEMPLATING_ID="71" value="true">
                                        <BranchResultNode
                                                _EN_explanation="it is enclosed in the ${val('Y','и')}, which is closest to it from the right"
                                                _RU_explanation="он заключен в ближайший оператор справа к нему ${val('Y','и')}"
                                                _TEMPLATING_ID="72" _skill="right_operator_enclosed" value="CORRECT"/>
                                    </Outcome>
                                    <Outcome _EN_nextStepExplanation="That's incorrect."
                                             _EN_nextStepQuestion="What can we now conclude?"
                                             _RU_nextStepExplanation="Это неверно."
                                             _RU_nextStepQuestion="Какие выводы можно сделать на данном этапе?"
                                             _TEMPLATING_ID="73" value="false">
                                        <BranchAggregationNode
                                                _EN_asNextStep="We should check if parentheses have any effect on the precedence of the two operators."
                                                _EN_endingCause="Because of the effect of the parentheses"
                                                _EN_question="How do parentheses affect the evaluation of ${val('X','т')} and ${val('Z','т')}?"
                                                _RU_asNextStep="Необходимо рассмотреть влияние скобок на взаимодействие между ${val('X','т')} и ${val('Z','т')}."
                                                _RU_endingCause="Из-за роли скобок в выражении"
                                                _RU_question="Как скобки влияют на взаимодействие между ${val('X','т')} и ${val('Z','т')}?"
                                                _TEMPLATING_ID="74" _alias="right.predetermining" operator="MUTEX">
                                            <ThoughtBranch
                                                    _EN_description="${result ? '${val('X','и')} is inside of parenthesis, and ${val('Z','и')} is ouside of them' : 'there are no parenthesis that enclose ${val('X','и')} but not ${val('Z','в')}'}"
                                                    _RU_description="${result ? '${val('X','и')} находится в скобках, а ${val('Z','и')} - за их пределами' : 'не существует скобок, окружающих ${val('X','и')}, но не окружающих ${val('Z','в')}'}"
                                                    _TEMPLATING_ID="75" _alias="right.predetermining.2">
                                                <QuestionNode
                                                        _RU_asNextStep="Необходимо проверить, существуют ли скобки, окружающие ${val('X','и')}, но не ${val('Z','и')}"
                                                        _RU_endingCause="Потому что существуют скобки, окружающие ${val('X','и')}, но не ${val('Z','и')}"
                                                        _RU_question="Существуют ли скобки, окружающие ${val('X','и')}, но не ${val('Z','и')}?"
                                                        _TEMPLATING_ID="76"
                                                        _alias="right.predetermining.2.isXinParenthesis">
                                                    <Expression>
                                                        <ExistenceQuantifier type="parenthesis" varName="p">
                                                            <CheckClass>
                                                                <Variable name="p"/>
                                                                <Class name="parenthesis"/>
                                                            </CheckClass>
                                                            <ExistenceQuantifier type="token" varName="p1">
                                                                <CheckRelationship relationshipName="belongsTo">
                                                                    <Variable name="p1"/>
                                                                    <Variable name="p"/>
                                                                </CheckRelationship>
                                                                <ExistenceQuantifier type="token" varName="p2">
                                                                    <CheckRelationship relationshipName="belongsTo">
                                                                        <Variable name="p2"/>
                                                                        <Variable name="p"/>
                                                                    </CheckRelationship>
                                                                    <LogicalAnd>
                                                                        <CheckRelationship relationshipName="isBetween">
                                                                            <DecisionTreeVar name="X"/>
                                                                            <Variable name="p1"/>
                                                                            <Variable name="p2"/>
                                                                        </CheckRelationship>
                                                                        <LogicalNot>
                                                                            <CheckRelationship
                                                                                    relationshipName="isBetween">
                                                                                <DecisionTreeVar name="Z"/>
                                                                                <Variable name="p1"/>
                                                                                <Variable name="p2"/>
                                                                            </CheckRelationship>
                                                                        </LogicalNot>
                                                                    </LogicalAnd>
                                                                </ExistenceQuantifier>
                                                            </ExistenceQuantifier>
                                                        </ExistenceQuantifier>
                                                    </Expression>
                                                    <Outcome value="false">
                                                        <BranchResultNode value="NULL"/>
                                                    </Outcome>
                                                    <Outcome value="true">
                                                        <BranchResultNode value="CORRECT"/>
                                                    </Outcome>
                                                </QuestionNode>
                                            </ThoughtBranch>
                                            <ThoughtBranch
                                                    _EN_description="${result ? '${val('Z','и')} is inside of parenthesis, and ${val('X','и')} is ouside of them' : 'there are no parenthesis that enclose ${val('Z','и')} but not ${val('X','в')}'}"
                                                    _RU_description="${result ? '${val('Z','и')} находится в скобках, а ${val('X','и')} - за их пределами' : 'не существует скобок, окружающих ${val('Z','и')}, но не окружающих ${val('X','в')}'}"
                                                    _TEMPLATING_ID="77" _alias="right.predetermining.3">
                                                <QuestionNode
                                                        _RU_asNextStep="Необходимо проверить, существуют ли скобки, окружающие ${val('Z','и')}, но не ${val('X','в')}"
                                                        _RU_endingCause="Потому что существуют скобки, окружающие ${val('Z','и')}, но не ${val('X','в')}"
                                                        _RU_question="Существуют ли скобки, окружающие ${val('Z','и')}, но не ${val('X','в')}?"
                                                        _TEMPLATING_ID="78"
                                                        _alias="right.predetermining.3.isZinParenthesis">
                                                    <Expression>
                                                        <ExistenceQuantifier type="parenthesis" varName="p">
                                                            <CheckClass>
                                                                <Variable name="p"/>
                                                                <Class name="parenthesis"/>
                                                            </CheckClass>
                                                            <ExistenceQuantifier type="token" varName="p1">
                                                                <CheckRelationship relationshipName="belongsTo">
                                                                    <Variable name="p1"/>
                                                                    <Variable name="p"/>
                                                                </CheckRelationship>
                                                                <ExistenceQuantifier type="token" varName="p2">
                                                                    <CheckRelationship relationshipName="belongsTo">
                                                                        <Variable name="p2"/>
                                                                        <Variable name="p"/>
                                                                    </CheckRelationship>
                                                                    <LogicalAnd>
                                                                        <CheckRelationship relationshipName="isBetween">
                                                                            <DecisionTreeVar name="Z"/>
                                                                            <Variable name="p1"/>
                                                                            <Variable name="p2"/>
                                                                        </CheckRelationship>
                                                                        <LogicalNot>
                                                                            <CheckRelationship
                                                                                    relationshipName="isBetween">
                                                                                <DecisionTreeVar name="X"/>
                                                                                <Variable name="p1"/>
                                                                                <Variable name="p2"/>
                                                                            </CheckRelationship>
                                                                        </LogicalNot>
                                                                    </LogicalAnd>
                                                                </ExistenceQuantifier>
                                                            </ExistenceQuantifier>
                                                        </ExistenceQuantifier>
                                                    </Expression>
                                                    <Outcome value="false">
                                                        <BranchResultNode value="NULL"/>
                                                    </Outcome>
                                                    <Outcome value="true">
                                                        <BranchResultNode value="ERROR"/>
                                                    </Outcome>
                                                </QuestionNode>
                                            </ThoughtBranch>
                                            <Outcome
                                                    _EN_explanation="parentheses do ${result ? 'not' : ''} affect the evaluation of ${val('X','т')} and ${val('Z','т')}"
                                                    _EN_nextStepBranchResult="The operator on the ${branchResult ? 'right' : 'left'} is always evaluated first."
                                                    _EN_nextStepExplanation="That's incorrect. In the absence of parentheses' effect, the order of evaluation is determined by the precedence of the operators - so it should be considered next."
                                                    _EN_nextStepQuestion="In the absence of parentheses' effect, how should one determine the order of evaluation between two operator?"
                                                    _EN_text="They don't - parentheses have no effect on ${val('X','т')} and ${val('Z','т')}"
                                                    _RU_explanation="${result ? 'скобки не влияют на порядок вычисления ${val('X','р')} и ${val('Z','р')}' : 'скобки имеют влияние на порядок вычисления ${val('X','р')} и ${val('Z','р')}'}"
                                                    _RU_nextStepBranchResult="${branchResult ? 'Левый' : 'Правый'} оператор всегда выполняется первым"
                                                    _RU_nextStepExplanation="Это неверно. В отсутствии скобок, порядок выполнения стоящих рядом операторов определяется их приоритетом - его и надо рассматривать следующим."
                                                    _RU_nextStepQuestion="В отсутствии влияния скобок, как определяется порядок выполнения стоящих рядом операторов?"
                                                    _RU_text="Никак - скобки не влияют на порядок вычисления ${val('X','р')} и ${val('Z','р')}"
                                                    _TEMPLATING_ID="79" value="NULL">
                                                <QuestionNode
                                                        _EN_asNextStep="We should compare the precendence of ${class('X','р')} and ${class('Z','р')}."
                                                        _EN_endingCause="Because of the precendences of ${class('X','р')} and ${class('Z','р')}."
                                                        _EN_question="Compare the precendence of ${class('X','р')} and ${class('Z','р')}."
                                                        _EN_triviality="Precendences of ${val('X','р')} and ${val('Z','р')} are obviously equal as they are the same operator."
                                                        _RU_asNextStep="Необходимо сравнить приоритеты ${class('X','р')} и ${class('Z','р')}"
                                                        _RU_endingCause="Из-за соотношения приоритетов ${class('X','р')} и ${class('Z','р')}"
                                                        _RU_question="Сравните приоритеты ${class('X','р')} и ${class('Z','р')}"
                                                        _RU_triviality="Приоритеты ${val('X','р')} и ${val('Z','р')} очевидно равны, так как это один и тот же оператор."
                                                        _TEMPLATING_ID="80" _alias="right.precedence">
                                                    <Triviality>
                                                        <Compare operator="Equal">
                                                            <GetClass>
                                                                <DecisionTreeVar name="X"/>
                                                            </GetClass>
                                                            <GetClass>
                                                                <DecisionTreeVar name="Z"/>
                                                            </GetClass>
                                                        </Compare>
                                                    </Triviality>
                                                    <Expression>
                                                        <Compare>
                                                            <GetPropertyValue propertyName="precedence">
                                                                <DecisionTreeVar name="X"/>
                                                            </GetPropertyValue>
                                                            <GetPropertyValue propertyName="precedence">
                                                                <DecisionTreeVar name="Z"/>
                                                            </GetPropertyValue>
                                                        </Compare>
                                                    </Expression>
                                                    <Outcome
                                                            _EN_explanation="That's incorrect, because ${class('X','р')} has higher precendence than ${class('Z','р')}."
                                                            _EN_nextStepBranchResult="Operator with a ${branchResult ? 'higher' : 'lower'} precedence is always evaluated first"
                                                            _EN_nextStepExplanation="That's incorrect. The operator with a higher precedence is always evaluated first. Therefore, in this case, the ${val('X','и')} should be evaluated first, and we can conclude that its left operand does not prevent its evaluation."
                                                            _EN_nextStepQuestion="How should one determine the order of evaluation between two operators that have different precedences?"
                                                            _EN_text="${class('X','р')} has higher precendence."
                                                            _RU_explanation="Это неверно, поскольку ${class('X','и')} имеет больший приоритет, чем ${class('Z','и')}."
                                                            _RU_nextStepBranchResult="Оператор с ${branchResult ? 'большим' : 'меньшим'} приоритетом всегда выполняется первым"
                                                            _RU_nextStepExplanation="Это неверно. Оператор с большим приоритетом всегда выполняется первым. Т.к. ${class('X','и')} имеет больший приоритет, а значит может быть вычислен первым. Получается, правый операнд ${val('X','и')} не требует дальнейших вычислений."
                                                            _RU_nextStepQuestion="Как определяется порядок выполнения операторов, имеющих разные приоритеты?"
                                                            _RU_text="Приоритет ${class('X','р')} больше."
                                                            _TEMPLATING_ID="81" value="Comparison:less">
                                                        <BranchResultNode
                                                                _EN_explanation="it has a higher priority than ${val('Y','в')}."
                                                                _RU_explanation="он имеет приоритет выше, чем ${val('Y','в')}."
                                                                _TEMPLATING_ID="82"
                                                                _skill="left_competing_to_right_precedence"
                                                                value="CORRECT"/>
                                                    </Outcome>
                                                    <Outcome
                                                            _EN_explanation="That's incorrect, because ${class('Z','р')} has higher precendence than ${class('X','р')}."
                                                            _EN_nextStepBranchResult="Operator with a ${branchResult ? 'lower' : 'higher'} precedence is always evaluated first"
                                                            _EN_nextStepExplanation="That's incorrect. The operator with a higher precedence is always evaluated first. Therefore, in this case, the ${val('Z','и')} should be evaluated first, and we can conclude that the left operand of ${val('X','и')} does prevent its evaluation."
                                                            _EN_nextStepQuestion="How should one determine the order of evaluation between two operators that have different precedences?"
                                                            _EN_text="${class('Z','р')} has higher precendence."
                                                            _RU_explanation="Это неверно, поскольку ${class('Z','и')} имеет больший приоритет, чем ${class('X','и')}."
                                                            _RU_nextStepBranchResult="Оператор с ${branchResult ? 'меньшим' : 'большим'} приоритетом всегда выполняется первым"
                                                            _RU_nextStepExplanation="Это неверно. Оператор с большим приоритетом всегда выполняется первым. Т.к. ${class('Z','и')} имеет больший приоритет, он должен быть вычислен первым. Получается, правый операнд ${val('X','и')} требует дальнейших вычислений."
                                                            _RU_nextStepQuestion="Как определяется порядок выполнения операторов, имеющих разные приоритеты?"
                                                            _RU_text="Приоритет ${class('Z','р')} больше."
                                                            _TEMPLATING_ID="83" value="Comparison:greater">
                                                        <BranchResultNode
                                                                _EN_explanation="${val('Y','и')} on its right must be evaluated first because it has a higher precedence."
                                                                _RU_explanation="сначала должен быть вычислен ${val('Y','и')} справа от него, который имеет более высокий приоритет."
                                                                _TEMPLATING_ID="84" _error="right.precedence"
                                                                _law="error_base_higher_precedence_right"
                                                                _skill="left_competing_to_right_precedence"
                                                                value="ERROR"/>
                                                    </Outcome>
                                                    <Outcome
                                                            _EN_explanation="That's incorrect because ${class('X','р')} and ${class('Z','р')} have the same precedence."
                                                            _EN_nextStepBranchResult="The operator on the ${branchResult ? 'right' : 'left'} is always evaluated first."
                                                            _EN_nextStepExplanation="That's incorrect. The order of evaluation between two operators that have the same precedence is determined by their associativity. Therefore we should next check the associativity of ${class('X','р')} and ${class('Z','р')}."
                                                            _EN_nextStepQuestion="How should one determine the order of evaluation between two operators that have the same precedence?"
                                                            _EN_text="They have the same precedence."
                                                            _RU_explanation="Это неверно, поскольку приоритеты ${class('X','р')} и ${class('Z','р')} одинаковы."
                                                            _RU_nextStepBranchResult="${branchResult ? 'Левый' : 'Правый'} оператор всегда выполняется первым"
                                                            _RU_nextStepExplanation="Это неверно. Порядок выполнения операторов, имеющих одинаковые приоритеты, задается ассоциативностью, а значит следующим шагом необходимо проверить ассоциативность ${class('X','р')} и ${class('Z','р')}."
                                                            _RU_nextStepQuestion="Как определяется порядок выполнения операторов, имеющих равные приоритеты?"
                                                            _RU_text="Их приоритеты одинаковы." _TEMPLATING_ID="85"
                                                            value="Comparison:equal">
                                                        <QuestionNode
                                                                _EN_asNextStep="We should check if ${val('X','д')} needs a left operand."
                                                                _EN_endingCause="Because ${val('X','и')} doesn't need a left operand."
                                                                _EN_question="Does ${class('X','д')} need a left operand?"
                                                                _RU_asNextStep="Необходимо проверить, нужен ли ${val('X','д')} левый операнд."
                                                                _RU_endingCause="Потому что ${val('X','и')} не требует левого операнда"
                                                                _RU_question="Нужен ли ${class('X','д')} левый операнд?"
                                                                _TEMPLATING_ID="86" _alias="leftOperandAssoc.isNeeded">
                                                            <Expression>
                                                                <GetPropertyValue propertyName="needsOperand">
                                                                    <DecisionTreeVar name="X"/>
                                                                    <ParamsValues type="ordered">
                                                                        <Enum owner="OperandPlacement" value="left"/>
                                                                    </ParamsValues>
                                                                </GetPropertyValue>
                                                            </Expression>
                                                            <Outcome
                                                                    _EN_explanation="That's incorrect, because ${class('X','и')} doesn't need a left operand."
                                                                    _EN_nextStepExplanation="That's incorrect. If it doesn't need a left operand, then the left operand can't prevent its further evaluation."
                                                                    _EN_nextStepQuestion="What is the next reasoning step if we know that ${class('X','и')} doesn't need a left operand?"
                                                                    _RU_explanation="Это неверно. ${class('X','и')} не имеет (не требует) левого операнда."
                                                                    _RU_nextStepExplanation="Это неверно. Если оператор не имеет левого операнда, то и дальнейших вычислений его левый операнд требовать не может."
                                                                    _RU_nextStepQuestion="Какие выводы можно сделать, если ${val('X','и')} не требует левого операнда?"
                                                                    _TEMPLATING_ID="87" value="false">
                                                                <BranchResultNode
                                                                        _EN_explanation=" ${val('Y','и')} on its right must be evaluated first - these operators have the same precedence, but are evaluated from right to left (have right associativity)."
                                                                        _RU_explanation="сначала должен быть вычислен ${val('Y','и')} справа от него: эти операторы имеют одинаковый приоритет, и вычисляются справа налево (правоассоциативны)."
                                                                        _TEMPLATING_ID="88"
                                                                        _skill="associativity_without_left_opposing_operand"
                                                                        value="ERROR"/>
                                                            </Outcome>
                                                            <Outcome
                                                                    _EN_explanation="That's incorrect, because ${class('X','и')} does require a left operand."
                                                                    _EN_nextStepExplanation="That's incorrect. From here, one should check if there are any operators that should still be evaluated in the left operand, and then reason based on that."
                                                                    _EN_nextStepQuestion="What is the next reasoning step if we know that ${class('X','и')} needs a left operand?"
                                                                    _RU_explanation="Это неверно. ${class('X','д')} всегда необходим левый операнд."
                                                                    _RU_nextStepExplanation="Это неверно. Необходимо дальше рассмотреть потенциально конкурирующие с ${val('X','т')} операторы, и делать выводы исходя из их наличия/отсуствия."
                                                                    _RU_nextStepQuestion="Какие выводы можно сделать, если ${val('X','д')} нужен левый операнд?"
                                                                    _TEMPLATING_ID="89" value="true">
                                                                <QuestionNode
                                                                        _EN_asNextStep="We should determine the associativity of ${class('X','р')} and ${class('Z','р')}"
                                                                        _EN_endingCause="Because of the associatity of ${class('X','р')} and ${class('Z','р')}"
                                                                        _EN_question="What's the associativity of ${class('X','р')} and ${class('Z','р')}?"
                                                                        _RU_asNextStep="Необходимо проверить, какова ассоциативность ${class('X','р')} и ${class('Z','р')}"
                                                                        _RU_endingCause="Из-за ассоциативности ${class('X','р')} и ${class('Z','р')}"
                                                                        _RU_question="Какова ассоциативность ${class('X','р')} и ${class('Z','р')}?"
                                                                        _TEMPLATING_ID="90"
                                                                        _alias="right.associativity">
                                                                    <Expression>
                                                                        <GetPropertyValue propertyName="associativity">
                                                                            <DecisionTreeVar name="Z"/>
                                                                        </GetPropertyValue>
                                                                    </Expression>
                                                                    <Outcome
                                                                            _EN_explanation="That's incorrect, because ${class('X','р')} and ${class('Z','р')} have right associativity."
                                                                            _EN_nextStepBranchResult="The one on the ${branchResult ? 'left' : 'right'}"
                                                                            _EN_nextStepExplanation="That's incorrect. Operators that have right associativity evaluate from right to left. Therefore, in this case, ${class('Z','и')} should be evaluated first, and we can conclude that the right operand of ${val('X','и')} does prevent its evaluation."
                                                                            _EN_nextStepQuestion="Which of the two nearby operators evaluates first if they have right associativity?"
                                                                            _EN_text="right"
                                                                            _RU_explanation="Это неверно, поскольку ${class('X','и')} и ${class('Z','и')} имеют правую ассоциативность."
                                                                            _RU_nextStepBranchResult="${branchResult ? 'Левый' : 'Правый'}"
                                                                            _RU_nextStepExplanation="Это неверно. При правой ассоциативности операторы выполняются справа налево. В данном случае это значит, ${class('Z','и')} должен быть вычислен первым. Получается, правый операнд ${val('X','и')} требует дальнейших вычислений."
                                                                            _RU_nextStepQuestion="Какой из двух рядом стоящих операторов выполнится первым, если операторы имеют правую ассоциативность?"
                                                                            _RU_text="правая" _TEMPLATING_ID="91"
                                                                            value="associativity:right">
                                                                        <BranchResultNode
                                                                                _EN_explanation=" ${val('Y','и')} on its right must be evaluated first - these operators have the same precedence, but are evaluated from right to left (have right associativity)."
                                                                                _RU_explanation="сначала должен быть вычислен ${val('Y','и')} справа от него: эти операторы имеют одинаковый приоритет, и вычисляются справа налево (правоассоциативны)."
                                                                                _TEMPLATING_ID="92"
                                                                                _error="right.associativity"
                                                                                _law="error_base_same_precedence_right_associativity_right"
                                                                                _skill="left_competing_to_right_associativity"
                                                                                value="ERROR"/>
                                                                    </Outcome>
                                                                    <Outcome
                                                                            _EN_explanation="That's incorrect, because ${class('X','р')} and ${class('Z','р')} have left associativity."
                                                                            _EN_nextStepBranchResult="The one on the ${branchResult ? 'left' : 'right'}"
                                                                            _EN_nextStepExplanation="That's incorrect. Operators that have left associativity evaluate from left to right. Therefore, in this case, ${class('X','и')} should be evaluated first, anand we can conclude that its left operand does not prevent its evaluation."
                                                                            _EN_nextStepQuestion="Which of the two nearby operators evaluates first if they have left associativity?"
                                                                            _EN_text="left"
                                                                            _RU_explanation="Это неверно, поскольку ${class('X','и')} и ${class('Z','и')} имеют правую ассоциативность."
                                                                            _RU_nextStepBranchResult="${branchResult ? 'Правый' : 'Левый'}"
                                                                            _RU_nextStepExplanation="Это неверно. При левой ассоциативности операторы выполняются слева направо. В данном случае это значит, ${class('X','и')} должен быть вычислен первым. Получается, правый операнд ${val('X','и')} не требует дальнейших вычислений."
                                                                            _RU_nextStepQuestion="Какой из двух рядом стоящих операторов выполнится первым, если операторы имеют правую ассоциативность?"
                                                                            _RU_text="правая" _TEMPLATING_ID="93"
                                                                            value="associativity:left">
                                                                        <BranchResultNode
                                                                                _EN_explanation="it has the same precedence as ${val('Y','р')} and left associativity."
                                                                                _RU_explanation=" имеет одинаковый приоритет с ${val('Y','р')} и левую ассоциативность (вычисляются слева направо) ."
                                                                                _TEMPLATING_ID="94"
                                                                                _skill="left_competing_to_right_associativity"
                                                                                value="CORRECT"/>
                                                                    </Outcome>
                                                                </QuestionNode>
                                                            </Outcome>
                                                        </QuestionNode>
                                                    </Outcome>
                                                </QuestionNode>
                                            </Outcome>
                                        </BranchAggregationNode>
                                    </Outcome>
                                </QuestionNode>
                            </Outcome>
                        </FindActionNode>
                    </Outcome>
                </QuestionNode>
            </ThoughtBranch>
            <Outcome value="CORRECT">
                <BranchResultNode value="CORRECT">
                    <Expression>
                        <Block>
                            <IfThen>
                                <GetPropertyValue propertyName="needsOperand">
                                    <DecisionTreeVar name="X"/>
                                    <ParamsValues type="ordered">
                                        <Enum owner="OperandPlacement" value="center"/>
                                    </ParamsValues>
                                </GetPropertyValue>
                                <ForAllQuantifier type="operand" varName="c">
                                    <LogicalAnd>
                                        <LogicalAnd>
                                            <CheckClass>
                                                <Variable name="c"/>
                                                <Class name="operand"/>
                                            </CheckClass>
                                            <CheckRelationship relationshipName="isBetween">
                                                <Variable name="c"/>
                                                <DecisionTreeVar name="X1"/>
                                                <GetByCondition type="token" varName="x2">
                                                    <LogicalAnd>
                                                        <LogicalAnd>
                                                            <CheckClass>
                                                                <Variable name="x2"/>
                                                                <Class name="token"/>
                                                            </CheckClass>
                                                            <CheckRelationship relationshipName="belongsTo">
                                                                <Variable name="x2"/>
                                                                <DecisionTreeVar name="X"/>
                                                            </CheckRelationship>
                                                        </LogicalAnd>
                                                        <CheckRelationship relationshipName="rightOf">
                                                            <Variable name="x2"/>
                                                            <DecisionTreeVar name="X1"/>
                                                        </CheckRelationship>
                                                    </LogicalAnd>
                                                </GetByCondition>
                                            </CheckRelationship>
                                        </LogicalAnd>
                                        <Compare operator="Equal">
                                            <GetPropertyValue propertyName="state">
                                                <Variable name="c"/>
                                            </GetPropertyValue>
                                            <Enum owner="state" value="evaluated"/>
                                        </Compare>
                                    </LogicalAnd>
                                    <Block>
                                        <AddRelationshipLink relationshipName="isOperandOf">
                                            <Variable name="c"/>
                                            <ParamsValues type="ordered">
                                                <Enum owner="OperandPlacement" value="center"/>
                                            </ParamsValues>
                                            <DecisionTreeVar name="X"/>
                                        </AddRelationshipLink>
                                        <AssignToProperty propertyName="state">
                                            <Variable name="c"/>
                                            <Enum owner="state" value="used"/>
                                        </AssignToProperty>
                                    </Block>
                                </ForAllQuantifier>
                            </IfThen>
                            <IfThen>
                                <GetPropertyValue propertyName="needsOperand">
                                    <DecisionTreeVar name="X"/>
                                    <ParamsValues type="ordered">
                                        <Enum owner="OperandPlacement" value="left"/>
                                    </ParamsValues>
                                </GetPropertyValue>
                                <ForAllQuantifier type="operand" varName="a_">
                                    <Compare operator="Equal">
                                        <Variable name="a_"/>
                                        <GetExtreme extremeVarName="a_ex" type="operand" varName="a">
                                            <LogicalAnd>
                                                <LogicalAnd>
                                                    <CheckClass>
                                                        <Variable name="a"/>
                                                        <Class name="operand"/>
                                                    </CheckClass>
                                                    <Compare operator="Equal">
                                                        <GetPropertyValue propertyName="state">
                                                            <Variable name="a"/>
                                                        </GetPropertyValue>
                                                        <Enum owner="state" value="evaluated"/>
                                                    </Compare>
                                                </LogicalAnd>
                                                <CheckRelationship relationshipName="leftOf">
                                                    <Variable name="a"/>
                                                    <DecisionTreeVar name="X"/>
                                                </CheckRelationship>
                                            </LogicalAnd>
                                            <CheckRelationship relationshipName="isBetween">
                                                <Variable name="a_ex"/>
                                                <Variable name="a"/>
                                                <DecisionTreeVar name="X"/>
                                            </CheckRelationship>
                                        </GetExtreme>
                                    </Compare>
                                    <Block>
                                        <AddRelationshipLink relationshipName="isOperandOf">
                                            <Variable name="a_"/>
                                            <ParamsValues type="ordered">
                                                <Enum owner="OperandPlacement" value="left"/>
                                            </ParamsValues>
                                            <DecisionTreeVar name="X"/>
                                        </AddRelationshipLink>
                                        <AssignToProperty propertyName="state">
                                            <Variable name="a_"/>
                                            <Enum owner="state" value="used"/>
                                        </AssignToProperty>
                                    </Block>
                                </ForAllQuantifier>
                            </IfThen>
                            <IfThen>
                                <GetPropertyValue propertyName="needsOperand">
                                    <DecisionTreeVar name="X"/>
                                    <ParamsValues type="ordered">
                                        <Enum owner="OperandPlacement" value="right"/>
                                    </ParamsValues>
                                </GetPropertyValue>
                                <ForAllQuantifier type="operand" varName="b_">
                                    <Compare operator="Equal">
                                        <Variable name="b_"/>
                                        <GetExtreme extremeVarName="b_ex" type="operand" varName="b">
                                            <LogicalAnd>
                                                <LogicalAnd>
                                                    <CheckClass>
                                                        <Variable name="b"/>
                                                        <Class name="operand"/>
                                                    </CheckClass>
                                                    <Compare operator="Equal">
                                                        <GetPropertyValue propertyName="state">
                                                            <Variable name="b"/>
                                                        </GetPropertyValue>
                                                        <Enum owner="state" value="evaluated"/>
                                                    </Compare>
                                                </LogicalAnd>
                                                <CheckRelationship relationshipName="rightOf">
                                                    <Variable name="b"/>
                                                    <DecisionTreeVar name="X"/>
                                                </CheckRelationship>
                                            </LogicalAnd>
                                            <CheckRelationship relationshipName="isBetween">
                                                <Variable name="b_ex"/>
                                                <Variable name="b"/>
                                                <DecisionTreeVar name="X"/>
                                            </CheckRelationship>
                                        </GetExtreme>
                                    </Compare>
                                    <Block>
                                        <AddRelationshipLink relationshipName="isOperandOf">
                                            <Variable name="b_"/>
                                            <ParamsValues type="ordered">
                                                <Enum owner="OperandPlacement" value="right"/>
                                            </ParamsValues>
                                            <DecisionTreeVar name="X"/>
                                        </AddRelationshipLink>
                                        <AssignToProperty propertyName="state">
                                            <Variable name="b_"/>
                                            <Enum owner="state" value="used"/>
                                        </AssignToProperty>
                                    </Block>
                                </ForAllQuantifier>
                            </IfThen>
                            <AssignToProperty propertyName="state">
                                <DecisionTreeVar name="X"/>
                                <Enum owner="state" value="evaluated"/>
                            </AssignToProperty>
                            <IfThen>
                                <GetPropertyValue propertyName="isNot">
                                    <DecisionTreeVar name="X"/>
                                </GetPropertyValue>
                                <AssignToProperty propertyName="evaluatesTo">
                                    <DecisionTreeVar name="X"/>
                                    <LogicalNot>
                                        <GetPropertyValue propertyName="evaluatesTo">
                                            <GetByRelationship relationshipName="hasOperand">
                                                <DecisionTreeVar name="X"/>
                                            </GetByRelationship>
                                        </GetPropertyValue>
                                    </LogicalNot>
                                </AssignToProperty>
                            </IfThen>
                            <IfThen>
                                <GetPropertyValue propertyName="isAnd">
                                    <DecisionTreeVar name="X"/>
                                </GetPropertyValue>
                                <AssignToProperty propertyName="evaluatesTo">
                                    <DecisionTreeVar name="X"/>
                                    <ForAllQuantifier type="operand" varName="x_op">
                                        <CheckRelationship relationshipName="isOperandOf">
                                            <Variable name="x_op"/>
                                            <DecisionTreeVar name="X"/>
                                        </CheckRelationship>
                                        <GetPropertyValue propertyName="evaluatesTo">
                                            <Variable name="x_op"/>
                                        </GetPropertyValue>
                                    </ForAllQuantifier>
                                </AssignToProperty>
                            </IfThen>
                            <IfThen>
                                <GetPropertyValue propertyName="isOr">
                                    <DecisionTreeVar name="X"/>
                                </GetPropertyValue>
                                <AssignToProperty propertyName="evaluatesTo">
                                    <DecisionTreeVar name="X"/>
                                    <ExistenceQuantifier type="operand" varName="x_op">
                                        <CheckRelationship relationshipName="isOperandOf">
                                            <Variable name="x_op"/>
                                            <DecisionTreeVar name="X"/>
                                        </CheckRelationship>
                                        <GetPropertyValue propertyName="evaluatesTo">
                                            <Variable name="x_op"/>
                                        </GetPropertyValue>
                                    </ExistenceQuantifier>
                                </AssignToProperty>
                            </IfThen>
                            <IfThen>
                                <GetPropertyValue propertyName="isComma">
                                    <DecisionTreeVar name="X"/>
                                </GetPropertyValue>
                                <AssignToProperty propertyName="evaluatesTo">
                                    <DecisionTreeVar name="X"/>
                                    <GetPropertyValue propertyName="evaluatesTo">
                                        <GetByRelationship relationshipName="hasOperand">
                                            <DecisionTreeVar name="X"/>
                                            <ParamsValues type="ordered">
                                                <Enum owner="OperandPlacement" value="right"/>
                                            </ParamsValues>
                                        </GetByRelationship>
                                    </GetPropertyValue>
                                </AssignToProperty>
                            </IfThen>
                            <IfThen>
                                <GetPropertyValue propertyName="isTConditional">
                                    <DecisionTreeVar name="X"/>
                                </GetPropertyValue>
                                <AssignToProperty propertyName="evaluatesTo">
                                    <DecisionTreeVar name="X"/>
                                    <GetPropertyValue propertyName="evaluatesTo">
                                        <GetByCondition type="operand" varName="x_op">
                                            <LogicalAnd>
                                                <CheckRelationship relationshipName="hasOperand">
                                                    <DecisionTreeVar name="X"/>
                                                    <Variable name="x_op"/>
                                                </CheckRelationship>
                                                <Compare operator="Equal">
                                                    <GetPropertyValue propertyName="requiredFirstOperandValueToEvaluate">
                                                        <Cast>
                                                            <DecisionTreeVar name="X"/>
                                                            <Class name="StrictOrderOperator"/>
                                                        </Cast>
                                                        <ParamsValues type="ordered">
                                                            <GetRelationshipParamValue paramName="placement"
                                                                                       relationshipName="hasOperand">
                                                                <DecisionTreeVar name="X"/>
                                                                <Variable name="x_op"/>
                                                            </GetRelationshipParamValue>
                                                        </ParamsValues>
                                                    </GetPropertyValue>
                                                    <IfThen>
                                                        <GetPropertyValue propertyName="evaluatesTo">
                                                            <GetByRelationship relationshipName="hasOperand">
                                                                <DecisionTreeVar name="X"/>
                                                                <ParamsValues type="ordered">
                                                                    <GetPropertyValue
                                                                            propertyName="firstOperandPlacement">
                                                                        <Cast>
                                                                            <DecisionTreeVar name="X"/>
                                                                            <Class name="StrictOrderOperator"/>
                                                                        </Cast>
                                                                    </GetPropertyValue>
                                                                </ParamsValues>
                                                            </GetByRelationship>
                                                        </GetPropertyValue>
                                                        <Enum owner="ExpectedValue" value="true"/>
                                                        <Enum owner="ExpectedValue" value="false"/>
                                                    </IfThen>
                                                </Compare>
                                            </LogicalAnd>
                                        </GetByCondition>
                                    </GetPropertyValue>
                                </AssignToProperty>
                            </IfThen>
                        </Block>
                    </Expression>
                </BranchResultNode>
            </Outcome>
            <Outcome value="ERROR">
                <BranchResultNode value="ERROR"/>
            </Outcome>
        </BranchAggregationNode>
    </ThoughtBranch>
</DecisionTree>
