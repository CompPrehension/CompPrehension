expr_domain_dt.display_name=Expression evaluation order (DT)
expr_domain_dt.description=It teaches expression evaluation order using the primary task of choosing the next operator to be evaluated
expr_domain_dt.BASE_QUESTION_TEXT=<p>Press the operators in the expression in the order they are evaluated</p>
expr_domain_dt.AT_POS=at pos
expr_domain_dt.OPERATOR=operator
expr_domain_dt.OPERAND=operand
expr_domain_dt.PARENTHESIS=parenthesis
expr_domain_dt.BRACKETS=brackets 
expr_domain_dt.FUNC_CALL=call operator
expr_domain_dt.LITERAL=literal
expr_domain_dt.CALCULATED=was calculated
expr_domain_dt.HAS_VALUE=has value
expr_domain_dt.EVALUATES= evaluates 
expr_domain_dt.NOT_EVALUATES=will not be evaluated 
expr_domain_dt.WITH_VALUE=â€”
expr_domain_dt.HAS_VALUE_AND_EVALUATE_OTHER_PART=evaluates to ${evaluation_result} so the operator does not need to evaluate its right operand
expr_domain_dt.HAS_UNEVALUATED_OPERATOR=it's still unevaluated
expr_domain_dt.END_EVALUATION=end evaluation
expr_domain_dt.STUDENT_END_EVALUATION=everything is evaluated
expr_domain_dt.BEFORE_OPERATOR=before operator 
expr_domain_dt.AFTER_OPERATOR=after operator 
expr_domain_dt.LEFT_SUBOPERATOR= belongs to the left operand of operator 
expr_domain_dt.RIGHT_SUBOPERATOR= belongs to the right operand of operator 
expr_domain_dt.TO_LEFT_OPERAND= to its left operand
expr_domain_dt.TO_RIGHT_OPERAND= to its right operand
expr_domain_dt.AND_LEFT_OPERAND=and the left operand of operator 
expr_domain_dt.EVALUATES_BEFORE_RIGHT= evaluates before its right operand
expr_domain_dt.WHILE_OPERATOR= while operator 
expr_domain_dt.ENCLOSED_PARENTHESIS= enclosed by parenthesis that starts at pos 
expr_domain_dt.INSIDE_PARENTHESIS_FIRST=, all operators inside parenthesis evaluates before operators around parenthesis
expr_domain_dt.HAS_HIGHER_PRECEDENCE=has higher precedence
expr_domain_dt.THAN_OPERATOR=than operator
expr_domain_dt.HAS_LOWER_PRECEDENCE= has lower precedence
expr_domain_dt.LEFT_ASSOC_DESC=has left associativity and evaluates left to right
expr_domain_dt.SAME_PRECEDENCE_LEFT_ASSOC= has the same precedence and left associativity
expr_domain_dt.SAME_PRECEDENCE_RIGHT_ASSOC= has the same precedence and right associativity
expr_domain_dt.FUNC_ARGUMENTS_BEFORE_CALL=function arguments are evaluated before function call
expr_domain_dt.IN_PARENTHESIS_BEFORE=expression in parenthesis is evaluated before operators outside of them
expr_domain_dt.IN_COMPLEX_BEFORE=expression inside operator is evaluated before this operator
expr_domain_dt.LEFT_OPERAND=the left operand of the
expr_domain_dt.LEFT_OPERAND_FOR_OPERATOR=the left operand of the operator
expr_domain_dt.MUST_BEFORE_RIGHT=must be evaluated before its right operand
expr_domain_dt.UNKNOWN_ERROR=unknown error
expr_domain_dt.RIGHT_ASSOC_DESC=has right associativity and evaluates right to left
expr_domain_dt.SAME_PRECEDENCE_TEMPLATE=operators (.) and \1 have same precedence and
expr_domain_dt.OPERATOR_TEMPLATE=operator $1 has
expr_domain_dt.ERROR_PRECEDENCE_BEFORE_ASSOC=Wrong, precedence checked before associativity
expr_domain_dt.ERROR_PRECEDENCE_HIGHER1=Wrong, precedence of operator
expr_domain_dt.ERROR_PRECEDENCE_HIGHER2= is higher
expr_domain_dt.BECAUSE= because
expr_domain_dt.EVALUATES_BEFORE= should be evaluated before
expr_domain_dt.supplementary.first_OrderOperatorsSupplementary_TEXT=What prevents evaluation of operator ${operator} at pos ${pos} ?
expr_domain_dt.supplementary.first_OrderOperatorsSupplementary_select_reason_left_precedence=precedence of operator ${left_operator} at pos ${left_operator_pos}
expr_domain_dt.supplementary.first_OrderOperatorsSupplementary_select_reason_left_associativity=associativity of operator ${left_operator} at pos ${left_operator_pos}
expr_domain_dt.supplementary.first_OrderOperatorsSupplementary_select_reason_left_parenthesis=unevaluated parenthesis at pos ${left_parenthesis_pos}
expr_domain_dt.supplementary.first_OrderOperatorsSupplementary_select_reason_right_precedence=precedence of operator ${right_operator} at pos ${right_operator_pos}
expr_domain_dt.supplementary.first_OrderOperatorsSupplementary_select_reason_right_associativity=associativity of operator ${right_operator} at pos ${right_operator_pos}
expr_domain_dt.supplementary.first_OrderOperatorsSupplementary_select_reason_right_parenthesis=unevaluated parenthesis at pos ${right_parenthesis_pos}
expr_domain_dt.supplementary.select_highest_precedence_left_operator_TEXT=What operator has higher precedence?
expr_domain_dt.supplementary.select_highest_precedence_left_operator_select_highest_precedence_operator_left=operator ${left_operator}
expr_domain_dt.supplementary.select_highest_precedence_left_operator_select_highest_precedence_operator_operator=operator ${operator}
expr_domain_dt.supplementary.select_highest_precedence_left_operator_select_highest_precedence_operator_same=same precedence
expr_domain_dt.supplementary.select_highest_precedence_left_operator_select_highest_precedence_operator_right=operator ${right_operator}
expr_domain_dt.supplementary.select_precedence_or_associativity_left_influence_TEXT=What influences evaluation order at first?
expr_domain_dt.supplementary.select_precedence_or_associativity_left_influence_select_precedence_or_associativity_influence_precedence=precedence
expr_domain_dt.supplementary.select_precedence_or_associativity_left_influence_select_precedence_or_associativity_influence_associativity=associativity
expr_domain_dt.supplementary.error_select_highest_precedence_operator_left_TEXT=Wrong, precedence of operator ${left_operator} is higher than operator ${operator}, so operator ${left_operator} should be evaluated first and the operator ${left_operator} at pos ${left_operator_pos} will block the operator ${operator} at pos ${pos} until the operator ${left_operator} at pos ${left_operator_pos} is evaluated
expr_domain_dt.supplementary.correct_select_highest_precedence_operator_left_TEXT=Yes, precedence of operator ${left_operator} is higher than operator ${operator}, so operator ${left_operator} should be evaluated first and the operator ${left_operator} at pos ${left_operator_pos} will block the operator ${operator} at pos ${pos} until the operator ${left_operator} at pos ${left_operator_pos} is evaluated
expr_domain_dt.supplementary.error_select_highest_precedence_left_operator_TEXT=Wrong, precedence of operator ${operator} is higher than operator ${left_operator}, so operator ${operator} should be evaluated first and the operator ${operator} at pos ${pos} will block the operator ${left_operator} at pos ${left_operator_pos} until the operator ${operator} at pos ${pos} is evaluated
expr_domain_dt.supplementary.correct_select_highest_precedence_left_operator_TEXT=Yes, precedence of operator ${operator} is higher than operator ${left_operator}, so operator ${operator} should be evaluated first and the operator ${operator} at pos ${pos} will block the operator ${left_operator} at pos ${left_operator_pos} until the operator ${operator} at pos ${pos} is evaluated
expr_domain_dt.supplementary.error_select_highest_precedence_operator_right_TEXT=Wrong, precedence of operator ${right_operator} is higher than operator ${operator}, so operator ${right_operator} should be evaluated first and the operator ${right_operator} at pos ${right_operator_pos} will block the operator ${operator} at pos ${pos} until the operator ${right_operator} at pos ${right_operator_pos} is evaluated
expr_domain_dt.supplementary.correct_select_highest_precedence_operator_right_TEXT=Yes, precedence of operator ${right_operator} is higher than operator ${operator}, so operator ${right_operator} should be evaluated first and the operator ${right_operator} at pos ${right_operator_pos} will block the operator ${operator} at pos ${pos} until the operator ${right_operator} at pos ${right_operator_pos} is evaluated
expr_domain_dt.supplementary.error_select_highest_precedence_right_operator_TEXT=Wrong, precedence of operator ${operator} is higher than operator ${right_operator}, so operator ${operator} should be evaluated first and the operator ${operator} at pos ${pos} will block the operator ${right_operator} at pos ${right_operator_pos} until the operator ${operator} at pos ${pos} is evaluated
expr_domain_dt.supplementary.correct_select_highest_precedence_right_operator_TEXT=Yes, precedence of operator ${operator} is higher than operator ${right_operator}, so operator ${operator} should be evaluated first and the operator ${operator} at pos ${pos} will block the operator ${right_operator} at pos ${right_operator_pos} until the operator ${operator} at pos ${pos} is evaluated
expr_domain_dt.supplementary.error_select_precedence_or_associativity_left_TEXT=Wrong, precedence is checked before associativity, so operator ${left_operator} at pos ${left_operator_pos} with higher precedence blocks evaluation of operator ${operator} at pos ${pos} until the operator ${left_operator} at pos ${left_operator_pos} is evaluated
expr_domain_dt.supplementary.correct_select_precedence_or_associativity_left_TEXT=Yes, precedence is checked before associativity, so operator ${left_operator} at pos ${left_operator_pos} with higher precedence blocks evaluation of operator ${operator} at pos ${pos} until the operator ${left_operator} at pos ${left_operator_pos} is evaluated
expr_domain_dt.supplementary.error_select_precedence_or_associativity_right_TEXT=Wrong, precedence is checked before associativity, so operator ${right_operator} at pos ${right_operator_pos} with higher precedence blocks evaluation of operator ${operator} at pos ${pos} until the operator ${right_operator} at pos ${right_operator_pos} is evaluated
expr_domain_dt.supplementary.correct_select_precedence_or_associativity_right_TEXT=Yes, precedence is checked before associativity, so operator ${right_operator} at pos ${right_operator_pos} with higher precedence blocks evaluation of operator ${operator} at pos ${pos} until the operator ${right_operator} at pos ${right_operator_pos} is evaluated
expr_domain_dt.supplementary.select_associativity_or_arity_influence_left_TEXT=What influences evaluation order at operators with same precedence?
expr_domain_dt.supplementary.select_associativity_or_arity_influence_left_select_associativity_or_arity_influence_arity=arity
expr_domain_dt.supplementary.select_associativity_or_arity_influence_left_select_associativity_or_arity_influence_associativity=associativity
expr_domain_dt.supplementary.error_select_associativity_or_arity_influence_left_TEXT=Wrong, associativity influence evaluation order, so operator ${left_operator} at pos ${left_operator_pos} with the same precedence and left associativity blocks evaluation of operator ${operator} at pos ${pos} until the operator ${left_operator} at pos ${left_operator_pos} is evaluated
expr_domain_dt.supplementary.correct_select_associativity_or_arity_influence_left_TEXT=Yes, associativity influence evaluation order, so operator ${left_operator} at pos ${left_operator_pos} with the same precedence and left associativity blocks evaluation of operator ${operator} at pos ${pos} until the operator ${left_operator} at pos ${left_operator_pos} is evaluated
expr_domain_dt.supplementary.error_select_associativity_or_arity_influence_right_TEXT=Wrong, associativity influence evaluation order, so operator ${right_operator} at pos ${right_operator_pos} with the same precedence and right associativity blocks evaluation of operator ${operator} at pos ${pos} until the operator ${right_operator} at pos ${right_operator_pos} is evaluated
expr_domain_dt.supplementary.correct_select_associativity_or_arity_influence_right_TEXT=Yes, associativity influence evaluation order, so operator ${right_operator} at pos ${right_operator_pos} with the same precedence and right associativity blocks evaluation of operator ${operator} at pos ${pos} until the operator ${right_operator} at pos ${right_operator_pos} is evaluated
expr_domain_dt.supplementary.select_associativity_type_left_TEXT=What is the associativity of operator ${left_operator}?
expr_domain_dt.supplementary.select_associativity_type_right_TEXT=What is the associativity of operator ${right_operator}?
expr_domain_dt.supplementary.select_associativity_type_left_select_associativity_type_left_left=left
expr_domain_dt.supplementary.select_associativity_type_left_select_associativity_type_left_right=right
expr_domain_dt.supplementary.select_associativity_type_left_select_associativity_type_left_nonassoc=nonassoc
expr_domain_dt.supplementary.correct_select_associativity_type_left_left_TEXT=Yes, operators ${left_operator} and ${operator} have same precedence and left associativity, so they are evaluated left to right and ${left_operator} at pos ${left_operator_pos} will block the operator ${operator} at pos ${pos} until the operator ${left_operator} at pos ${left_operator_pos} is evaluated
expr_domain_dt.supplementary.error_select_associativity_type_left_right_TEXT=Wrong, operators ${left_operator} and ${operator} have same precedence and left associativity, so they are evaluated left to right and ${left_operator} at pos ${left_operator_pos} will block the operator ${operator} at pos ${pos} until the operator ${left_operator} at pos ${left_operator_pos} is evaluated
expr_domain_dt.supplementary.error_select_associativity_type_left_right_assoc_TEXT=Wrong, operators ${left_operator} and ${operator} have same precedence and right associativity, so they are evaluated right to left and ${operator} at pos ${pos} will block the operator ${left_operator} at pos ${left_operator_pos} until the operator ${operator} at pos ${pos} is evaluated
expr_domain_dt.supplementary.correct_select_associativity_type_left_right_assoc_TEXT=Yes, operators ${left_operator} and ${operator} have same precedence and right associativity, so they are evaluated right to left and ${operator} at pos ${pos} will block the operator ${left_operator} at pos ${left_operator_pos} until the operator ${operator} at pos ${pos} is evaluated
expr_domain_dt.supplementary.correct_select_associativity_type_right_left_assoc_TEXT=Yes, operators ${right_operator} and ${operator} have same precedence and left associativity, so they are evaluated left to right and ${operator} at pos ${pos} will block the operator ${right_operator} at pos ${right_operator_pos} until the operator ${operator} at pos ${pos} is evaluated
expr_domain_dt.supplementary.error_select_associativity_type_right_left_assoc_TEXT=Wrong, operators ${right_operator} and ${operator} have same precedence and left associativity, so they are evaluated left to right and ${operator} at pos ${pos} will block the operator ${right_operator} at pos ${right_operator_pos} until the operator ${operator} at pos ${pos} is evaluated
expr_domain_dt.supplementary.correct_select_associativity_type_right_right_TEXT=Yes, operators ${right_operator} and ${operator} have same precedence and right associativity, so they are evaluated right to left and ${right_operator} at pos ${right_operator_pos} will block the operator ${operator} at pos ${pos} until the operator ${right_operator} at pos ${right_operator_pos} is evaluated
expr_domain_dt.supplementary.error_select_associativity_type_right_left_TEXT=Wrong, operators ${right_operator} and ${operator} have same precedence and right associativity, so they are evaluated right to left and ${right_operator} at pos ${right_operator_pos} will block the operator ${operator} at pos ${pos} until the operator ${right_operator} at pos ${right_operator_pos} is evaluated
expr_domain_dt.supplementary.error_select_precedence_or_associativity_same_precedence_left_TEXT=Wrong, precedence is checked before associativity, but in this case the precedence is the same, so it's irrelevant and you should have checked associativity

expr_domain_dt.explanations.unsupported_correct_answer_explanation = Explanation of correct answer is temporarily unavailable
expr_domain_dt.explanations.missing_correct_answer_explanation = Explanation of correct answer is not present for this solution step
expr_domain_dt.explanations.already_solved = All operators have already evaluated. Question is solved!

# concepts

expr_domain_dt.concept.arithmetics = Arithmetic operators
expr_domain_dt.concept.increment = Increment and decrement
expr_domain_dt.concept.aug_assignments = Assignments with update
expr_domain_dt.concept.comparison = Comparison operators
expr_domain_dt.concept.logical = Logical operators
expr_domain_dt.concept.bitwise = Bitwise operators
expr_domain_dt.concept.pointers = Pointer operators
expr_domain_dt.concept.object_access = Member access
expr_domain_dt.concept.operator_subscript = Array item access
expr_domain_dt.concept.stream_io = Input/output stream
# ... a[i]
expr_domain_dt.concept.function_call = Function call
expr_domain_dt.concept.operator_sizeof = Size-of operators
expr_domain_dt.concept.operator_cast = Type cast operators
expr_domain_dt.concept.operator_new = Dynamic object creation
expr_domain_dt.concept.collection_literal = Array and collection literals
expr_domain_dt.concept.operator_function_call = Function call
expr_domain_dt.concept.operator_, = Comma between expressions

expr_domain_dt.concept.operator_\= = Assignment operator
expr_domain_dt.concept.operator_? = Ternary operator (?:)


# laws

expr_domain_dt.law.error_base_higher_precedence_base = Operator precedence

expr_domain_dt.law.error_base_unary_having_associativity_left = Left-associative unary operators (postfix)
expr_domain_dt.law.error_base_binary_having_associativity_left = Left-associative binary operators
expr_domain_dt.law.error_base_unary_having_associativity_right = Right-associative unary operators
expr_domain_dt.law.error_base_binary_having_associativity_right = Right-associative binary operators (assignment)
expr_domain_dt.law.error_base_ternary_having_associativity_right = Right-associative ternary operator (?:)

expr_domain_dt.law.error_base_enclosing_operators = Enclosing operators ([], f(), ?:)
expr_domain_dt.law.error_base_student_error_strict_operands_order = Operators having strict order of evaluation (&&, ||, ?:)

# currently unused law names:
expr_domain_dt.law.error_base_student_error_in_complex = Enclosed operands ([], (), ?:)
expr_domain_dt.law.error_base_higher_precedence_right = Priority on right
expr_domain_dt.law.error_base_higher_precedence_left = Priority on left
expr_domain_dt.law.error_base_same_precedence_left_associativity_left = Left associativity
expr_domain_dt.law.error_base_same_precedence_right_associativity_right = Right associativity
expr_domain_dt.law.error_base_parentheses = Enclosing by parentheses
expr_domain_dt.law.error_base_parentheses_of_func_args = Enclosed function arguments
expr_domain_dt.law.error_base_grouping_braces = Enclosing by [] and ?:
expr_domain_dt.law.error_base_student_error_unevaluated_operand = Unevaluated operand

expr_domain_dt.skill.central_operand_needed = Determine the need for a central operand
expr_domain_dt.skill.is_central_operand_evaluated = Determine if the central operand was evaluated
expr_domain_dt.skill.nearest_operand_needed = Find the operand closest to the current operand
expr_domain_dt.skill.competing_operator_present = Find an operator that might prevent execution of the current operator
expr_domain_dt.skill.current_operator_enclosed = Determine whether an operator is a grouping operator
expr_domain_dt.skill.order_determined_by_parentheses = Determine the order of evaluation based on parentheses
expr_domain_dt.skill.order_determined_by_precedence = Determine the order of evaluation based on operator priority
expr_domain_dt.skill.associativity_without_opposing_operand = Distinguish between binary and unary operators
expr_domain_dt.skill.order_determined_by_associativity = Determine the order of evaluation based on operator associativity
expr_domain_dt.skill.right_competing_to_left_associativity = Determine the order of evaluation based on left associativity
expr_domain_dt.skill.left_competing_to_right_associativity = Determine the order of evaluation based on right associativity
expr_domain_dt.skill.strict_order_operators_present = Determine the presence of strict-order operators
expr_domain_dt.skill.strict_order_first_operand_to_be_evaluated = Determine the first operand, which is evaluated in a strict-order operator
expr_domain_dt.skill.is_first_operand_of_strict_order_operator_fully_evaluated = Determine whether the first operand, which is evaluated in a strict-order operator, is fully evaluated
expr_domain_dt.skill.no_omitted_operands_despite_strict_order = Determine whether there are strict order operators in which no operand is omitted
expr_domain_dt.skill.should_strict_order_current_operand_be_omitted = Determine whether some operands are omitted due to strict order
expr_domain_dt.skill.is_current_operator_strict_order = Determine whether the currently selected operator has a strict order of evaluation
expr_domain_dt.skill.are_central_operands_strict_order = Understand that multiple central arguments (function arguments, array elements) are evaluated strictly from left to right in the current programming language
expr_domain_dt.skill.no_current_in_many_central_operands = Determine that the currently selected operand belongs to one of the central comma-separated operands
expr_domain_dt.skill.no_comma_in_central_operands = Determine the commas that separate central operands
expr_domain_dt.skill.previous_central_operands_are_unevaluated = Determine that the previous central comma-separated operands are not evaluated

expr_domain_dt.student_end_evaluation=everything is evaluated
