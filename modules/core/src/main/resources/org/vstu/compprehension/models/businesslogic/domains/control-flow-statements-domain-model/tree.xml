<StartNode>
  <InputVariables>
    <DecisionTreeVarDecl name="T" type="trace" />
    <DecisionTreeVarDecl name="G" type="algorithm" />
  </InputVariables>
  <ThoughtBranch type="bool">
    <FindActionNode _alias="Найти акт студента в трассе - &lt;b&gt;A&lt;/b&gt;">
      <Expression>
        <GetByCondition varName="a">
          <LogicalAnd>
            <CheckClass>
              <Variable name="a" />
              <Class name="act" />
            </CheckClass>
            <ExistenceQuantifier varName="al">
              <CheckClass>
                <Variable name="al" />
                <Class name="act" />
              </CheckClass>
              <CheckRelationship>
                <Relationship name="student_next_latest" />
                <Variable name="al" />
                <Variable name="a" />
              </CheckRelationship>
            </ExistenceQuantifier>
          </LogicalAnd>
        </GetByCondition>
      </Expression>
      <DecisionTreeVarDecl name="A" type="act" />
      <Outcome value="Found">
        <FindActionNode _alias="Найти последний корректный акт в трассе - &lt;b&gt;Al&lt;/b&gt;">
          <Expression>
            <GetByCondition varName="al">
              <LogicalAnd>
                <ExistenceQuantifier varName="b">
                  <CheckClass>
                    <Variable name="b" />
                    <Class name="act" />
                  </CheckClass>
                  <CheckRelationship>
                    <Relationship name="student_next_latest" />
                    <Variable name="al" />
                    <Variable name="b" />
                  </CheckRelationship>
                </ExistenceQuantifier>
                <CheckClass>
                  <Variable name="al" />
                  <Class name="act" />
                </CheckClass>
              </LogicalAnd>
            </GetByCondition>
          </Expression>
          <DecisionTreeVarDecl name="Al" type="act" />
          <Outcome value="Not found">
            <FindActionNode _alias="Найти точку входа в алгоритм &lt;b&gt;G&lt;/b&gt; (глобальный код)&lt;b&gt; -&amp;nbsp; E&lt;/b&gt;">
              <Expression>
                <GetByCondition varName="entry_bound">
                  <LogicalAnd>
                    <CheckClass>
                      <Variable name="entry_bound" />
                      <Class name="boundary" />
                    </CheckClass>
                    <CheckRelationship>
                      <Relationship name="begin_of" />
                      <Variable name="entry_bound" />
                      <GetByRelationship varName="">
                        <GetByCondition varName="alg">
                          <CheckClass>
                            <Variable name="alg" />
                            <Class name="algorithm" />
                          </CheckClass>
                        </GetByCondition>
                        <Relationship name="entry_point" />
                      </GetByRelationship>
                    </CheckRelationship>
                  </LogicalAnd>
                </GetByCondition>
              </Expression>
              <DecisionTreeVarDecl name="E" type="boundary" />
              <Outcome value="Found">
                <QuestionNode _alias="совпадает ли &lt;b&gt;А&lt;/b&gt; с &lt;b&gt;Е&lt;/b&gt; ?" type="bool" isSwitch="false">
                  <Expression>
                    <Compare operator="EQUAL">
                      <GetByRelationship varName="">
                        <DecisionTreeVar name="A" />
                        <Relationship name="executes" />
                      </GetByRelationship>
                      <DecisionTreeVar name="E" />
                    </Compare>
                  </Expression>
                  <Outcome value="True">
                    <BranchResultNode _alias="&lt;b&gt;A&lt;/b&gt;" value="true" />
                  </Outcome>
                  <Outcome value="False">
                    <BranchResultNode _alias="Программа ещё не началась" value="false" _errorNode="true" _explanation="Программа ещё не началась">
                      <Expression>
                        <String value="BadBeginOfTrace" />
                      </Expression>
                    </BranchResultNode>
                  </Outcome>
                </QuestionNode>
              </Outcome>
            </FindActionNode>
          </Outcome>
          <Outcome value="Found">
            <FindActionNode _alias="Найти действие, которое выполняет акт &lt;b&gt;Al&lt;/b&gt; — &lt;b&gt;P&lt;/b&gt;">
              <Expression>
                <GetByRelationship varName="">
                  <GetByRelationship varName="">
                    <DecisionTreeVar name="Al" />
                    <Relationship name="executes" />
                  </GetByRelationship>
                  <Relationship name="boundary_of" />
                </GetByRelationship>
              </Expression>
              <DecisionTreeVarDecl name="P" type="action" />
              <Outcome value="Found">
                <FindActionNode _alias="Найти текущее комплексное действие &lt;b&gt;B&lt;/b&gt;, включающее &lt;b&gt;Al&lt;/b&gt;">
                  <Expression>
                    <GetByCondition varName="BB">
                      <LogicalAnd>
                        <CheckClass>
                          <Variable name="BB" />
                          <Class name="statement" />
                        </CheckClass>
                        <Compare operator="EQUAL">
                          <GetByRelationship varName="">
                            <GetByRelationship varName="">
                              <GetByCondition varName="b">
                                <LogicalAnd>
                                  <CheckClass>
                                    <Variable name="b" />
                                    <Class name="act" />
                                  </CheckClass>
                                  <LogicalOr>
                                    <LogicalAnd>
                                      <Compare operator="NOT_EQUAL">
                                        <GetPropertyValue>
                                          <DecisionTreeVar name="Al" />
                                          <Property name="act_kind" />
                                        </GetPropertyValue>
                                        <Enum owner="act_kind" value="begin" />
                                      </Compare>
                                      <CheckRelationship>
                                        <Relationship name="student_parent_of" />
                                        <Variable name="b" />
                                        <DecisionTreeVar name="Al" />
                                      </CheckRelationship>
                                    </LogicalAnd>
                                    <LogicalAnd>
                                      <Compare operator="EQUAL">
                                        <GetPropertyValue>
                                          <DecisionTreeVar name="Al" />
                                          <Property name="act_kind" />
                                        </GetPropertyValue>
                                        <Enum owner="act_kind" value="begin" />
                                      </Compare>
                                      <Compare operator="EQUAL">
                                        <Variable name="b" />
                                        <DecisionTreeVar name="Al" />
                                      </Compare>
                                    </LogicalAnd>
                                  </LogicalOr>
                                </LogicalAnd>
                              </GetByCondition>
                              <Relationship name="executes" />
                            </GetByRelationship>
                            <Relationship name="boundary_of" />
                          </GetByRelationship>
                          <Variable name="BB" />
                        </Compare>
                      </LogicalAnd>
                    </GetByCondition>
                  </Expression>
                  <DecisionTreeVarDecl name="B" type="statement" />
                  <Outcome value="Found">
                    <FindActionNode _alias="Найти действие, которое выполняет акт &lt;b&gt;A &lt;/b&gt; -  &lt;b&gt;Y&lt;/b&gt;">
                      <Expression>
                        <GetByRelationship varName="">
                          <GetByRelationship varName="">
                            <DecisionTreeVar name="A" />
                            <Relationship name="executes" />
                          </GetByRelationship>
                          <Relationship name="boundary_of" />
                        </GetByRelationship>
                      </Expression>
                      <DecisionTreeVarDecl name="Y" type="action" />
                      <Outcome value="Found">
                        <LogicAggregationNode _alias="AND" operator="and">
                          <Outcome value="False">
                            <BranchResultNode _alias="[контекст неверен]" value="false" />
                          </Outcome>
                          <ThoughtBranch type="bool">
                            <QuestionNode _alias="Является ли &lt;b&gt;A&lt;/b&gt; актом окончания ?" type="bool" isSwitch="false">
                              <Expression>
                                <Compare operator="EQUAL">
                                  <GetPropertyValue>
                                    <DecisionTreeVar name="A" />
                                    <Property name="act_kind" />
                                  </GetPropertyValue>
                                  <Enum owner="act_kind" value="end" />
                                </Compare>
                              </Expression>
                              <Outcome value="False">
                                <FindActionNode _alias="Найти конструкцию-контекст &lt;b&gt;CX&lt;/b&gt; , к которой принадлежит действие &lt;b&gt;Y&lt;/b&gt;">
                                  <Expression>
                                    <GetByCondition varName="L">
                                      <LogicalAnd>
                                        <CheckClass>
                                          <Variable name="L" />
                                          <Class name="statement" />
                                        </CheckClass>
                                        <CheckRelationship>
                                          <Relationship name="parent_of" />
                                          <Variable name="L" />
                                          <DecisionTreeVar name="Y" />
                                        </CheckRelationship>
                                      </LogicalAnd>
                                    </GetByCondition>
                                  </Expression>
                                  <DecisionTreeVarDecl name="CX" type="statement" />
                                  <Outcome value="Found">
                                    <QuestionNode _alias="Является ли текущее  выполняемое действие (&lt;b&gt;B&lt;/b&gt;)  также контекстом &lt;b&gt;CX&lt;/b&gt; ?" type="bool" isSwitch="false">
                                      <Expression>
                                        <Compare operator="EQUAL">
                                          <DecisionTreeVar name="CX" />
                                          <DecisionTreeVar name="B" />
                                        </Compare>
                                      </Expression>
                                      <Outcome value="False">
                                        <FindActionNode _alias="Найти последнее начало &lt;b&gt;CX&lt;/b&gt; в трассе — LCXb">
                                          <Expression>
                                            <GetExtreme extremeVarName="a" varName="a">
                                              <LogicalNot>
                                                <ExistenceQuantifier varName="e">
                                                  <LogicalAnd>
                                                    <CheckClass>
                                                      <Variable name="e" />
                                                      <Class name="act_begin" />
                                                    </CheckClass>
                                                    <CheckRelationship>
                                                      <Relationship name="begin_of" />
                                                      <GetByRelationship varName="">
                                                        <Variable name="e" />
                                                        <Relationship name="executes" />
                                                      </GetByRelationship>
                                                      <DecisionTreeVar name="CX" />
                                                    </CheckRelationship>
                                                  </LogicalAnd>
                                                  <Compare operator="GREATER">
                                                    <GetPropertyValue>
                                                      <Variable name="a" />
                                                      <Property name="student_index" />
                                                    </GetPropertyValue>
                                                    <GetPropertyValue>
                                                      <Variable name="e" />
                                                      <Property name="student_index" />
                                                    </GetPropertyValue>
                                                  </Compare>
                                                </ExistenceQuantifier>
                                              </LogicalNot>
                                              <LogicalAnd>
                                                <CheckClass>
                                                  <Variable name="a" />
                                                  <Class name="act_begin" />
                                                </CheckClass>
                                                <CheckRelationship>
                                                  <Relationship name="begin_of" />
                                                  <GetByRelationship varName="">
                                                    <Variable name="a" />
                                                    <Relationship name="executes" />
                                                  </GetByRelationship>
                                                  <DecisionTreeVar name="CX" />
                                                </CheckRelationship>
                                              </LogicalAnd>
                                            </GetExtreme>
                                          </Expression>
                                          <DecisionTreeVarDecl name="LCXb" type="act" />
                                          <Outcome value="Found">
                                            <QuestionNode _alias="Есть ли в трассе начавшееся, но не завершившееся выполнение &lt;b&gt;CX&lt;/b&gt; ?" type="bool" isSwitch="false">
                                              <Expression>
                                                <LogicalNot>
                                                  <ExistenceQuantifier varName="e">
                                                    <CheckClass>
                                                      <Variable name="e" />
                                                      <Class name="act_end" />
                                                    </CheckClass>
                                                    <CheckRelationship>
                                                      <Relationship name="corresponding_end" />
                                                      <DecisionTreeVar name="LCXb" />
                                                      <Variable name="e" />
                                                    </CheckRelationship>
                                                  </ExistenceQuantifier>
                                                </LogicalNot>
                                              </Expression>
                                              <Outcome value="True">
                                                <QuestionNode _alias="Является ли текущее выполняемое действие (&lt;b&gt;B&lt;/b&gt;)  частью контекста &lt;b&gt;CX&lt;/b&gt; (или им самим) ?" type="bool" isSwitch="false">
                                                  <Expression>
                                                    <LogicalOr>
                                                      <Compare operator="EQUAL">
                                                        <DecisionTreeVar name="Y" />
                                                        <DecisionTreeVar name="B" />
                                                      </Compare>
                                                      <CheckRelationship>
                                                        <Relationship name="hasPartTransitive" />
                                                        <DecisionTreeVar name="Y" />
                                                        <DecisionTreeVar name="B" />
                                                      </CheckRelationship>
                                                    </LogicalOr>
                                                  </Expression>
                                                  <Outcome value="False">
                                                    <BranchResultNode _alias="CtxInnerPending: Действие &lt;b&gt;CX&lt;/b&gt; не может продолжиться, пока вложенные действия ещё выполняются" value="false" _errorNode="CtxInnerPending" _explanation="${class('CX','и')} ${val('CX','и')} не может продолжиться, пока вложенные действия ещё выполняются" />
                                                  </Outcome>
                                                  <Outcome value="True">
                                                    <BranchResultNode _alias="CtxStartAgain: Действие &lt;b&gt;Y&lt;/b&gt; не может начаться лишний раз, т.к. уже выполняется" value="false" _errorNode="CtxStartAgain" _explanation="${class('Y','и')} ${val('Y','и')} не может начаться лишний раз, т.к. уже выполняется" />
                                                  </Outcome>
                                                </QuestionNode>
                                              </Outcome>
                                              <Outcome value="False">
                                                <BranchResultNode _alias="CtxEnded: Нельзя вернуться к %(CX,д) после завершения" value="false" _errorNode="CtxEnded" _explanation="Нельзя вернуться к ${class('CX','д')} ${val('CX','и')} после завершения" />
                                              </Outcome>
                                            </QuestionNode>
                                          </Outcome>
                                          <Outcome value="Not found">
                                            <BranchResultNode _alias="CtxNeverBegun: Действие &lt;b&gt;Y&lt;/b&gt; не может выполняться прежде, чем начнется действие &lt;b&gt;CX&lt;/b&gt;" value="false" _errorNode="CtxNeverBegun" _explanation="${class('Y','и')} ${val('Y','и')} не может выполняться прежде, чем начнется ${class('CX','и')} ${val('CX','и')}" />
                                          </Outcome>
                                        </FindActionNode>
                                      </Outcome>
                                      <Outcome value="True">
                                        <BranchResultNode _alias="&lt;b&gt;A&lt;/b&gt;" value="true" />
                                      </Outcome>
                                    </QuestionNode>
                                  </Outcome>
                                </FindActionNode>
                              </Outcome>
                              <Outcome value="True">
                                <BranchResultNode _alias="&lt;b&gt;A&lt;/b&gt;" value="true" />
                              </Outcome>
                            </QuestionNode>
                          </ThoughtBranch>
                          <ThoughtBranch type="bool">
                            <QuestionNode _alias="Является ли &lt;b&gt;A&lt;/b&gt; актом окончания ?" type="bool" isSwitch="false">
                              <Expression>
                                <Compare operator="EQUAL">
                                  <GetPropertyValue>
                                    <DecisionTreeVar name="A" />
                                    <Property name="act_kind" />
                                  </GetPropertyValue>
                                  <Enum owner="act_kind" value="end" />
                                </Compare>
                              </Expression>
                              <Outcome value="True">
                                <QuestionNode _alias="Совпадает ли &lt;b&gt;Y&lt;/b&gt; с &lt;b&gt;B&lt;/b&gt; &lt;br&gt;(нужное ли следование пытается завершиться) ?" type="bool" isSwitch="false">
                                  <Expression>
                                    <Compare operator="EQUAL">
                                      <DecisionTreeVar name="B" />
                                      <DecisionTreeVar name="Y" />
                                    </Compare>
                                  </Expression>
                                  <Outcome value="False">
                                    <FindActionNode _alias="Найти последнее начало &lt;b&gt;Y&lt;/b&gt; в трассе — LYb">
                                      <Expression>
                                        <GetByCondition varName="a">
                                          <LogicalAnd>
                                            <LogicalAnd>
                                              <CheckClass>
                                                <Variable name="a" />
                                                <Class name="act_begin" />
                                              </CheckClass>
                                              <CheckRelationship>
                                                <Relationship name="begin_of" />
                                                <GetByRelationship varName="">
                                                  <Variable name="a" />
                                                  <Relationship name="executes" />
                                                </GetByRelationship>
                                                <DecisionTreeVar name="Y" />
                                              </CheckRelationship>
                                            </LogicalAnd>
                                            <LogicalNot>
                                              <ExistenceQuantifier varName="e">
                                                <LogicalAnd>
                                                  <CheckClass>
                                                    <Variable name="e" />
                                                    <Class name="act_begin" />
                                                  </CheckClass>
                                                  <CheckRelationship>
                                                    <Relationship name="begin_of" />
                                                    <GetByRelationship varName="">
                                                      <Variable name="e" />
                                                      <Relationship name="executes" />
                                                    </GetByRelationship>
                                                    <DecisionTreeVar name="Y" />
                                                  </CheckRelationship>
                                                </LogicalAnd>
                                                <Compare operator="GREATER">
                                                  <GetPropertyValue>
                                                    <Variable name="a" />
                                                    <Property name="student_index" />
                                                  </GetPropertyValue>
                                                  <GetPropertyValue>
                                                    <Variable name="e" />
                                                    <Property name="student_index" />
                                                  </GetPropertyValue>
                                                </Compare>
                                              </ExistenceQuantifier>
                                            </LogicalNot>
                                          </LogicalAnd>
                                        </GetByCondition>
                                      </Expression>
                                      <DecisionTreeVarDecl name="LYb" type="act" />
                                      <Outcome value="Found">
                                        <QuestionNode _alias="Есть ли в трассе начавшееся, но не завершившееся выполнение &lt;b&gt;Y&lt;/b&gt; ?" type="bool" isSwitch="false">
                                          <Expression>
                                            <LogicalNot>
                                              <ExistenceQuantifier varName="e">
                                                <CheckClass>
                                                  <Variable name="e" />
                                                  <Class name="act_end" />
                                                </CheckClass>
                                                <CheckRelationship>
                                                  <Relationship name="corresponding_end" />
                                                  <DecisionTreeVar name="LYb" />
                                                  <Variable name="e" />
                                                </CheckRelationship>
                                              </ExistenceQuantifier>
                                            </LogicalNot>
                                          </Expression>
                                          <Outcome value="True">
                                            <BranchResultNode _alias="CtxInnerPending: Действие &lt;b&gt;Y&lt;/b&gt; не может завершиться досрочно, пока вложенные действия ещё выполняются" value="false" _errorNode="CtxInnerPending" _explanation="${class('Y','и')} ${val('Y','и')} не может завершиться досрочно, пока вложенные действия ещё выполняются" />
                                          </Outcome>
                                          <Outcome value="False">
                                            <BranchResultNode _alias="CtxEnded: Нельзя завершить %(Y,в) ещё раз, после завершения" value="false" _errorNode="CtxEnded" _explanation="Нельзя завершить ${class('Y','в')} ${val('Y','и')} ещё раз, после завершения" />
                                          </Outcome>
                                        </QuestionNode>
                                      </Outcome>
                                      <Outcome value="Not found">
                                        <BranchResultNode _alias="EndWhenNeverBegun: Действие &lt;b&gt;Y&lt;/b&gt; не может закончиться, не начавшись" value="false" _errorNode="EndWhenNeverBegun" _explanation="${class('Y','и')} ${val('Y','и')} не может закончиться, не начавшись" />
                                      </Outcome>
                                    </FindActionNode>
                                  </Outcome>
                                  <Outcome value="True">
                                    <BranchResultNode _alias="&lt;b&gt;A&lt;/b&gt;" value="true" />
                                  </Outcome>
                                </QuestionNode>
                              </Outcome>
                              <Outcome value="False">
                                <BranchResultNode _alias="&lt;b&gt;A&lt;/b&gt;" value="true" />
                              </Outcome>
                            </QuestionNode>
                          </ThoughtBranch>
                          <Outcome value="True">
                            <LogicAggregationNode _alias="AND" operator="and">
                              <Outcome value="True">
                                <QuestionNode _alias="Какому типу относится акт &lt;b&gt;A&lt;/b&gt; ?" type="enum" isSwitch="false">
                                  <Expression>
                                    <GetPropertyValue>
                                      <DecisionTreeVar name="A" />
                                      <Property name="act_kind" />
                                    </GetPropertyValue>
                                  </Expression>
                                  <Outcome value="act_kind:atom">
                                    <QuestionNode _alias="Чем является &lt;b&gt;Y&lt;/b&gt; ? [atom]" type="enum" isSwitch="false">
                                      <Expression>
                                        <GetPropertyValue>
                                          <DecisionTreeVar name="Y" />
                                          <Property name="has_role" />
                                        </GetPropertyValue>
                                      </Expression>
                                      <Outcome value="role_for_parent:loop_cond">
                                        <FindActionNode _alias="Найти цикл &lt;b&gt;L&lt;/b&gt; , к которому&lt;b&gt; &lt;/b&gt;принадлежит&lt;b&gt;&lt;br&gt;&lt;/b&gt;&lt;div&gt;условие &lt;b&gt;Y&lt;/b&gt;&lt;/div&gt;">
                                          <Expression>
                                            <GetByCondition varName="L">
                                              <LogicalAnd>
                                                <CheckClass>
                                                  <Variable name="L" />
                                                  <Class name="conditional_loop" />
                                                </CheckClass>
                                                <CheckRelationship>
                                                  <Relationship name="cond" />
                                                  <Variable name="L" />
                                                  <DecisionTreeVar name="Y" />
                                                </CheckRelationship>
                                              </LogicalAnd>
                                            </GetByCondition>
                                          </Expression>
                                          <DecisionTreeVarDecl name="L" type="conditional_loop" />
                                          <Outcome value="Found">
                                            <QuestionNode _alias="Является ли &lt;b&gt;Al&lt;/b&gt; началом цикла &lt;b&gt;L &lt;/b&gt;?" type="bool" isSwitch="false">
                                              <Expression>
                                                <CheckRelationship>
                                                  <Relationship name="begin_of" />
                                                  <GetByRelationship varName="">
                                                    <DecisionTreeVar name="Al" />
                                                    <Relationship name="executes" />
                                                  </GetByRelationship>
                                                  <DecisionTreeVar name="L" />
                                                </CheckRelationship>
                                              </Expression>
                                              <Outcome value="False">
                                                <QuestionNode _alias="Чем является &lt;b&gt;Al &lt;/b&gt;в цикле&amp;nbsp;&lt;b&gt;L &lt;/b&gt;?" type="enum" isSwitch="false">
                                                  <Expression>
                                                    <GetPropertyValue>
                                                      <DecisionTreeVar name="P" />
                                                      <Property name="has_role" />
                                                    </GetPropertyValue>
                                                  </Expression>
                                                  <Outcome value="role_for_parent:loop_body">
                                                    <QuestionNode _alias="Является ли цикл &lt;b&gt;L &lt;/b&gt;циклом с пост&lt;b&gt;-&lt;/b&gt;переходом ?" type="bool" isSwitch="false">
                                                      <Expression>
                                                        <CheckClass>
                                                          <DecisionTreeVar name="L" />
                                                          <Class name="post_update_loop" />
                                                        </CheckClass>
                                                      </Expression>
                                                      <Outcome value="False">
                                                        <BranchResultNode _alias="&lt;b&gt;A&lt;/b&gt;" value="true" />
                                                      </Outcome>
                                                      <Outcome value="True">
                                                        <QuestionNode _alias="Присутствует ли (непустой) переход в цикле &lt;b&gt;L&lt;/b&gt;?" type="bool" isSwitch="false">
                                                          <Expression>
                                                            <ExistenceQuantifier varName="n">
                                                              <CheckClass>
                                                                <Variable name="n" />
                                                                <Class name="stmt" />
                                                              </CheckClass>
                                                              <CheckRelationship>
                                                                <Relationship name="update" />
                                                                <DecisionTreeVar name="L" />
                                                                <Variable name="n" />
                                                              </CheckRelationship>
                                                            </ExistenceQuantifier>
                                                          </Expression>
                                                          <Outcome value="True">
                                                            <BranchResultNode _alias="LoopCondBeforeUpdate: Проверять условие ${class('L','р')} рано, т.к. переход цикла ещё не выполнен" value="false" _errorNode="LoopCondBeforeUpdate" _explanation="Проверять условие ${class('L','р')} рано, т.к. переход цикла ещё не выполнен" />
                                                          </Outcome>
                                                          <Outcome value="False">
                                                            <BranchResultNode _alias="&lt;b&gt;A&lt;/b&gt;" value="true" />
                                                          </Outcome>
                                                        </QuestionNode>
                                                      </Outcome>
                                                    </QuestionNode>
                                                  </Outcome>
                                                  <Outcome value="role_for_parent:loop_update">
                                                    <QuestionNode _alias=" Является ли цикл &lt;b&gt;L &lt;/b&gt;циклом с пост&lt;b&gt;-&lt;/b&gt;переходом ?" type="bool" isSwitch="false">
                                                      <Expression>
                                                        <CheckClass>
                                                          <DecisionTreeVar name="L" />
                                                          <Class name="post_update_loop" />
                                                        </CheckClass>
                                                      </Expression>
                                                      <Outcome value="True">
                                                        <BranchResultNode _alias="&lt;b&gt;A&lt;/b&gt;" value="true" />
                                                      </Outcome>
                                                      <Outcome value="False">
                                                        <QuestionNode _alias="Является ли тело цикла &lt;b&gt;L&lt;/b&gt; пустым?" type="bool" isSwitch="false">
                                                          <Expression>
                                                            <LogicalNot>
                                                              <ExistenceQuantifier varName="n">
                                                                <CheckClass>
                                                                  <Variable name="n" />
                                                                  <Class name="sequence" />
                                                                </CheckClass>
                                                                <CheckRelationship>
                                                                  <Relationship name="body" />
                                                                  <DecisionTreeVar name="L" />
                                                                  <Variable name="n" />
                                                                </CheckRelationship>
                                                              </ExistenceQuantifier>
                                                            </LogicalNot>
                                                          </Expression>
                                                          <Outcome value="False">
                                                            <BranchResultNode _alias="LoopCondBeforeIter: Проверять условие цикла рано, т.к. итерация цикла ещё не была выполнена" value="false" _errorNode="LoopCondBeforeIter" _explanation="Проверять условие цикла рано, т.к. итерация цикла ещё не была выполнена" />
                                                          </Outcome>
                                                          <Outcome value="True">
                                                            <BranchResultNode _alias="&lt;b&gt;A&lt;/b&gt;" value="true" />
                                                          </Outcome>
                                                        </QuestionNode>
                                                      </Outcome>
                                                    </QuestionNode>
                                                  </Outcome>
                                                  <Outcome value="role_for_parent:loop_init">
                                                    <BranchResultNode _alias="&lt;b&gt;A&lt;/b&gt;" value="true" />
                                                  </Outcome>
                                                  <Outcome value="role_for_parent:loop_cond">
                                                    <QuestionNode _alias="Позволяет ли значение условия цикла продолжить цикл?" type="bool" isSwitch="false">
                                                      <Expression>
                                                        <Compare operator="EQUAL">
                                                          <GetPropertyValue>
                                                            <DecisionTreeVar name="Al" />
                                                            <Property name="expr_value" />
                                                          </GetPropertyValue>
                                                          <GetPropertyValue>
                                                            <DecisionTreeVar name="L" />
                                                            <Property name="continues_on_true_condition" />
                                                          </GetPropertyValue>
                                                        </Compare>
                                                      </Expression>
                                                      <Outcome value="False">
                                                        <BranchResultNode _alias="LoopNoEndOnFalseCond: Цикл не может продолжиться, т.к. его условие ложно" value="false" _errorNode="LoopNoEndOnFalseCond" _explanation="Цикл не может продолжиться, т.к. его условие ложно" />
                                                      </Outcome>
                                                      <Outcome value="True">
                                                        <QuestionNode _alias="Является ли цикл &lt;b&gt;L&lt;/b&gt; циклом с пред-переходом ?" type="bool" isSwitch="false">
                                                          <Expression>
                                                            <CheckClass>
                                                              <DecisionTreeVar name="L" />
                                                              <Class name="pre_update_loop" />
                                                            </CheckClass>
                                                          </Expression>
                                                          <Outcome value="True">
                                                            <QuestionNode _alias="Является ли переход цикла &lt;b&gt;L&lt;/b&gt; пустым?" type="bool" isSwitch="false">
                                                              <Expression>
                                                                <LogicalNot>
                                                                  <ExistenceQuantifier varName="n">
                                                                    <CheckClass>
                                                                      <Variable name="n" />
                                                                      <Class name="stmt" />
                                                                    </CheckClass>
                                                                    <CheckRelationship>
                                                                      <Relationship name="update" />
                                                                      <DecisionTreeVar name="L" />
                                                                      <Variable name="n" />
                                                                    </CheckRelationship>
                                                                  </ExistenceQuantifier>
                                                                </LogicalNot>
                                                              </Expression>
                                                              <Outcome value="True">
                                                                <QuestionNode _alias="Является ли тело цикла &lt;b&gt;L&lt;/b&gt; пустым?" type="bool" isSwitch="false">
                                                                  <Expression>
                                                                    <LogicalNot>
                                                                      <ExistenceQuantifier varName="n">
                                                                        <CheckClass>
                                                                          <Variable name="n" />
                                                                          <Class name="sequence" />
                                                                        </CheckClass>
                                                                        <CheckRelationship>
                                                                          <Relationship name="body" />
                                                                          <DecisionTreeVar name="L" />
                                                                          <Variable name="n" />
                                                                        </CheckRelationship>
                                                                      </ExistenceQuantifier>
                                                                    </LogicalNot>
                                                                  </Expression>
                                                                  <Outcome value="False">
                                                                    <BranchResultNode _alias="LoopCondBeforeIter: Проверять условие цикла рано, т.к. итерация цикла ещё не была выполнена" value="false" _errorNode="LoopCondBeforeIter" _explanation="Проверять условие цикла рано, т.к. итерация цикла ещё не была выполнена" />
                                                                  </Outcome>
                                                                  <Outcome value="True">
                                                                    <QuestionNode _alias="Является ли цикл &lt;b&gt;L&lt;/b&gt; циклом с пост-переходом ?" type="bool" isSwitch="false">
                                                                      <Expression>
                                                                        <CheckClass>
                                                                          <DecisionTreeVar name="L" />
                                                                          <Class name="post_update_loop" />
                                                                        </CheckClass>
                                                                      </Expression>
                                                                      <Outcome value="False">
                                                                        <BranchResultNode _alias="&lt;b&gt;A&lt;/b&gt;" value="true" />
                                                                      </Outcome>
                                                                      <Outcome value="True">
                                                                        <QuestionNode _alias="Является ли переход цикла &lt;b&gt;L&lt;/b&gt; пустым?" type="bool" isSwitch="false">
                                                                          <Expression>
                                                                            <LogicalNot>
                                                                              <ExistenceQuantifier varName="n">
                                                                                <CheckClass>
                                                                                  <Variable name="n" />
                                                                                  <Class name="stmt" />
                                                                                </CheckClass>
                                                                                <CheckRelationship>
                                                                                  <Relationship name="update" />
                                                                                  <DecisionTreeVar name="L" />
                                                                                  <Variable name="n" />
                                                                                </CheckRelationship>
                                                                              </ExistenceQuantifier>
                                                                            </LogicalNot>
                                                                          </Expression>
                                                                          <Outcome value="True">
                                                                            <BranchResultNode _alias="&lt;b&gt;A&lt;/b&gt;" value="true" />
                                                                          </Outcome>
                                                                          <Outcome value="False">
                                                                            <BranchResultNode _alias="LoopCondBeforeUpdate: Проверять условие ${class('L','р')} рано, т.к. переход цикла ещё не выполнен" value="false" _errorNode="LoopCondBeforeUpdate" _explanation="Проверять условие ${class('L','р')} рано, т.к. переход цикла ещё не выполнен" />
                                                                          </Outcome>
                                                                        </QuestionNode>
                                                                      </Outcome>
                                                                    </QuestionNode>
                                                                  </Outcome>
                                                                </QuestionNode>
                                                              </Outcome>
                                                              <Outcome value="False">
                                                                <BranchResultNode _alias="LoopCondBeforeUpdate: Проверять условие ${class('L','р')} рано, т.к. переход цикла ещё не выполнен" value="false" _errorNode="LoopCondBeforeUpdate" _explanation="Проверять условие ${class('L','р')} рано, т.к. переход цикла ещё не выполнен" />
                                                              </Outcome>
                                                            </QuestionNode>
                                                          </Outcome>
                                                          <Outcome value="False">
                                                            <QuestionNode _alias="Является ли тело цикла &lt;b&gt;L&lt;/b&gt; пустым?" type="bool" isSwitch="false">
                                                              <Expression>
                                                                <LogicalNot>
                                                                  <ExistenceQuantifier varName="n">
                                                                    <CheckClass>
                                                                      <Variable name="n" />
                                                                      <Class name="sequence" />
                                                                    </CheckClass>
                                                                    <CheckRelationship>
                                                                      <Relationship name="body" />
                                                                      <DecisionTreeVar name="L" />
                                                                      <Variable name="n" />
                                                                    </CheckRelationship>
                                                                  </ExistenceQuantifier>
                                                                </LogicalNot>
                                                              </Expression>
                                                              <Outcome value="False">
                                                                <BranchResultNode _alias="LoopCondBeforeIter: Проверять условие цикла рано, т.к. итерация цикла ещё не была выполнена" value="false" _errorNode="LoopCondBeforeIter" _explanation="Проверять условие цикла рано, т.к. итерация цикла ещё не была выполнена" />
                                                              </Outcome>
                                                              <Outcome value="True">
                                                                <QuestionNode _alias="Является ли цикл &lt;b&gt;L&lt;/b&gt; циклом с пост-переходом ?" type="bool" isSwitch="false">
                                                                  <Expression>
                                                                    <CheckClass>
                                                                      <DecisionTreeVar name="L" />
                                                                      <Class name="post_update_loop" />
                                                                    </CheckClass>
                                                                  </Expression>
                                                                  <Outcome value="False">
                                                                    <BranchResultNode _alias="&lt;b&gt;A&lt;/b&gt;" value="true" />
                                                                  </Outcome>
                                                                  <Outcome value="True">
                                                                    <QuestionNode _alias="Является ли переход цикла &lt;b&gt;L&lt;/b&gt; пустым?" type="bool" isSwitch="false">
                                                                      <Expression>
                                                                        <LogicalNot>
                                                                          <ExistenceQuantifier varName="n">
                                                                            <CheckClass>
                                                                              <Variable name="n" />
                                                                              <Class name="stmt" />
                                                                            </CheckClass>
                                                                            <CheckRelationship>
                                                                              <Relationship name="update" />
                                                                              <DecisionTreeVar name="L" />
                                                                              <Variable name="n" />
                                                                            </CheckRelationship>
                                                                          </ExistenceQuantifier>
                                                                        </LogicalNot>
                                                                      </Expression>
                                                                      <Outcome value="True">
                                                                        <BranchResultNode _alias="&lt;b&gt;A&lt;/b&gt;" value="true" />
                                                                      </Outcome>
                                                                      <Outcome value="False">
                                                                        <BranchResultNode _alias="LoopCondBeforeUpdate: Проверять условие ${class('L','р')} рано, т.к. переход цикла ещё не выполнен" value="false" _errorNode="LoopCondBeforeUpdate" _explanation="Проверять условие ${class('L','р')} рано, т.к. переход цикла ещё не выполнен" />
                                                                      </Outcome>
                                                                    </QuestionNode>
                                                                  </Outcome>
                                                                </QuestionNode>
                                                              </Outcome>
                                                            </QuestionNode>
                                                          </Outcome>
                                                        </QuestionNode>
                                                      </Outcome>
                                                    </QuestionNode>
                                                  </Outcome>
                                                </QuestionNode>
                                              </Outcome>
                                              <Outcome value="True">
                                                <LogicAggregationNode _alias="AND" operator="and">
                                                  <Outcome value="True">
                                                    <BranchResultNode _alias="&lt;b&gt;A&lt;/b&gt;" value="true" />
                                                  </Outcome>
                                                  <ThoughtBranch type="bool">
                                                    <QuestionNode _alias="присутствует ли непустая инициализация в цикле&amp;nbsp;&lt;b style=&quot;border-color: var(--border-color);&quot;&gt;L&lt;/b&gt;?" type="bool" isSwitch="false">
                                                      <Expression>
                                                        <ExistenceQuantifier varName="n">
                                                          <CheckClass>
                                                            <Variable name="n" />
                                                            <Class name="stmt" />
                                                          </CheckClass>
                                                          <CheckRelationship>
                                                            <Relationship name="init" />
                                                            <DecisionTreeVar name="L" />
                                                            <Variable name="n" />
                                                          </CheckRelationship>
                                                        </ExistenceQuantifier>
                                                      </Expression>
                                                      <Outcome value="False">
                                                        <BranchResultNode _alias="&lt;b&gt;A&lt;/b&gt;" value="true" />
                                                      </Outcome>
                                                      <Outcome value="True">
                                                        <BranchResultNode _alias="LoopCondBeforeInit: Проверять условие ${class('L','р')} рано, т.к. его инициализация ещё не выполнена" value="false" _errorNode="LoopCondBeforeInit" _explanation="Проверять условие ${class('L','р')} рано, т.к. его инициализация ещё не выполнена" />
                                                      </Outcome>
                                                    </QuestionNode>
                                                  </ThoughtBranch>
                                                  <ThoughtBranch type="bool">
                                                    <QuestionNode _alias="Является ли &lt;b&gt;L&lt;/b&gt;&lt;b style=&quot;border-color: var(--border-color);&quot;&gt;&amp;nbsp;&lt;/b&gt;циклом с&amp;nbsp; предусловием?" type="bool" isSwitch="false">
                                                      <Expression>
                                                        <CheckClass>
                                                          <DecisionTreeVar name="L" />
                                                          <Class name="loop_with_pre_condition" />
                                                        </CheckClass>
                                                      </Expression>
                                                      <Outcome value="False">
                                                        <BranchResultNode _alias="PostCondLoopCondBeforeIter: Условие ${class('L','р')} не должно проверяться до итерации, т.к. это цикл с пост-условием" value="false" _errorNode="PostCondLoopCondBeforeIter" _explanation="Условие ${class('L','р')} не должно проверяться до итерации, т.к. это цикл с пост-условием" />
                                                      </Outcome>
                                                      <Outcome value="True">
                                                        <BranchResultNode _alias="&lt;b&gt;A&lt;/b&gt;" value="true" />
                                                      </Outcome>
                                                    </QuestionNode>
                                                  </ThoughtBranch>
                                                  <Outcome value="False">
                                                    <BranchResultNode _alias="(Условие в начале цикла не выполнится)" value="false" />
                                                  </Outcome>
                                                </LogicAggregationNode>
                                              </Outcome>
                                            </QuestionNode>
                                          </Outcome>
                                        </FindActionNode>
                                      </Outcome>
                                      <Outcome value="role_for_parent:loop_update">
                                        <FindActionNode _alias="Найти цикл &lt;b&gt;L&lt;/b&gt; , к которому&lt;b&gt; &lt;/b&gt;принадлежит&lt;b&gt;&lt;br&gt;&lt;/b&gt;переход &lt;b&gt;Y&lt;/b&gt;">
                                          <Expression>
                                            <GetByCondition varName="L">
                                              <LogicalAnd>
                                                <CheckClass>
                                                  <Variable name="L" />
                                                  <Class name="loop" />
                                                </CheckClass>
                                                <CheckRelationship>
                                                  <Relationship name="update" />
                                                  <Variable name="L" />
                                                  <DecisionTreeVar name="Y" />
                                                </CheckRelationship>
                                              </LogicalAnd>
                                            </GetByCondition>
                                          </Expression>
                                          <DecisionTreeVarDecl name="L" type="loop" />
                                          <Outcome value="Found">
                                            <QuestionNode _alias="Является ли &lt;b&gt;Al&lt;/b&gt; началом цикла &lt;b&gt;L &lt;/b&gt;?" type="bool" isSwitch="false">
                                              <Expression>
                                                <CheckRelationship>
                                                  <Relationship name="begin_of" />
                                                  <GetByRelationship varName="">
                                                    <DecisionTreeVar name="Al" />
                                                    <Relationship name="executes" />
                                                  </GetByRelationship>
                                                  <DecisionTreeVar name="L" />
                                                </CheckRelationship>
                                              </Expression>
                                              <Outcome value="True">
                                                <BranchResultNode _alias="LoopUpdateBeforeInit: Переход ${class('L','р')} не может выполняться раньше первой проверки условия цикла" value="false" _errorNode="LoopUpdateBeforeInit" _explanation="Переход ${class('L','р')} не может выполняться раньше первой проверки условия цикла" />
                                              </Outcome>
                                              <Outcome value="False">
                                                <QuestionNode _alias="Чем является &lt;b&gt;Al &lt;/b&gt;в цикле &lt;b&gt;L &lt;/b&gt;?" type="enum" isSwitch="false">
                                                  <Expression>
                                                    <GetPropertyValue>
                                                      <DecisionTreeVar name="P" />
                                                      <Property name="has_role" />
                                                    </GetPropertyValue>
                                                  </Expression>
                                                  <Outcome value="role_for_parent:loop_cond">
                                                    <QuestionNode _alias="Позволяет ли значение условия цикла продолжить цикл?" type="bool" isSwitch="false">
                                                      <Expression>
                                                        <Compare operator="EQUAL">
                                                          <GetPropertyValue>
                                                            <DecisionTreeVar name="Al" />
                                                            <Property name="expr_value" />
                                                          </GetPropertyValue>
                                                          <GetPropertyValue>
                                                            <GetByCondition varName="L">
                                                              <LogicalAnd>
                                                                <CheckClass>
                                                                  <Variable name="L" />
                                                                  <Class name="conditional_loop" />
                                                                </CheckClass>
                                                                <Compare operator="EQUAL">
                                                                  <Variable name="L" />
                                                                  <DecisionTreeVar name="L" />
                                                                </Compare>
                                                              </LogicalAnd>
                                                            </GetByCondition>
                                                            <Property name="continues_on_true_condition" />
                                                          </GetPropertyValue>
                                                        </Compare>
                                                      </Expression>
                                                      <Outcome value="False">
                                                        <BranchResultNode _alias="LoopNoEndOnFalseCond: Цикл не может продолжиться, т.к. его условие ложно" value="false" _errorNode="LoopNoEndOnFalseCond" _explanation="Цикл не может продолжиться, т.к. его условие ложно" />
                                                      </Outcome>
                                                      <Outcome value="True">
                                                        <QuestionNode _alias="Является ли цикл &lt;b&gt;L &lt;/b&gt;циклом с пост&lt;b&gt;-&lt;/b&gt;переходом ?" type="bool" isSwitch="false">
                                                          <Expression>
                                                            <CheckClass>
                                                              <DecisionTreeVar name="L" />
                                                              <Class name="post_update_loop" />
                                                            </CheckClass>
                                                          </Expression>
                                                          <Outcome value="False">
                                                            <BranchResultNode _alias="&lt;b&gt;A&lt;/b&gt;" value="true" />
                                                          </Outcome>
                                                          <Outcome value="True">
                                                            <QuestionNode _alias="Является ли тело цикла &lt;b&gt;L&lt;/b&gt; пустым?" type="bool" isSwitch="false">
                                                              <Expression>
                                                                <LogicalNot>
                                                                  <ExistenceQuantifier varName="n">
                                                                    <CheckClass>
                                                                      <Variable name="n" />
                                                                      <Class name="sequence" />
                                                                    </CheckClass>
                                                                    <CheckRelationship>
                                                                      <Relationship name="body" />
                                                                      <DecisionTreeVar name="L" />
                                                                      <Variable name="n" />
                                                                    </CheckRelationship>
                                                                  </ExistenceQuantifier>
                                                                </LogicalNot>
                                                              </Expression>
                                                              <Outcome value="False">
                                                                <BranchResultNode _alias="LoopUpdateBeforeIter: Выполнять переход ${class('L','р')} рано, т.к. итерация цикла ещё не выполнена" value="false" _errorNode="LoopUpdateBeforeIter" _explanation="Выполнять переход ${class('L','р')} рано, т.к. итерация цикла ещё не выполнена" />
                                                              </Outcome>
                                                              <Outcome value="True">
                                                                <BranchResultNode _alias="&lt;b&gt;A&lt;/b&gt;" value="true" />
                                                              </Outcome>
                                                            </QuestionNode>
                                                          </Outcome>
                                                        </QuestionNode>
                                                      </Outcome>
                                                    </QuestionNode>
                                                  </Outcome>
                                                  <Outcome value="role_for_parent:loop_update">
                                                    <BranchResultNode _alias="LoopUpdateTwice: Переход ${class('L','р')} не может выполняться два раза подряд без проверки условия цикла" value="false" _errorNode="LoopUpdateTwice" _explanation="Переход ${class('L','р')} не может выполняться два раза подряд без проверки условия цикла" />
                                                  </Outcome>
                                                  <Outcome value="role_for_parent:loop_init">
                                                    <BranchResultNode _alias="LoopUpdateBeforeCond: Переход ${class('L','р')} не может выполняться до проверки условия цикла" value="false" _errorNode="LoopUpdateBeforeCond" _explanation="Переход ${class('L','р')} не может выполняться до проверки условия цикла" />
                                                  </Outcome>
                                                  <Outcome value="role_for_parent:loop_body">
                                                    <QuestionNode _alias="Является ли цикл &lt;b&gt;L&lt;/b&gt; циклом с пред-переходом ?" type="bool" isSwitch="false">
                                                      <Expression>
                                                        <CheckClass>
                                                          <DecisionTreeVar name="L" />
                                                          <Class name="pre_update_loop" />
                                                        </CheckClass>
                                                      </Expression>
                                                      <Outcome value="True">
                                                        <BranchResultNode _alias="LoopUpdateBeforeCond: Переход ${class('L','р')} не может выполняться до проверки условия цикла" value="false" _errorNode="LoopUpdateBeforeCond" _explanation="Переход ${class('L','р')} не может выполняться до проверки условия цикла" />
                                                      </Outcome>
                                                      <Outcome value="False">
                                                        <BranchResultNode _alias="&lt;b&gt;A&lt;/b&gt;" value="true" />
                                                      </Outcome>
                                                    </QuestionNode>
                                                  </Outcome>
                                                </QuestionNode>
                                              </Outcome>
                                            </QuestionNode>
                                          </Outcome>
                                        </FindActionNode>
                                      </Outcome>
                                      <Outcome value="role_for_parent:alt_cond">
                                        <FindActionNode _alias="Найти развилку &lt;b&gt;D&lt;/b&gt; , к которой&lt;b&gt; &lt;/b&gt;принадлежит&lt;b&gt;&lt;br&gt;&lt;/b&gt;условие &lt;b&gt;Y&lt;/b&gt;">
                                          <Expression>
                                            <GetByCondition varName="s">
                                              <LogicalAnd>
                                                <CheckClass>
                                                  <Variable name="s" />
                                                  <Class name="alternative" />
                                                </CheckClass>
                                                <CheckRelationship>
                                                  <Relationship name="branches_item" />
                                                  <Variable name="s" />
                                                  <GetByCondition varName="b">
                                                    <LogicalAnd>
                                                      <CheckClass>
                                                        <Variable name="b" />
                                                        <Class name="alt_branch" />
                                                      </CheckClass>
                                                      <CheckRelationship>
                                                        <Relationship name="cond" />
                                                        <Variable name="b" />
                                                        <DecisionTreeVar name="Y" />
                                                      </CheckRelationship>
                                                    </LogicalAnd>
                                                  </GetByCondition>
                                                </CheckRelationship>
                                              </LogicalAnd>
                                            </GetByCondition>
                                          </Expression>
                                          <DecisionTreeVarDecl name="D" type="alternative" />
                                          <Outcome value="Found">
                                            <QuestionNode _alias="Является ли &lt;b&gt;Al&lt;/b&gt; началом развилки &lt;b&gt;D &lt;/b&gt;?" type="bool" isSwitch="false">
                                              <Expression>
                                                <CheckRelationship>
                                                  <Relationship name="begin_of" />
                                                  <GetByRelationship varName="">
                                                    <DecisionTreeVar name="Al" />
                                                    <Relationship name="executes" />
                                                  </GetByRelationship>
                                                  <DecisionTreeVar name="D" />
                                                </CheckRelationship>
                                              </Expression>
                                              <Outcome value="False">
                                                <QuestionNode _alias="Чем является &lt;b&gt;Al &lt;/b&gt;в развилке &lt;b&gt;S &lt;/b&gt;?" type="enum" isSwitch="false">
                                                  <Expression>
                                                    <GetPropertyValue>
                                                      <DecisionTreeVar name="P" />
                                                      <Property name="has_role" />
                                                    </GetPropertyValue>
                                                  </Expression>
                                                  <Outcome value="role_for_parent:alt_cond">
                                                    <QuestionNode _alias="Проверялось ли условие &lt;b&gt;A &lt;/b&gt;между &lt;b&gt;B&lt;/b&gt; и&lt;b&gt; Al &lt;/b&gt;?" type="bool" isSwitch="false">
                                                      <Expression>
                                                        <ExistenceQuantifier varName="ca">
                                                          <LogicalAnd>
                                                            <CheckClass>
                                                              <Variable name="ca" />
                                                              <Class name="act" />
                                                            </CheckClass>
                                                            <CheckRelationship>
                                                              <Relationship name="end_of" />
                                                              <GetByRelationship varName="">
                                                                <Variable name="ca" />
                                                                <Relationship name="executes" />
                                                              </GetByRelationship>
                                                              <DecisionTreeVar name="Y" />
                                                            </CheckRelationship>
                                                          </LogicalAnd>
                                                          <LogicalAnd>
                                                            <Compare operator="LESS">
                                                              <GetPropertyValue>
                                                                <GetByCondition varName="bb">
                                                                  <LogicalAnd>
                                                                    <CheckClass>
                                                                      <Variable name="bb" />
                                                                      <Class name="act" />
                                                                    </CheckClass>
                                                                    <CheckRelationship>
                                                                      <Relationship name="student_parent_of" />
                                                                      <Variable name="bb" />
                                                                      <DecisionTreeVar name="Al" />
                                                                    </CheckRelationship>
                                                                  </LogicalAnd>
                                                                </GetByCondition>
                                                                <Property name="student_index" />
                                                              </GetPropertyValue>
                                                              <GetPropertyValue>
                                                                <Variable name="ca" />
                                                                <Property name="student_index" />
                                                              </GetPropertyValue>
                                                            </Compare>
                                                            <Compare operator="LE">
                                                              <GetPropertyValue>
                                                                <Variable name="ca" />
                                                                <Property name="student_index" />
                                                              </GetPropertyValue>
                                                              <GetPropertyValue>
                                                                <DecisionTreeVar name="Al" />
                                                                <Property name="student_index" />
                                                              </GetPropertyValue>
                                                            </Compare>
                                                          </LogicalAnd>
                                                        </ExistenceQuantifier>
                                                      </Expression>
                                                      <Outcome value="True">
                                                        <BranchResultNode _alias="AltCondDup: Условие Y не может выполняться дважды в рамках развилки B" value="false" _errorNode="AltCondDup" _explanation="Условие Y не может выполняться дважды в рамках развилки B" />
                                                      </Outcome>
                                                      <Outcome value="False">
                                                        <QuestionNode _alias="Каково значение условия &lt;b&gt;Al&lt;/b&gt; ? &lt;br&gt;[plain field]" type="bool" isSwitch="false">
                                                          <Expression>
                                                            <GetPropertyValue>
                                                              <DecisionTreeVar name="Al" />
                                                              <Property name="expr_value" />
                                                            </GetPropertyValue>
                                                          </Expression>
                                                          <Outcome value="True">
                                                            <BranchResultNode _alias="AltCondAfterTrue: Условие Y не может проверяться после обнаружения истинного условия развилки B" value="false" _errorNode="AltCondAfterTrue" _explanation="Условие Y не может проверяться после обнаружения истинного условия развилки B" />
                                                          </Outcome>
                                                          <Outcome value="False">
                                                            <FindActionNode _alias="Найти первое из пропущенных условий &lt;b&gt;M&lt;/b&gt; между &lt;br&gt;&lt;b&gt;А&lt;/b&gt;&lt;b&gt;l&lt;/b&gt; и &lt;b&gt;Y &lt;/b&gt;(после &lt;b&gt;А&lt;/b&gt;&lt;b&gt;l&lt;/b&gt; и до &lt;b&gt;Y&lt;/b&gt;)&lt;b&gt;&lt;br&gt;&lt;/b&gt;">
                                                              <Expression>
                                                                <GetByCondition varName="M">
                                                                  <LogicalAnd>
                                                                    <LogicalAnd>
                                                                      <LogicalAnd>
                                                                        <CheckClass>
                                                                          <Variable name="M" />
                                                                          <Class name="expr" />
                                                                        </CheckClass>
                                                                        <CheckRelationship>
                                                                          <Relationship name="parent_of" />
                                                                          <DecisionTreeVar name="B" />
                                                                          <Variable name="M" />
                                                                        </CheckRelationship>
                                                                      </LogicalAnd>
                                                                      <CheckRelationship>
                                                                        <Relationship name="next" />
                                                                        <DecisionTreeVar name="P" />
                                                                        <Variable name="M" />
                                                                      </CheckRelationship>
                                                                    </LogicalAnd>
                                                                    <Compare operator="LESS">
                                                                      <GetPropertyValue>
                                                                        <GetByCondition varName="b">
                                                                          <LogicalAnd>
                                                                            <CheckClass>
                                                                              <Variable name="b" />
                                                                              <Class name="else-if" />
                                                                            </CheckClass>
                                                                            <CheckRelationship>
                                                                              <Relationship name="cond" />
                                                                              <Variable name="b" />
                                                                              <Variable name="M" />
                                                                            </CheckRelationship>
                                                                          </LogicalAnd>
                                                                        </GetByCondition>
                                                                        <Property name="item_index" />
                                                                      </GetPropertyValue>
                                                                      <GetPropertyValue>
                                                                        <GetByCondition varName="b">
                                                                          <LogicalAnd>
                                                                            <CheckClass>
                                                                              <Variable name="b" />
                                                                              <Class name="else-if" />
                                                                            </CheckClass>
                                                                            <CheckRelationship>
                                                                              <Relationship name="cond" />
                                                                              <Variable name="b" />
                                                                              <DecisionTreeVar name="Y" />
                                                                            </CheckRelationship>
                                                                          </LogicalAnd>
                                                                        </GetByCondition>
                                                                        <Property name="item_index" />
                                                                      </GetPropertyValue>
                                                                    </Compare>
                                                                  </LogicalAnd>
                                                                </GetByCondition>
                                                              </Expression>
                                                              <DecisionTreeVarDecl name="M" type="expr" />
                                                              <Outcome value="Found">
                                                                <BranchResultNode _alias="AltCondSkip: Условие Y выполнять рано — пропущено условие &lt;b&gt;M&lt;/b&gt; развилки B" value="false" _errorNode="AltCondSkip" _explanation="Условие Y выполнять рано — пропущено условие ${val('M','и')} развилки B" />
                                                              </Outcome>
                                                              <Outcome value="Not found">
                                                                <BranchResultNode _alias="&lt;b&gt;A&lt;/b&gt;" value="true" />
                                                              </Outcome>
                                                            </FindActionNode>
                                                          </Outcome>
                                                        </QuestionNode>
                                                      </Outcome>
                                                    </QuestionNode>
                                                  </Outcome>
                                                  <Outcome value="role_for_parent:alt_branch">
                                                    <BranchResultNode _alias="AltCondAfterBranch: Условие Y не может проверяться после выполнения ветки развилки B" value="false" _errorNode="AltCondAfterBranch" _explanation="Условие Y не может проверяться после выполнения ветки развилки B" />
                                                  </Outcome>
                                                </QuestionNode>
                                              </Outcome>
                                              <Outcome value="True">
                                                <QuestionNode _alias="Относится ли &lt;b&gt;A&lt;/b&gt; к ветке if (первое условие) ?" type="bool" isSwitch="false">
                                                  <Expression>
                                                    <CheckClass>
                                                      <GetByCondition varName="b">
                                                        <LogicalAnd>
                                                          <CheckClass>
                                                            <Variable name="b" />
                                                            <Class name="alt_branch" />
                                                          </CheckClass>
                                                          <CheckRelationship>
                                                            <Relationship name="cond" />
                                                            <Variable name="b" />
                                                            <DecisionTreeVar name="Y" />
                                                          </CheckRelationship>
                                                        </LogicalAnd>
                                                      </GetByCondition>
                                                      <Class name="if" />
                                                    </CheckClass>
                                                  </Expression>
                                                  <Outcome value="True">
                                                    <BranchResultNode _alias="&lt;b&gt;A&lt;/b&gt;" value="true" />
                                                  </Outcome>
                                                  <Outcome value="False">
                                                    <FindActionNode _alias="Найти первое условие M развилки B">
                                                      <Expression>
                                                        <GetByCondition varName="M">
                                                          <LogicalAnd>
                                                            <LogicalAnd>
                                                              <CheckClass>
                                                                <Variable name="M" />
                                                                <Class name="expr" />
                                                              </CheckClass>
                                                              <CheckRelationship>
                                                                <Relationship name="parent_of" />
                                                                <DecisionTreeVar name="B" />
                                                                <Variable name="M" />
                                                              </CheckRelationship>
                                                            </LogicalAnd>
                                                            <ExistenceQuantifier varName="bi">
                                                              <LogicalAnd>
                                                                <CheckClass>
                                                                  <Variable name="bi" />
                                                                  <Class name="if" />
                                                                </CheckClass>
                                                                <CheckRelationship>
                                                                  <Relationship name="parent_of" />
                                                                  <DecisionTreeVar name="B" />
                                                                  <Variable name="bi" />
                                                                </CheckRelationship>
                                                              </LogicalAnd>
                                                              <CheckRelationship>
                                                                <Relationship name="cond" />
                                                                <Variable name="bi" />
                                                                <Variable name="M" />
                                                              </CheckRelationship>
                                                            </ExistenceQuantifier>
                                                          </LogicalAnd>
                                                        </GetByCondition>
                                                      </Expression>
                                                      <DecisionTreeVarDecl name="M" type="expr" />
                                                      <Outcome value="Found">
                                                        <BranchResultNode _alias="AltCondSkip: Условие Y выполнять рано — пропущено условие &lt;b&gt;M&lt;/b&gt; развилки B" value="false" _errorNode="AltCondSkip" _explanation="Условие Y выполнять рано — пропущено условие ${val('M','и')} развилки B" />
                                                      </Outcome>
                                                    </FindActionNode>
                                                  </Outcome>
                                                </QuestionNode>
                                              </Outcome>
                                            </QuestionNode>
                                          </Outcome>
                                        </FindActionNode>
                                      </Outcome>
                                      <Outcome value="role_for_parent:sequence_element">
                                        <FindActionNode _alias="Найти следование &lt;b&gt;S&lt;/b&gt; , к которому&lt;b&gt; &lt;/b&gt;принадлежит действие &lt;b&gt;Y&lt;/b&gt;">
                                          <Expression>
                                            <GetByCondition varName="S">
                                              <LogicalAnd>
                                                <CheckClass>
                                                  <Variable name="S" />
                                                  <Class name="sequence" />
                                                </CheckClass>
                                                <CheckRelationship>
                                                  <Relationship name="body_item" />
                                                  <Variable name="S" />
                                                  <DecisionTreeVar name="Y" />
                                                </CheckRelationship>
                                              </LogicalAnd>
                                            </GetByCondition>
                                          </Expression>
                                          <DecisionTreeVarDecl name="S" type="sequence" />
                                          <Outcome value="Found">
                                            <LogicAggregationNode _alias="AND" operator="and">
                                              <ThoughtBranch type="bool">
                                                <FindActionNode _alias="Найти первое из пропущенных действий &lt;b&gt;M&lt;/b&gt; между действиями &lt;br&gt;&lt;b&gt;Аl&lt;/b&gt; и &lt;b&gt;Y &lt;/b&gt;(после &lt;b&gt;Аl&lt;/b&gt; и до &lt;b&gt;Y&lt;/b&gt;) ...">
                                                  <Expression>
                                                    <GetByCondition varName="M">
                                                      <LogicalAnd>
                                                        <LogicalAnd>
                                                          <LogicalAnd>
                                                            <CheckClass>
                                                              <Variable name="M" />
                                                              <Class name="action" />
                                                            </CheckClass>
                                                            <CheckRelationship>
                                                              <Relationship name="body_item" />
                                                              <DecisionTreeVar name="B" />
                                                              <Variable name="M" />
                                                            </CheckRelationship>
                                                          </LogicalAnd>
                                                          <Compare operator="LESS">
                                                            <GetPropertyValue>
                                                              <Variable name="M" />
                                                              <Property name="item_index" />
                                                            </GetPropertyValue>
                                                            <GetPropertyValue>
                                                              <DecisionTreeVar name="Y" />
                                                              <Property name="item_index" />
                                                            </GetPropertyValue>
                                                          </Compare>
                                                        </LogicalAnd>
                                                        <LogicalOr>
                                                          <LogicalAnd>
                                                            <CheckRelationship>
                                                              <Relationship name="body_item" />
                                                              <DecisionTreeVar name="B" />
                                                              <DecisionTreeVar name="P" />
                                                            </CheckRelationship>
                                                            <CheckRelationship>
                                                              <Relationship name="next" />
                                                              <DecisionTreeVar name="P" />
                                                              <Variable name="M" />
                                                            </CheckRelationship>
                                                          </LogicalAnd>
                                                          <LogicalAnd>
                                                            <Compare operator="EQUAL">
                                                              <DecisionTreeVar name="B" />
                                                              <DecisionTreeVar name="P" />
                                                            </Compare>
                                                            <Compare operator="EQUAL">
                                                              <GetPropertyValue>
                                                                <Variable name="M" />
                                                                <Property name="item_index" />
                                                              </GetPropertyValue>
                                                              <Integer value="0" />
                                                            </Compare>
                                                          </LogicalAnd>
                                                        </LogicalOr>
                                                      </LogicalAnd>
                                                    </GetByCondition>
                                                  </Expression>
                                                  <DecisionTreeVarDecl name="M" type="action" />
                                                  <Outcome value="Not found">
                                                    <BranchResultNode _alias="&lt;b&gt;A&lt;/b&gt; [skipped nothing]" value="true" />
                                                  </Outcome>
                                                  <Outcome value="Found">
                                                    <BranchResultNode _alias="SeqElemSkip: Действие $Y не может выполняться раньше, чем действие &lt;b&gt;M&lt;/b&gt; %(B,р)" value="false" _errorNode="SeqElemSkip" _explanation="Действие ${val('Y','и')} не может выполняться раньше, чем ${class('M','и')} ${val('M','и')} ${class('B','р')} ${val('B','и')}" />
                                                  </Outcome>
                                                </FindActionNode>
                                              </ThoughtBranch>
                                              <Outcome value="True">
                                                <BranchResultNode _alias="&lt;b&gt;A&lt;/b&gt;" value="true" />
                                              </Outcome>
                                              <Outcome value="False">
                                                <BranchResultNode _alias="(Действие &lt;b&gt;Y&lt;/b&gt; не может быть следующим)" value="false" />
                                              </Outcome>
                                              <ThoughtBranch type="bool">
                                                <QuestionNode _alias="Является ли &lt;b&gt;Al&lt;/b&gt; началом следования &lt;b&gt;S&lt;/b&gt; ?" type="bool" isSwitch="false">
                                                  <Expression>
                                                    <CheckRelationship>
                                                      <Relationship name="begin_of" />
                                                      <GetByRelationship varName="">
                                                        <DecisionTreeVar name="Al" />
                                                        <Relationship name="executes" />
                                                      </GetByRelationship>
                                                      <DecisionTreeVar name="S" />
                                                    </CheckRelationship>
                                                  </Expression>
                                                  <Outcome value="False">
                                                    <QuestionNode _alias="выполнялся ли (уже) акт &lt;b&gt;А&lt;/b&gt; между началом&amp;nbsp;&lt;b&gt;B&lt;/b&gt; и &lt;b&gt;Al&lt;/b&gt; &#10;(Позиция действия &lt;b&gt;Y&lt;/b&gt; &lt;= позиции &lt;b&gt;P&lt;/b&gt;) ?" type="bool" isSwitch="false">
                                                      <Expression>
                                                        <Compare operator="LE">
                                                          <GetPropertyValue>
                                                            <DecisionTreeVar name="Y" />
                                                            <Property name="item_index" />
                                                          </GetPropertyValue>
                                                          <GetPropertyValue>
                                                            <DecisionTreeVar name="P" />
                                                            <Property name="item_index" />
                                                          </GetPropertyValue>
                                                        </Compare>
                                                      </Expression>
                                                      <Outcome value="False">
                                                        <BranchResultNode _alias="&lt;b&gt;A&lt;/b&gt; [not a duplicate]" value="true" />
                                                      </Outcome>
                                                      <Outcome value="True">
                                                        <BranchResultNode _alias="SeqElemDup: %Y не может выполняться дважды в рамках %(B,р)" value="false" _errorNode="SeqElemDup" _explanation="${class('Y','и')} ${val('Y','и')} не может выполняться дважды в рамках ${class('B','р')} ${val('B','и')}" />
                                                      </Outcome>
                                                    </QuestionNode>
                                                  </Outcome>
                                                  <Outcome value="True">
                                                    <BranchResultNode _alias="&lt;b&gt;A&lt;/b&gt; [sequence's just begun]" value="true" />
                                                  </Outcome>
                                                </QuestionNode>
                                              </ThoughtBranch>
                                            </LogicAggregationNode>
                                          </Outcome>
                                        </FindActionNode>
                                      </Outcome>
                                      <Outcome value="role_for_parent:loop_init">
                                        <FindActionNode _alias="Найти цикл &lt;b&gt;L&lt;/b&gt; , к которому&lt;b&gt; &lt;/b&gt;принадлежит&lt;b&gt;&lt;br&gt;&lt;/b&gt;инициализация &lt;b&gt;Y&lt;/b&gt;">
                                          <Expression>
                                            <GetByCondition varName="L">
                                              <LogicalAnd>
                                                <CheckClass>
                                                  <Variable name="L" />
                                                  <Class name="loop" />
                                                </CheckClass>
                                                <CheckRelationship>
                                                  <Relationship name="init" />
                                                  <Variable name="L" />
                                                  <DecisionTreeVar name="Y" />
                                                </CheckRelationship>
                                              </LogicalAnd>
                                            </GetByCondition>
                                          </Expression>
                                          <DecisionTreeVarDecl name="L" type="loop" />
                                          <Outcome value="Found">
                                            <QuestionNode _alias="Является ли &lt;b&gt;Al&lt;/b&gt; началом цикла &lt;b&gt;L &lt;/b&gt; ?" type="bool" isSwitch="false">
                                              <Expression>
                                                <CheckRelationship>
                                                  <Relationship name="begin_of" />
                                                  <GetByRelationship varName="">
                                                    <DecisionTreeVar name="Al" />
                                                    <Relationship name="executes" />
                                                  </GetByRelationship>
                                                  <DecisionTreeVar name="L" />
                                                </CheckRelationship>
                                              </Expression>
                                              <Outcome value="False">
                                                <BranchResultNode _alias="LoopInitDup: Инициализация не может выполняться дважды в рамках цикла $L" value="false" _errorNode="LoopInitDup" _explanation="Инициализация не может выполняться дважды в рамках цикла ${val('L','и')}" />
                                              </Outcome>
                                              <Outcome value="True">
                                                <BranchResultNode _alias="&lt;b&gt;A&lt;/b&gt;" value="true" />
                                              </Outcome>
                                            </QuestionNode>
                                          </Outcome>
                                        </FindActionNode>
                                      </Outcome>
                                    </QuestionNode>
                                  </Outcome>
                                  <Outcome value="act_kind:begin">
                                    <QuestionNode _alias="Чем является &lt;b&gt;Y&lt;/b&gt; ? [begin]" type="enum" isSwitch="false">
                                      <Expression>
                                        <GetPropertyValue>
                                          <DecisionTreeVar name="Y" />
                                          <Property name="has_role" />
                                        </GetPropertyValue>
                                      </Expression>
                                      <Outcome value="role_for_parent:loop_body">
                                        <FindActionNode _alias="Найти цикл &lt;b&gt;L&lt;/b&gt; , к которому&lt;b&gt; &lt;/b&gt;принадлежит&lt;b&gt;&lt;br&gt;&lt;/b&gt;тело &lt;b&gt;Y&lt;/b&gt;">
                                          <Expression>
                                            <GetByCondition varName="L">
                                              <LogicalAnd>
                                                <CheckClass>
                                                  <Variable name="L" />
                                                  <Class name="conditional_loop" />
                                                </CheckClass>
                                                <CheckRelationship>
                                                  <Relationship name="body" />
                                                  <Variable name="L" />
                                                  <DecisionTreeVar name="Y" />
                                                </CheckRelationship>
                                              </LogicalAnd>
                                            </GetByCondition>
                                          </Expression>
                                          <DecisionTreeVarDecl name="L" type="conditional_loop" />
                                          <Outcome value="Found">
                                            <QuestionNode _alias="Является ли цикл &lt;b&gt;L &lt;/b&gt;циклом с пост&lt;b&gt;-&lt;/b&gt;условием ?" type="bool" isSwitch="false">
                                              <Expression>
                                                <CheckClass>
                                                  <DecisionTreeVar name="L" />
                                                  <Class name="loop_with_post_condition" />
                                                </CheckClass>
                                              </Expression>
                                              <Outcome value="True">
                                                <QuestionNode _alias="Является ли&lt;b style=&quot;border-color: var(--border-color);&quot;&gt;&amp;nbsp;Al&lt;/b&gt;&amp;nbsp; началом цикла&amp;nbsp;&lt;b&gt;L &lt;/b&gt;?" type="bool" isSwitch="false">
                                                  <Expression>
                                                    <CheckRelationship>
                                                      <Relationship name="begin_of" />
                                                      <GetByRelationship varName="">
                                                        <DecisionTreeVar name="Al" />
                                                        <Relationship name="executes" />
                                                      </GetByRelationship>
                                                      <DecisionTreeVar name="L" />
                                                    </CheckRelationship>
                                                  </Expression>
                                                  <Outcome value="False">
                                                    <QuestionNode _alias="Является ли&lt;b style=&quot;border-color: var(--border-color);&quot;&gt;&amp;nbsp;Al&lt;/b&gt;&amp;nbsp; условием цикла&amp;nbsp;&lt;b&gt;L &lt;/b&gt;?" type="bool" isSwitch="false">
                                                      <Expression>
                                                        <Compare operator="EQUAL">
                                                          <DecisionTreeVar name="P" />
                                                          <GetByRelationship varName="">
                                                            <DecisionTreeVar name="L" />
                                                            <Relationship name="cond" />
                                                          </GetByRelationship>
                                                        </Compare>
                                                      </Expression>
                                                      <Outcome value="True">
                                                        <QuestionNode _alias="Условие  &lt;b&gt;Al&lt;/b&gt;  позволяет продолжать цикл&lt;b&gt; &lt;/b&gt;?" type="bool" isSwitch="false">
                                                          <Expression>
                                                            <Compare operator="EQUAL">
                                                              <GetPropertyValue>
                                                                <DecisionTreeVar name="Al" />
                                                                <Property name="expr_value" />
                                                              </GetPropertyValue>
                                                              <GetPropertyValue>
                                                                <GetByCondition varName="L">
                                                                  <LogicalAnd>
                                                                    <CheckClass>
                                                                      <Variable name="L" />
                                                                      <Class name="conditional_loop" />
                                                                    </CheckClass>
                                                                    <Compare operator="EQUAL">
                                                                      <Variable name="L" />
                                                                      <DecisionTreeVar name="L" />
                                                                    </Compare>
                                                                  </LogicalAnd>
                                                                </GetByCondition>
                                                                <Property name="continues_on_true_condition" />
                                                              </GetPropertyValue>
                                                            </Compare>
                                                          </Expression>
                                                          <Outcome value="True">
                                                            <BranchResultNode _alias="&lt;b&gt;A&lt;/b&gt;" value="true" />
                                                          </Outcome>
                                                          <Outcome value="False">
                                                            <BranchResultNode _alias="LoopIterOnFailedCond: Итерация %(L,р) не может начаться при текущем значении условия цикла" value="false" _errorNode="LoopIterOnFailedCond" _explanation="Итерация ${class('L','р')} ${val('L','и')} не может начаться при текущем значении условия цикла" />
                                                          </Outcome>
                                                        </QuestionNode>
                                                      </Outcome>
                                                      <Outcome value="False">
                                                        <QuestionNode _alias="Содержит ли цикл L непустое условие C ?" type="bool" isSwitch="false">
                                                          <Expression>
                                                            <ExistenceQuantifier varName="n">
                                                              <CheckClass>
                                                                <Variable name="n" />
                                                                <Class name="expr" />
                                                              </CheckClass>
                                                              <CheckRelationship>
                                                                <Relationship name="cond" />
                                                                <DecisionTreeVar name="L" />
                                                                <Variable name="n" />
                                                              </CheckRelationship>
                                                            </ExistenceQuantifier>
                                                          </Expression>
                                                          <Outcome value="True">
                                                            <BranchResultNode _alias="PostCondLoopNoCondBtwIters: Итерация цикла $L не может начаться повторно без проверки условия цикла" value="false" _errorNode="PostCondLoopNoCondBtwIters" _explanation="Итерация цикла ${val('L','и')} не может начаться повторно без проверки условия цикла" />
                                                          </Outcome>
                                                          <Outcome value="False">
                                                            <BranchResultNode _alias="&lt;b&gt;A&lt;/b&gt;" value="true" />
                                                          </Outcome>
                                                        </QuestionNode>
                                                      </Outcome>
                                                    </QuestionNode>
                                                  </Outcome>
                                                  <Outcome value="True">
                                                    <BranchResultNode _alias="&lt;b&gt;A&lt;/b&gt;" value="true" />
                                                  </Outcome>
                                                </QuestionNode>
                                              </Outcome>
                                              <Outcome value="False">
                                                <QuestionNode _alias="Является ли &lt;b&gt;Al&lt;/b&gt;  началом цикла &lt;b&gt;L&lt;/b&gt; ?" type="bool" isSwitch="false">
                                                  <Expression>
                                                    <CheckRelationship>
                                                      <Relationship name="begin_of" />
                                                      <GetByRelationship varName="">
                                                        <DecisionTreeVar name="Al" />
                                                        <Relationship name="executes" />
                                                      </GetByRelationship>
                                                      <DecisionTreeVar name="L" />
                                                    </CheckRelationship>
                                                  </Expression>
                                                  <Outcome value="False">
                                                    <QuestionNode _alias="Чем является &lt;b&gt;Al &lt;/b&gt;в цикле &lt;b&gt;L &lt;/b&gt;?" type="enum" isSwitch="false">
                                                      <Expression>
                                                        <GetPropertyValue>
                                                          <DecisionTreeVar name="P" />
                                                          <Property name="has_role" />
                                                        </GetPropertyValue>
                                                      </Expression>
                                                      <Outcome value="role_for_parent:loop_cond">
                                                        <QuestionNode _alias="Условие  &lt;b&gt;Al&lt;/b&gt;  позволяет продолжать цикл&lt;b&gt; &lt;/b&gt;?" type="bool" isSwitch="false">
                                                          <Expression>
                                                            <Compare operator="EQUAL">
                                                              <GetPropertyValue>
                                                                <DecisionTreeVar name="Al" />
                                                                <Property name="expr_value" />
                                                              </GetPropertyValue>
                                                              <GetPropertyValue>
                                                                <DecisionTreeVar name="L" />
                                                                <Property name="continues_on_true_condition" />
                                                              </GetPropertyValue>
                                                            </Compare>
                                                          </Expression>
                                                          <Outcome value="True">
                                                            <BranchResultNode _alias="&lt;b&gt;A&lt;/b&gt;" value="true" />
                                                          </Outcome>
                                                          <Outcome value="False">
                                                            <BranchResultNode _alias="LoopIterOnFailedCond: Итерация %(L,р) не может начаться при текущем значении условия цикла" value="false" _errorNode="LoopIterOnFailedCond" _explanation="Итерация ${class('L','р')} ${val('L','и')} не может начаться при текущем значении условия цикла" />
                                                          </Outcome>
                                                        </QuestionNode>
                                                      </Outcome>
                                                      <Outcome value="role_for_parent:loop_update">
                                                        <QuestionNode _alias="Является ли цикл &lt;b&gt;L&lt;/b&gt; циклом с пред&lt;b&gt;-&lt;/b&gt;переходом ?" type="bool" isSwitch="false">
                                                          <Expression>
                                                            <LogicalAnd>
                                                              <CheckClass>
                                                                <DecisionTreeVar name="L" />
                                                                <Class name="pre_update_loop" />
                                                              </CheckClass>
                                                              <ExistenceQuantifier varName="n">
                                                                <CheckClass>
                                                                  <Variable name="n" />
                                                                  <Class name="stmt" />
                                                                </CheckClass>
                                                                <CheckRelationship>
                                                                  <Relationship name="update" />
                                                                  <DecisionTreeVar name="L" />
                                                                  <Variable name="n" />
                                                                </CheckRelationship>
                                                              </ExistenceQuantifier>
                                                            </LogicalAnd>
                                                          </Expression>
                                                          <Outcome value="True">
                                                            <BranchResultNode _alias="&lt;b&gt;A&lt;/b&gt;" value="true" />
                                                          </Outcome>
                                                          <Outcome value="False">
                                                            <BranchResultNode _alias="LoopIterBeforeCond: Итерация цикла $L не может начаться без проверки условия цикла" value="false" _errorNode="LoopIterBeforeCond" _explanation="Итерация цикла ${val('L','и')} не может начаться без проверки условия цикла" />
                                                          </Outcome>
                                                        </QuestionNode>
                                                      </Outcome>
                                                      <Outcome value="role_for_parent:loop_init">
                                                        <BranchResultNode _alias="LoopIterBeforeCond: Итерация цикла $L не может начаться без проверки условия цикла" value="false" _errorNode="LoopIterBeforeCond" _explanation="Итерация цикла ${val('L','и')} не может начаться без проверки условия цикла" />
                                                      </Outcome>
                                                      <Outcome value="role_for_parent:loop_body">
                                                        <QuestionNode _alias="Содержит ли цикл L непустое условие ?" type="bool" isSwitch="false">
                                                          <Expression>
                                                            <ExistenceQuantifier varName="n">
                                                              <CheckClass>
                                                                <Variable name="n" />
                                                                <Class name="expr" />
                                                              </CheckClass>
                                                              <CheckRelationship>
                                                                <Relationship name="cond" />
                                                                <DecisionTreeVar name="L" />
                                                                <Variable name="n" />
                                                              </CheckRelationship>
                                                            </ExistenceQuantifier>
                                                          </Expression>
                                                          <Outcome value="True">
                                                            <BranchResultNode _alias="LoopIterBeforeCond: Итерация цикла $L не может начаться без проверки условия цикла" value="false" _errorNode="LoopIterBeforeCond" _explanation="Итерация цикла ${val('L','и')} не может начаться без проверки условия цикла" />
                                                          </Outcome>
                                                          <Outcome value="False">
                                                            <QuestionNode _alias="Является ли цикл &lt;b&gt;L&lt;/b&gt; циклом с непустым переходом ?" type="bool" isSwitch="false">
                                                              <Expression>
                                                                <LogicalAnd>
                                                                  <CheckClass>
                                                                    <DecisionTreeVar name="L" />
                                                                    <Class name="loop_with_initialization" />
                                                                  </CheckClass>
                                                                  <ExistenceQuantifier varName="n">
                                                                    <CheckClass>
                                                                      <Variable name="n" />
                                                                      <Class name="stmt" />
                                                                    </CheckClass>
                                                                    <CheckRelationship>
                                                                      <Relationship name="update" />
                                                                      <DecisionTreeVar name="L" />
                                                                      <Variable name="n" />
                                                                    </CheckRelationship>
                                                                  </ExistenceQuantifier>
                                                                </LogicalAnd>
                                                              </Expression>
                                                              <Outcome value="False">
                                                                <BranchResultNode _alias="&lt;b&gt;A&lt;/b&gt;" value="true" />
                                                              </Outcome>
                                                              <Outcome value="True">
                                                                <BranchResultNode _alias="PreUpdateLoopIterBeforeUpdate: Итерация %(L,р) не может начаться без выполнения перехода цикла" value="false" _errorNode="PreUpdateLoopIterBeforeUpdate" _explanation="Итерация ${class('L','р')} ${val('L','и')} не может начаться без выполнения перехода цикла" />
                                                              </Outcome>
                                                            </QuestionNode>
                                                          </Outcome>
                                                        </QuestionNode>
                                                      </Outcome>
                                                    </QuestionNode>
                                                  </Outcome>
                                                  <Outcome value="True">
                                                    <BranchResultNode _alias="LoopIterBeforeCond: Итерация цикла $L не может начаться без проверки условия цикла" value="false" _errorNode="LoopIterBeforeCond" _explanation="Итерация цикла ${val('L','и')} не может начаться без проверки условия цикла" />
                                                  </Outcome>
                                                </QuestionNode>
                                              </Outcome>
                                            </QuestionNode>
                                          </Outcome>
                                        </FindActionNode>
                                      </Outcome>
                                      <Outcome value="role_for_parent:alt_branch">
                                        <FindActionNode _alias="Найти развилку &lt;b&gt;D&lt;/b&gt; , к которой&lt;b&gt; &lt;/b&gt;принадлежит&lt;b&gt;&lt;br&gt;&lt;/b&gt;ветка &lt;b&gt;Y&lt;/b&gt;">
                                          <Expression>
                                            <GetByCondition varName="S">
                                              <LogicalAnd>
                                                <CheckClass>
                                                  <Variable name="S" />
                                                  <Class name="alternative" />
                                                </CheckClass>
                                                <CheckRelationship>
                                                  <Relationship name="branches_item" />
                                                  <Variable name="S" />
                                                  <DecisionTreeVar name="Y" />
                                                </CheckRelationship>
                                              </LogicalAnd>
                                            </GetByCondition>
                                          </Expression>
                                          <DecisionTreeVarDecl name="D" type="alternative" />
                                          <Outcome value="Found">
                                            <QuestionNode _alias="Является ли &lt;b&gt;Al&lt;/b&gt; началом развилки &lt;b&gt;D &lt;/b&gt;?" type="bool" isSwitch="false">
                                              <Expression>
                                                <CheckRelationship>
                                                  <Relationship name="begin_of" />
                                                  <GetByRelationship varName="">
                                                    <DecisionTreeVar name="Al" />
                                                    <Relationship name="executes" />
                                                  </GetByRelationship>
                                                  <DecisionTreeVar name="D" />
                                                </CheckRelationship>
                                              </Expression>
                                              <Outcome value="False">
                                                <QuestionNode _alias="Чем является &lt;b&gt;Al &lt;/b&gt;в развилке &lt;b&gt;S &lt;/b&gt;?" type="enum" isSwitch="false">
                                                  <Expression>
                                                    <GetPropertyValue>
                                                      <DecisionTreeVar name="P" />
                                                      <Property name="has_role" />
                                                    </GetPropertyValue>
                                                  </Expression>
                                                  <Outcome value="role_for_parent:alt_cond">
                                                    <QuestionNode _alias="Является ли &lt;b&gt;Y&lt;/b&gt; веткой &lt;b&gt;else&lt;/b&gt; ?" type="bool" isSwitch="false">
                                                      <Expression>
                                                        <CheckClass>
                                                          <DecisionTreeVar name="Y" />
                                                          <Class name="else" />
                                                        </CheckClass>
                                                      </Expression>
                                                      <Outcome value="True">
                                                        <QuestionNode _alias="Условие&amp;nbsp;&amp;nbsp;&lt;b style=&quot;border-color: var(--border-color);&quot;&gt;A&lt;sub style=&quot;border-color: var(--border-color);&quot;&gt;l&lt;/b&gt;&amp;nbsp; ложно?" type="bool" isSwitch="false">
                                                          <Expression>
                                                            <LogicalNot>
                                                              <GetPropertyValue>
                                                                <DecisionTreeVar name="Al" />
                                                                <Property name="expr_value" />
                                                              </GetPropertyValue>
                                                            </LogicalNot>
                                                          </Expression>
                                                          <Outcome value="True">
                                                            <FindActionNode _alias="Найти первое из пропущенных условий M после Al">
                                                              <Expression>
                                                                <GetByCondition varName="M">
                                                                  <LogicalAnd>
                                                                    <LogicalAnd>
                                                                      <CheckClass>
                                                                        <Variable name="M" />
                                                                        <Class name="expr" />
                                                                      </CheckClass>
                                                                      <CheckRelationship>
                                                                        <Relationship name="parent_of" />
                                                                        <DecisionTreeVar name="B" />
                                                                        <Variable name="M" />
                                                                      </CheckRelationship>
                                                                    </LogicalAnd>
                                                                    <CheckRelationship>
                                                                      <Relationship name="next" />
                                                                      <DecisionTreeVar name="P" />
                                                                      <Variable name="M" />
                                                                    </CheckRelationship>
                                                                  </LogicalAnd>
                                                                </GetByCondition>
                                                              </Expression>
                                                              <DecisionTreeVarDecl name="M" type="expr" />
                                                              <Outcome value="Not found">
                                                                <BranchResultNode _alias="&lt;b&gt;A&lt;/b&gt;" value="true" />
                                                              </Outcome>
                                                              <Outcome value="Found">
                                                                <BranchResultNode _alias="AltEarlyElse: Ветку else начинать рано, т.к. не проверено условие &lt;b&gt;M&lt;/b&gt; развилки $B" value="false" _errorNode="AltEarlyElse" _explanation="Ветку else начинать рано, т.к. не проверено условие ${val('M','и')} развилки ${val('B','и')}" />
                                                              </Outcome>
                                                            </FindActionNode>
                                                          </Outcome>
                                                          <Outcome value="False">
                                                            <BranchResultNode _alias="AltElseOnTrue: Ветка else не может начаться после обнаружения истинного условия развилки $B" value="false" _errorNode="AltElseOnTrue" _explanation="Ветка else не может начаться после обнаружения истинного условия развилки ${val('B','и')}" />
                                                          </Outcome>
                                                        </QuestionNode>
                                                      </Outcome>
                                                      <Outcome value="False">
                                                        <FindActionNode _alias="Найти &lt;b&gt;YC&lt;/b&gt; — условие ветки &lt;b&gt;Y&lt;/b&gt;">
                                                          <Expression>
                                                            <GetByRelationship varName="">
                                                              <DecisionTreeVar name="Y" />
                                                              <Relationship name="cond" />
                                                            </GetByRelationship>
                                                          </Expression>
                                                          <DecisionTreeVarDecl name="YC" type="expr" />
                                                          <Outcome value="Found">
                                                            <FindActionNode _alias="Найти &lt;b&gt;YCa&lt;/b&gt; — акт выполнения условия ветки &lt;b&gt;Y&lt;/b&gt;">
                                                              <Expression>
                                                                <GetByCondition varName="t">
                                                                  <LogicalAnd>
                                                                    <LogicalAnd>
                                                                      <CheckClass>
                                                                        <Variable name="t" />
                                                                        <Class name="act_end" />
                                                                      </CheckClass>
                                                                      <Compare operator="LESS">
                                                                        <GetPropertyValue>
                                                                          <GetByCondition varName="bb">
                                                                            <LogicalAnd>
                                                                              <CheckClass>
                                                                                <Variable name="bb" />
                                                                                <Class name="act" />
                                                                              </CheckClass>
                                                                              <CheckRelationship>
                                                                                <Relationship name="student_parent_of" />
                                                                                <Variable name="bb" />
                                                                                <DecisionTreeVar name="Al" />
                                                                              </CheckRelationship>
                                                                            </LogicalAnd>
                                                                          </GetByCondition>
                                                                          <Property name="student_index" />
                                                                        </GetPropertyValue>
                                                                        <GetPropertyValue>
                                                                          <Variable name="t" />
                                                                          <Property name="student_index" />
                                                                        </GetPropertyValue>
                                                                      </Compare>
                                                                    </LogicalAnd>
                                                                    <CheckRelationship>
                                                                      <Relationship name="boundary_of" />
                                                                      <GetByRelationship varName="">
                                                                        <Variable name="t" />
                                                                        <Relationship name="executes" />
                                                                      </GetByRelationship>
                                                                      <DecisionTreeVar name="YC" />
                                                                    </CheckRelationship>
                                                                  </LogicalAnd>
                                                                </GetByCondition>
                                                              </Expression>
                                                              <DecisionTreeVarDecl name="YCa" type="act_end" />
                                                              <Outcome value="Found">
                                                                <QuestionNode _alias="Условие  &lt;b&gt;YCa&lt;/b&gt;  истинно ?" type="bool" isSwitch="false">
                                                                  <Expression>
                                                                    <GetPropertyValue>
                                                                      <DecisionTreeVar name="YCa" />
                                                                      <Property name="expr_value" />
                                                                    </GetPropertyValue>
                                                                  </Expression>
                                                                  <Outcome value="True">
                                                                    <BranchResultNode _alias="&lt;b&gt;A&lt;/b&gt;" value="true" />
                                                                  </Outcome>
                                                                  <Outcome value="False">
                                                                    <BranchResultNode _alias="AltBranchOnFalse: Ветка развилки не может начаться, т.к. её условие ложно" value="false" _errorNode="AltBranchOnFalse" _explanation="Ветка развилки не может начаться, т.к. её условие ложно" />
                                                                  </Outcome>
                                                                </QuestionNode>
                                                              </Outcome>
                                                              <Outcome value="Not found">
                                                                <BranchResultNode _alias="AltEarlyBranch: Ветку развилки начинать рано, т.к. её условие &lt;b&gt;YC&lt;/b&gt; ещё было не проверено" value="false" _errorNode="AltEarlyBranch" _explanation="Ветку развилки начинать рано, т.к. её условие ${val('YC','и')} ещё было не проверено" />
                                                              </Outcome>
                                                            </FindActionNode>
                                                          </Outcome>
                                                        </FindActionNode>
                                                      </Outcome>
                                                    </QuestionNode>
                                                  </Outcome>
                                                  <Outcome value="role_for_parent:alt_branch">
                                                    <QuestionNode _alias="Является ли ветка Y повторением ?" type="bool" isSwitch="false">
                                                      <Expression>
                                                        <Compare operator="EQUAL">
                                                          <DecisionTreeVar name="Y" />
                                                          <DecisionTreeVar name="P" />
                                                        </Compare>
                                                      </Expression>
                                                      <Outcome value="True">
                                                        <BranchResultNode _alias="AltBranchDup: Ветка развилки не может начаться повторно в рамках развилки $B" value="false" _errorNode="AltBranchDup" _explanation="Ветка развилки не может начаться повторно в рамках развилки ${val('B','и')}" />
                                                      </Outcome>
                                                      <Outcome value="False">
                                                        <BranchResultNode _alias="AltAnotherBranch: Ветка развилки не может начаться после выполнения другой ветки этой развилки" value="false" _errorNode="AltAnotherBranch" _explanation="Ветка развилки не может начаться после выполнения другой ветки этой развилки" />
                                                      </Outcome>
                                                    </QuestionNode>
                                                  </Outcome>
                                                </QuestionNode>
                                              </Outcome>
                                              <Outcome value="True">
                                                <FindActionNode _alias="Найти &lt;b&gt;YC&lt;/b&gt; — условие ветки &lt;b&gt;Y&lt;/b&gt;">
                                                  <Expression>
                                                    <GetByRelationship varName="">
                                                      <DecisionTreeVar name="Y" />
                                                      <Relationship name="cond" />
                                                    </GetByRelationship>
                                                  </Expression>
                                                  <DecisionTreeVarDecl name="YC" type="expr" />
                                                  <Outcome value="Found">
                                                    <FindActionNode _alias="Найти &lt;b&gt;YCa&lt;/b&gt; — акт выполнения условия ветки &lt;b&gt;Y&lt;/b&gt;">
                                                      <Expression>
                                                        <GetByCondition varName="t">
                                                          <LogicalAnd>
                                                            <LogicalAnd>
                                                              <CheckClass>
                                                                <Variable name="t" />
                                                                <Class name="act_end" />
                                                              </CheckClass>
                                                              <Compare operator="LESS">
                                                                <GetPropertyValue>
                                                                  <GetByCondition varName="bb">
                                                                    <LogicalAnd>
                                                                      <CheckClass>
                                                                        <Variable name="bb" />
                                                                        <Class name="act" />
                                                                      </CheckClass>
                                                                      <CheckRelationship>
                                                                        <Relationship name="student_parent_of" />
                                                                        <Variable name="bb" />
                                                                        <DecisionTreeVar name="Al" />
                                                                      </CheckRelationship>
                                                                    </LogicalAnd>
                                                                  </GetByCondition>
                                                                  <Property name="student_index" />
                                                                </GetPropertyValue>
                                                                <GetPropertyValue>
                                                                  <Variable name="t" />
                                                                  <Property name="student_index" />
                                                                </GetPropertyValue>
                                                              </Compare>
                                                            </LogicalAnd>
                                                            <CheckRelationship>
                                                              <Relationship name="boundary_of" />
                                                              <GetByRelationship varName="">
                                                                <Variable name="t" />
                                                                <Relationship name="executes" />
                                                              </GetByRelationship>
                                                              <DecisionTreeVar name="YC" />
                                                            </CheckRelationship>
                                                          </LogicalAnd>
                                                        </GetByCondition>
                                                      </Expression>
                                                      <DecisionTreeVarDecl name="YCa" type="act_end" />
                                                      <Outcome value="Found">
                                                        <QuestionNode _alias="Условие  &lt;b&gt;YCa&lt;/b&gt;  истинно ?" type="bool" isSwitch="false">
                                                          <Expression>
                                                            <GetPropertyValue>
                                                              <DecisionTreeVar name="YCa" />
                                                              <Property name="expr_value" />
                                                            </GetPropertyValue>
                                                          </Expression>
                                                          <Outcome value="True">
                                                            <BranchResultNode _alias="&lt;b&gt;A&lt;/b&gt;" value="true" />
                                                          </Outcome>
                                                          <Outcome value="False">
                                                            <BranchResultNode _alias="AltBranchOnFalse: Ветка развилки не может начаться, т.к. её условие ложно" value="false" _errorNode="AltBranchOnFalse" _explanation="Ветка развилки не может начаться, т.к. её условие ложно" />
                                                          </Outcome>
                                                        </QuestionNode>
                                                      </Outcome>
                                                      <Outcome value="Not found">
                                                        <BranchResultNode _alias="AltEarlyBranch: Ветку развилки начинать рано, т.к. её условие &lt;b&gt;YC&lt;/b&gt; ещё было не проверено" value="false" _errorNode="AltEarlyBranch" _explanation="Ветку развилки начинать рано, т.к. её условие ${val('YC','и')} ещё было не проверено" />
                                                      </Outcome>
                                                    </FindActionNode>
                                                  </Outcome>
                                                </FindActionNode>
                                              </Outcome>
                                            </QuestionNode>
                                          </Outcome>
                                        </FindActionNode>
                                      </Outcome>
                                      <Outcome value="role_for_parent:sequence_element">
                                        <FindActionNode _alias="Найти следование &lt;b&gt;S&lt;/b&gt; , к которому&lt;b&gt; &lt;/b&gt;принадлежит действие &lt;b&gt;Y&lt;/b&gt;">
                                          <Expression>
                                            <GetByCondition varName="S">
                                              <LogicalAnd>
                                                <CheckClass>
                                                  <Variable name="S" />
                                                  <Class name="sequence" />
                                                </CheckClass>
                                                <CheckRelationship>
                                                  <Relationship name="body_item" />
                                                  <Variable name="S" />
                                                  <DecisionTreeVar name="Y" />
                                                </CheckRelationship>
                                              </LogicalAnd>
                                            </GetByCondition>
                                          </Expression>
                                          <DecisionTreeVarDecl name="S" type="sequence" />
                                          <Outcome value="Found">
                                            <LogicAggregationNode _alias="AND" operator="and">
                                              <ThoughtBranch type="bool">
                                                <FindActionNode _alias="Найти первое из пропущенных действий &lt;b&gt;M&lt;/b&gt; между действиями &lt;br&gt;&lt;b&gt;Аl&lt;/b&gt; и &lt;b&gt;Y &lt;/b&gt;(после &lt;b&gt;Аl&lt;/b&gt; и до &lt;b&gt;Y&lt;/b&gt;) ...">
                                                  <Expression>
                                                    <GetByCondition varName="M">
                                                      <LogicalAnd>
                                                        <LogicalAnd>
                                                          <LogicalAnd>
                                                            <CheckClass>
                                                              <Variable name="M" />
                                                              <Class name="action" />
                                                            </CheckClass>
                                                            <CheckRelationship>
                                                              <Relationship name="body_item" />
                                                              <DecisionTreeVar name="B" />
                                                              <Variable name="M" />
                                                            </CheckRelationship>
                                                          </LogicalAnd>
                                                          <Compare operator="LESS">
                                                            <GetPropertyValue>
                                                              <Variable name="M" />
                                                              <Property name="item_index" />
                                                            </GetPropertyValue>
                                                            <GetPropertyValue>
                                                              <DecisionTreeVar name="Y" />
                                                              <Property name="item_index" />
                                                            </GetPropertyValue>
                                                          </Compare>
                                                        </LogicalAnd>
                                                        <LogicalOr>
                                                          <LogicalAnd>
                                                            <CheckRelationship>
                                                              <Relationship name="body_item" />
                                                              <DecisionTreeVar name="B" />
                                                              <DecisionTreeVar name="P" />
                                                            </CheckRelationship>
                                                            <CheckRelationship>
                                                              <Relationship name="next" />
                                                              <DecisionTreeVar name="P" />
                                                              <Variable name="M" />
                                                            </CheckRelationship>
                                                          </LogicalAnd>
                                                          <LogicalAnd>
                                                            <Compare operator="EQUAL">
                                                              <DecisionTreeVar name="B" />
                                                              <DecisionTreeVar name="P" />
                                                            </Compare>
                                                            <Compare operator="EQUAL">
                                                              <GetPropertyValue>
                                                                <Variable name="M" />
                                                                <Property name="item_index" />
                                                              </GetPropertyValue>
                                                              <Integer value="0" />
                                                            </Compare>
                                                          </LogicalAnd>
                                                        </LogicalOr>
                                                      </LogicalAnd>
                                                    </GetByCondition>
                                                  </Expression>
                                                  <DecisionTreeVarDecl name="M" type="action" />
                                                  <Outcome value="Not found">
                                                    <BranchResultNode _alias="&lt;b&gt;A&lt;/b&gt; [skipped nothing]" value="true" />
                                                  </Outcome>
                                                  <Outcome value="Found">
                                                    <BranchResultNode _alias="SeqElemSkip: Действие $Y не может выполняться раньше, чем действие &lt;b&gt;M&lt;/b&gt; %(B,р)" value="false" _errorNode="SeqElemSkip" _explanation="Действие ${val('Y','и')} не может выполняться раньше, чем ${class('M','и')} ${val('M','и')} ${class('B','р')} ${val('B','и')}" />
                                                  </Outcome>
                                                </FindActionNode>
                                              </ThoughtBranch>
                                              <Outcome value="True">
                                                <BranchResultNode _alias="&lt;b&gt;A&lt;/b&gt;" value="true" />
                                              </Outcome>
                                              <Outcome value="False">
                                                <BranchResultNode _alias="(Действие &lt;b&gt;Y&lt;/b&gt; не может быть следующим)" value="false" />
                                              </Outcome>
                                              <ThoughtBranch type="bool">
                                                <QuestionNode _alias="Является ли &lt;b&gt;Al&lt;/b&gt; началом следования &lt;b&gt;S&lt;/b&gt; ?" type="bool" isSwitch="false">
                                                  <Expression>
                                                    <CheckRelationship>
                                                      <Relationship name="begin_of" />
                                                      <GetByRelationship varName="">
                                                        <DecisionTreeVar name="Al" />
                                                        <Relationship name="executes" />
                                                      </GetByRelationship>
                                                      <DecisionTreeVar name="S" />
                                                    </CheckRelationship>
                                                  </Expression>
                                                  <Outcome value="False">
                                                    <QuestionNode _alias="выполнялся ли (уже) акт &lt;b&gt;А&lt;/b&gt; между началом&amp;nbsp;&lt;b&gt;B&lt;/b&gt; и &lt;b&gt;Al&lt;/b&gt; &#10;(Позиция действия &lt;b&gt;Y&lt;/b&gt; &lt;= позиции &lt;b&gt;P&lt;/b&gt;) ?" type="bool" isSwitch="false">
                                                      <Expression>
                                                        <Compare operator="LE">
                                                          <GetPropertyValue>
                                                            <DecisionTreeVar name="Y" />
                                                            <Property name="item_index" />
                                                          </GetPropertyValue>
                                                          <GetPropertyValue>
                                                            <DecisionTreeVar name="P" />
                                                            <Property name="item_index" />
                                                          </GetPropertyValue>
                                                        </Compare>
                                                      </Expression>
                                                      <Outcome value="False">
                                                        <BranchResultNode _alias="&lt;b&gt;A&lt;/b&gt; [not a duplicate]" value="true" />
                                                      </Outcome>
                                                      <Outcome value="True">
                                                        <BranchResultNode _alias="SeqElemDup: %Y не может выполняться дважды в рамках %(B,р)" value="false" _errorNode="SeqElemDup" _explanation="${class('Y','и')} ${val('Y','и')} не может выполняться дважды в рамках ${class('B','р')} ${val('B','и')}" />
                                                      </Outcome>
                                                    </QuestionNode>
                                                  </Outcome>
                                                  <Outcome value="True">
                                                    <BranchResultNode _alias="&lt;b&gt;A&lt;/b&gt; [sequence's just begun]" value="true" />
                                                  </Outcome>
                                                </QuestionNode>
                                              </ThoughtBranch>
                                            </LogicAggregationNode>
                                          </Outcome>
                                        </FindActionNode>
                                      </Outcome>
                                    </QuestionNode>
                                  </Outcome>
                                  <Outcome value="act_kind:end">
                                    <QuestionNode _alias="К какому типу относится &lt;b&gt;Y &lt;/b&gt;?" type="enum" isSwitch="false">
                                      <Expression>
                                        <GetPropertyValue>
                                          <DecisionTreeVar name="Y" />
                                          <Property name="action_kind" />
                                        </GetPropertyValue>
                                      </Expression>
                                      <Outcome value="action_kind:alternative">
                                        <QuestionNode _alias="Является ли &lt;b&gt;Al&lt;/b&gt; началом развилки &lt;b&gt;Y &lt;/b&gt;?" type="bool" isSwitch="false">
                                          <Expression>
                                            <CheckRelationship>
                                              <Relationship name="begin_of" />
                                              <GetByRelationship varName="">
                                                <DecisionTreeVar name="Al" />
                                                <Relationship name="executes" />
                                              </GetByRelationship>
                                              <DecisionTreeVar name="Y" />
                                            </CheckRelationship>
                                          </Expression>
                                          <Outcome value="True">
                                            <FindActionNode _alias="Найти первое условие M развилки B">
                                              <Expression>
                                                <GetByCondition varName="M">
                                                  <LogicalAnd>
                                                    <LogicalAnd>
                                                      <CheckClass>
                                                        <Variable name="M" />
                                                        <Class name="expr" />
                                                      </CheckClass>
                                                      <CheckRelationship>
                                                        <Relationship name="parent_of" />
                                                        <DecisionTreeVar name="B" />
                                                        <Variable name="M" />
                                                      </CheckRelationship>
                                                    </LogicalAnd>
                                                    <ExistenceQuantifier varName="bi">
                                                      <LogicalAnd>
                                                        <CheckClass>
                                                          <Variable name="bi" />
                                                          <Class name="if" />
                                                        </CheckClass>
                                                        <CheckRelationship>
                                                          <Relationship name="parent_of" />
                                                          <DecisionTreeVar name="B" />
                                                          <Variable name="bi" />
                                                        </CheckRelationship>
                                                      </LogicalAnd>
                                                      <CheckRelationship>
                                                        <Relationship name="cond" />
                                                        <Variable name="bi" />
                                                        <Variable name="M" />
                                                      </CheckRelationship>
                                                    </ExistenceQuantifier>
                                                  </LogicalAnd>
                                                </GetByCondition>
                                              </Expression>
                                              <DecisionTreeVarDecl name="M" type="expr" />
                                              <Outcome value="Found">
                                                <BranchResultNode _alias="AltEarlyEndNoCond: Развилка не может завершиться, не проверив условие M" value="false" _errorNode="AltEarlyEndNoCond" _explanation="Развилка не может завершиться, не проверив условие M" />
                                              </Outcome>
                                            </FindActionNode>
                                          </Outcome>
                                          <Outcome value="False">
                                            <QuestionNode _alias="Чем является &lt;b&gt;Al &lt;/b&gt;в развилке &lt;b&gt;Y &lt;/b&gt;?" type="enum" isSwitch="false">
                                              <Expression>
                                                <GetPropertyValue>
                                                  <DecisionTreeVar name="P" />
                                                  <Property name="has_role" />
                                                </GetPropertyValue>
                                              </Expression>
                                              <Outcome value="role_for_parent:alt_cond">
                                                <QuestionNode _alias="Каково значение условия &lt;b&gt;Al&lt;/b&gt; ?" type="bool" isSwitch="false">
                                                  <Expression>
                                                    <GetPropertyValue>
                                                      <DecisionTreeVar name="Al" />
                                                      <Property name="expr_value" />
                                                    </GetPropertyValue>
                                                  </Expression>
                                                  <Outcome value="False">
                                                    <FindActionNode _alias="Найти первое из пропущенных условий M после Al">
                                                      <Expression>
                                                        <GetByCondition varName="M">
                                                          <LogicalAnd>
                                                            <LogicalAnd>
                                                              <CheckClass>
                                                                <Variable name="M" />
                                                                <Class name="expr" />
                                                              </CheckClass>
                                                              <CheckRelationship>
                                                                <Relationship name="parent_of" />
                                                                <DecisionTreeVar name="B" />
                                                                <Variable name="M" />
                                                              </CheckRelationship>
                                                            </LogicalAnd>
                                                            <CheckRelationship>
                                                              <Relationship name="next" />
                                                              <DecisionTreeVar name="P" />
                                                              <Variable name="M" />
                                                            </CheckRelationship>
                                                          </LogicalAnd>
                                                        </GetByCondition>
                                                      </Expression>
                                                      <DecisionTreeVarDecl name="M" type="expr" />
                                                      <Outcome value="Found">
                                                        <BranchResultNode _alias="AltEarlyEndNoCond: Развилка не может завершиться, не проверив условие M" value="false" _errorNode="AltEarlyEndNoCond" _explanation="Развилка не может завершиться, не проверив условие M" />
                                                      </Outcome>
                                                      <Outcome value="Not found">
                                                        <QuestionNode _alias="Присутствует ли в развилке &lt;b&gt;Y&lt;/b&gt; ветка else?" type="bool" isSwitch="false">
                                                          <Expression>
                                                            <ExistenceQuantifier varName="else_branch">
                                                              <CheckClass>
                                                                <Variable name="else_branch" />
                                                                <Class name="else" />
                                                              </CheckClass>
                                                              <CheckRelationship>
                                                                <Relationship name="branches_item" />
                                                                <DecisionTreeVar name="Y" />
                                                                <Variable name="else_branch" />
                                                              </CheckRelationship>
                                                            </ExistenceQuantifier>
                                                          </Expression>
                                                          <Outcome value="False">
                                                            <BranchResultNode _alias="&lt;b&gt;A&lt;/b&gt;" value="true" />
                                                          </Outcome>
                                                          <Outcome value="True">
                                                            <BranchResultNode _alias="AltEarlyEndNoElse: Развилка не может закончиться без выполнения ветки else" value="false" _errorNode="AltEarlyEndNoElse" _explanation="Развилка не может закончиться без выполнения ветки else" />
                                                          </Outcome>
                                                        </QuestionNode>
                                                      </Outcome>
                                                    </FindActionNode>
                                                  </Outcome>
                                                  <Outcome value="True">
                                                    <BranchResultNode _alias="AltEarlyEndNoBranch: Развилка не может закончиться без выполнения ветки, условие которой истинно" value="false" _errorNode="AltEarlyEndNoBranch" _explanation="Развилка не может закончиться без выполнения ветки, условие которой истинно" />
                                                  </Outcome>
                                                </QuestionNode>
                                              </Outcome>
                                              <Outcome value="role_for_parent:alt_branch">
                                                <BranchResultNode _alias="&lt;b&gt;A&lt;/b&gt;" value="true" />
                                              </Outcome>
                                            </QuestionNode>
                                          </Outcome>
                                        </QuestionNode>
                                      </Outcome>
                                      <Outcome value="action_kind:sequence">
                                        <FindActionNode _alias="Найти первое из невыполненных действий &lt;b&gt;M&lt;/b&gt; после &lt;br&gt;&lt;b&gt;А&lt;/b&gt;&lt;b&gt;l&lt;/b&gt; (до конца &lt;b&gt;B&lt;/b&gt;)&lt;b&gt;&lt;br&gt;&lt;/b&gt;">
                                          <Expression>
                                            <GetByCondition varName="M">
                                              <LogicalAnd>
                                                <LogicalAnd>
                                                  <CheckClass>
                                                    <Variable name="M" />
                                                    <Class name="action" />
                                                  </CheckClass>
                                                  <CheckRelationship>
                                                    <Relationship name="body_item" />
                                                    <DecisionTreeVar name="B" />
                                                    <Variable name="M" />
                                                  </CheckRelationship>
                                                </LogicalAnd>
                                                <LogicalOr>
                                                  <LogicalAnd>
                                                    <CheckRelationship>
                                                      <Relationship name="body_item" />
                                                      <DecisionTreeVar name="B" />
                                                      <DecisionTreeVar name="P" />
                                                    </CheckRelationship>
                                                    <CheckRelationship>
                                                      <Relationship name="next" />
                                                      <DecisionTreeVar name="P" />
                                                      <Variable name="M" />
                                                    </CheckRelationship>
                                                  </LogicalAnd>
                                                  <LogicalAnd>
                                                    <Compare operator="EQUAL">
                                                      <DecisionTreeVar name="B" />
                                                      <DecisionTreeVar name="P" />
                                                    </Compare>
                                                    <Compare operator="EQUAL">
                                                      <GetPropertyValue>
                                                        <Variable name="M" />
                                                        <Property name="item_index" />
                                                      </GetPropertyValue>
                                                      <Integer value="0" />
                                                    </Compare>
                                                  </LogicalAnd>
                                                </LogicalOr>
                                              </LogicalAnd>
                                            </GetByCondition>
                                          </Expression>
                                          <DecisionTreeVarDecl name="M" type="action" />
                                          <Outcome value="Found">
                                            <BranchResultNode _alias="SeqEarlyEnd: Следование не может завершиться, не выполнив действие &lt;b&gt;M&lt;/b&gt;" value="false" _errorNode="SeqEarlyEnd" _explanation="Следование не может завершиться, не выполнив ${class('M','и')} ${val('M','и')}" />
                                          </Outcome>
                                          <Outcome value="Not found">
                                            <BranchResultNode _alias="&lt;b&gt;A&lt;/b&gt;" value="true" />
                                          </Outcome>
                                        </FindActionNode>
                                      </Outcome>
                                      <Outcome value="action_kind:loop">
                                        <QuestionNode _alias="Является ли &lt;b&gt;Al&lt;/b&gt; началом цикла &lt;b&gt;Y &lt;/b&gt;?" type="bool" isSwitch="false">
                                          <Expression>
                                            <CheckRelationship>
                                              <Relationship name="begin_of" />
                                              <GetByRelationship varName="">
                                                <DecisionTreeVar name="Al" />
                                                <Relationship name="executes" />
                                              </GetByRelationship>
                                              <DecisionTreeVar name="Y" />
                                            </CheckRelationship>
                                          </Expression>
                                          <Outcome value="False">
                                            <QuestionNode _alias="Чем является &lt;b&gt;Al&lt;/b&gt; в цикле &lt;b&gt;Y&lt;/b&gt; ?" type="enum" isSwitch="false">
                                              <Expression>
                                                <GetPropertyValue>
                                                  <DecisionTreeVar name="P" />
                                                  <Property name="has_role" />
                                                </GetPropertyValue>
                                              </Expression>
                                              <Outcome value="role_for_parent:loop_body">
                                                <QuestionNode _alias="Было ли тело цикла цикла завершено по continue ?" type="bool" isSwitch="false">
                                                  <Expression>
                                                    <ExistenceQuantifier varName="h">
                                                      <CheckClass>
                                                        <Variable name="h" />
                                                        <Class name="action" />
                                                      </CheckClass>
                                                      <CheckRelationship>
                                                        <Relationship name="halt_of" />
                                                        <GetByRelationship varName="">
                                                          <GetByCondition varName="t">
                                                            <LogicalAnd>
                                                              <CheckClass>
                                                                <Variable name="t" />
                                                                <Class name="act" />
                                                              </CheckClass>
                                                              <CheckRelationship>
                                                                <Relationship name="student_next" />
                                                                <Variable name="t" />
                                                                <DecisionTreeVar name="Al" />
                                                              </CheckRelationship>
                                                            </LogicalAnd>
                                                          </GetByCondition>
                                                          <Relationship name="executes" />
                                                        </GetByRelationship>
                                                        <Variable name="h" />
                                                      </CheckRelationship>
                                                    </ExistenceQuantifier>
                                                  </Expression>
                                                  <Outcome value="False">
                                                    <BranchResultNode _alias="LoopEarlyEndNormIterEnd: Цикл не должен завершаться после итерации, т.к. не был прерван" value="false" _errorNode="LoopEarlyEndNormIterEnd" _explanation="Цикл не должен завершаться после итерации, т.к. не был прерван" />
                                                  </Outcome>
                                                  <Outcome value="True">
                                                    <BranchResultNode _alias="LoopEarlyEndOnIterEndByContinue: Цикл не может завершиться после прерывания его итерации по CONTINUE" value="false" _errorNode="LoopEarlyEndOnIterEndByContinue" _explanation="Цикл не может завершиться после прерывания его итерации по CONTINUE" />
                                                  </Outcome>
                                                </QuestionNode>
                                              </Outcome>
                                              <Outcome value="role_for_parent:loop_cond">
                                                <QuestionNode _alias="Позволяет ли значение условия цикла закончить цикл?" type="bool" isSwitch="false">
                                                  <Expression>
                                                    <Compare operator="NOT_EQUAL">
                                                      <GetPropertyValue>
                                                        <DecisionTreeVar name="Al" />
                                                        <Property name="expr_value" />
                                                      </GetPropertyValue>
                                                      <GetPropertyValue>
                                                        <GetByCondition varName="L">
                                                          <LogicalAnd>
                                                            <CheckClass>
                                                              <Variable name="L" />
                                                              <Class name="conditional_loop" />
                                                            </CheckClass>
                                                            <Compare operator="EQUAL">
                                                              <Variable name="L" />
                                                              <DecisionTreeVar name="Y" />
                                                            </Compare>
                                                          </LogicalAnd>
                                                        </GetByCondition>
                                                        <Property name="continues_on_true_condition" />
                                                      </GetPropertyValue>
                                                    </Compare>
                                                  </Expression>
                                                  <Outcome value="False">
                                                    <BranchResultNode _alias="LoopEarlyEndCondStillTrue: ${class('Y','и')} не может завершиться, пока его условие истинно" value="false" _errorNode="LoopEarlyEndCondStillTrue" _explanation="${class('Y','и')} не может завершиться, пока его условие истинно" />
                                                  </Outcome>
                                                  <Outcome value="True">
                                                    <BranchResultNode _alias="&lt;b&gt;A&lt;/b&gt;" value="true" />
                                                  </Outcome>
                                                </QuestionNode>
                                              </Outcome>
                                              <Outcome value="role_for_parent:loop_update">
                                                <BranchResultNode _alias="PreCondLoopEarlyEndNoCond: ${class('Y','и')} не может завершиться без проверки своего условия" value="false" _errorNode="PreCondLoopEarlyEndNoCond" _explanation="${class('Y','и')} не может завершиться без проверки своего условия" />
                                              </Outcome>
                                              <Outcome value="role_for_parent:loop_init">
                                                <BranchResultNode _alias="PreCondLoopEarlyEndNoCond: ${class('Y','и')} не может завершиться без проверки своего условия" value="false" _errorNode="PreCondLoopEarlyEndNoCond" _explanation="${class('Y','и')} не может завершиться без проверки своего условия" />
                                              </Outcome>
                                            </QuestionNode>
                                          </Outcome>
                                          <Outcome value="True">
                                            <QuestionNode _alias="Является ли цикл &lt;b&gt;Y&lt;/b&gt; циклом с предусловием?" type="bool" isSwitch="false">
                                              <Expression>
                                                <CheckClass>
                                                  <DecisionTreeVar name="Y" />
                                                  <Class name="loop_with_pre_condition" />
                                                </CheckClass>
                                              </Expression>
                                              <Outcome value="True">
                                                <BranchResultNode _alias="PreCondLoopEarlyEndNoCond: ${class('Y','и')} не может завершиться без проверки своего условия" value="false" _errorNode="PreCondLoopEarlyEndNoCond" _explanation="${class('Y','и')} не может завершиться без проверки своего условия" />
                                              </Outcome>
                                              <Outcome value="False">
                                                <BranchResultNode _alias="PostCondLoopEarlyEndNoIter: ${class('Y','и')} не может завершиться, не выполнив итерацию хотя бы раз" value="false" _errorNode="PostCondLoopEarlyEndNoIter" _explanation="${class('Y','и')} не может завершиться, не выполнив итерацию хотя бы раз" />
                                              </Outcome>
                                            </QuestionNode>
                                          </Outcome>
                                        </QuestionNode>
                                      </Outcome>
                                    </QuestionNode>
                                  </Outcome>
                                </QuestionNode>
                              </Outcome>
                              <ThoughtBranch type="bool">
                                <BranchResultNode _alias="[заглушка]" value="true" />
                              </ThoughtBranch>
                              <ThoughtBranch type="bool">
                                <FindActionNode _alias="Найти последний Return / Break / Continue &lt;br&gt;в трассе -&amp;gt;&lt;br&gt;&lt;b&gt;Ra&lt;/b&gt;">
                                  <Expression>
                                    <GetExtreme extremeVarName="Ra_ex" varName="Ra">
                                      <LogicalNot>
                                        <ExistenceQuantifier varName="a">
                                          <LogicalAnd>
                                            <CheckClass>
                                              <Variable name="a" />
                                              <Class name="act_begin" />
                                            </CheckClass>
                                            <CheckClass>
                                              <GetByRelationship varName="">
                                                <GetByRelationship varName="">
                                                  <Variable name="a" />
                                                  <Relationship name="executes" />
                                                </GetByRelationship>
                                                <Relationship name="boundary_of" />
                                              </GetByRelationship>
                                              <Class name="interrupt_action" />
                                            </CheckClass>
                                          </LogicalAnd>
                                          <Compare operator="LESS">
                                            <GetPropertyValue>
                                              <Variable name="Ra_ex" />
                                              <Property name="student_index" />
                                            </GetPropertyValue>
                                            <GetPropertyValue>
                                              <Variable name="a" />
                                              <Property name="student_index" />
                                            </GetPropertyValue>
                                          </Compare>
                                        </ExistenceQuantifier>
                                      </LogicalNot>
                                      <LogicalAnd>
                                        <LogicalAnd>
                                          <CheckClass>
                                            <Variable name="Ra" />
                                            <Class name="act_begin" />
                                          </CheckClass>
                                          <CheckClass>
                                            <GetByRelationship varName="">
                                              <GetByRelationship varName="">
                                                <Variable name="Ra" />
                                                <Relationship name="executes" />
                                              </GetByRelationship>
                                              <Relationship name="boundary_of" />
                                            </GetByRelationship>
                                            <Class name="interrupt_action" />
                                          </CheckClass>
                                        </LogicalAnd>
                                        <Compare operator="LESS">
                                          <GetPropertyValue>
                                            <Variable name="Ra" />
                                            <Property name="student_index" />
                                          </GetPropertyValue>
                                          <GetPropertyValue>
                                            <DecisionTreeVar name="A" />
                                            <Property name="student_index" />
                                          </GetPropertyValue>
                                        </Compare>
                                      </LogicalAnd>
                                    </GetExtreme>
                                  </Expression>
                                  <DecisionTreeVarDecl name="Ra" type="act" />
                                  <Outcome value="Found">
                                    <FindActionNode _alias="Найти действие алгоритма &lt;br&gt;для акта &lt;b&gt;Ra&lt;/b&gt; -&amp;gt;&lt;br&gt;&lt;div&gt;&lt;b&gt;R&lt;/b&gt;&lt;/div&gt;">
                                      <Expression>
                                        <GetByCondition varName="r">
                                          <LogicalAnd>
                                            <CheckClass>
                                              <Variable name="r" />
                                              <Class name="interrupt_action" />
                                            </CheckClass>
                                            <Compare operator="EQUAL">
                                              <Variable name="r" />
                                              <GetByRelationship varName="">
                                                <GetByRelationship varName="">
                                                  <DecisionTreeVar name="Ra" />
                                                  <Relationship name="executes" />
                                                </GetByRelationship>
                                                <Relationship name="boundary_of" />
                                              </GetByRelationship>
                                            </Compare>
                                          </LogicalAnd>
                                        </GetByCondition>
                                      </Expression>
                                      <DecisionTreeVarDecl name="R" type="interrupt_action" />
                                      <Outcome value="Found">
                                        <FindActionNode _alias="Найти прерываемое действие — &lt;b&gt;IT&lt;/b&gt;">
                                          <Expression>
                                            <GetByCondition varName="it">
                                              <LogicalAnd>
                                                <CheckClass>
                                                  <Variable name="it" />
                                                  <Class name="action" />
                                                </CheckClass>
                                                <LogicalOr>
                                                  <LogicalOr>
                                                    <LogicalOr>
                                                      <LogicalOr>
                                                        <LogicalAnd>
                                                          <ExistenceQuantifier varName="any">
                                                            <LogicalAnd>
                                                              <CheckClass>
                                                                <Variable name="any" />
                                                                <Class name="action" />
                                                              </CheckClass>
                                                              <CheckRelationship>
                                                                <Relationship name="interrupt_target" />
                                                                <DecisionTreeVar name="R" />
                                                                <Variable name="any" />
                                                              </CheckRelationship>
                                                            </LogicalAnd>
                                                            <Compare operator="EQUAL">
                                                              <Variable name="any" />
                                                              <Variable name="it" />
                                                            </Compare>
                                                          </ExistenceQuantifier>
                                                          <Compare operator="EQUAL">
                                                            <Variable name="it" />
                                                            <GetByRelationship varName="">
                                                              <DecisionTreeVar name="R" />
                                                              <Relationship name="interrupt_target" />
                                                            </GetByRelationship>
                                                          </Compare>
                                                        </LogicalAnd>
                                                        <LogicalAnd>
                                                          <Compare operator="EQUAL">
                                                            <GetPropertyValue>
                                                              <DecisionTreeVar name="R" />
                                                              <Property name="has_interrupt_kind" />
                                                            </GetPropertyValue>
                                                            <Enum owner="interrupt_kind" value="break" />
                                                          </Compare>
                                                          <Compare operator="EQUAL">
                                                            <Variable name="it" />
                                                            <GetExtreme extremeVarName="L_ex" varName="L">
                                                              <LogicalNot>
                                                                <ExistenceQuantifier varName="z">
                                                                  <LogicalAnd>
                                                                    <CheckClass>
                                                                      <Variable name="z" />
                                                                      <Class name="loop" />
                                                                    </CheckClass>
                                                                    <CheckRelationship>
                                                                      <Relationship name="hasPartTransitive" />
                                                                      <Variable name="z" />
                                                                      <DecisionTreeVar name="R" />
                                                                    </CheckRelationship>
                                                                  </LogicalAnd>
                                                                  <CheckRelationship>
                                                                    <Relationship name="hasPartTransitive" />
                                                                    <Variable name="L_ex" />
                                                                    <Variable name="z" />
                                                                  </CheckRelationship>
                                                                </ExistenceQuantifier>
                                                              </LogicalNot>
                                                              <LogicalAnd>
                                                                <CheckClass>
                                                                  <Variable name="L" />
                                                                  <Class name="loop" />
                                                                </CheckClass>
                                                                <CheckRelationship>
                                                                  <Relationship name="hasPartTransitive" />
                                                                  <Variable name="L" />
                                                                  <DecisionTreeVar name="R" />
                                                                </CheckRelationship>
                                                              </LogicalAnd>
                                                            </GetExtreme>
                                                          </Compare>
                                                        </LogicalAnd>
                                                      </LogicalOr>
                                                      <LogicalAnd>
                                                        <Compare operator="EQUAL">
                                                          <GetPropertyValue>
                                                            <DecisionTreeVar name="R" />
                                                            <Property name="has_interrupt_kind" />
                                                          </GetPropertyValue>
                                                          <Enum owner="interrupt_kind" value="continue" />
                                                        </Compare>
                                                        <Compare operator="EQUAL">
                                                          <GetByRelationship varName="">
                                                            <GetExtreme extremeVarName="L_ex" varName="L">
                                                              <LogicalNot>
                                                                <ExistenceQuantifier varName="z">
                                                                  <LogicalAnd>
                                                                    <CheckClass>
                                                                      <Variable name="z" />
                                                                      <Class name="loop" />
                                                                    </CheckClass>
                                                                    <CheckRelationship>
                                                                      <Relationship name="hasPartTransitive" />
                                                                      <Variable name="z" />
                                                                      <DecisionTreeVar name="R" />
                                                                    </CheckRelationship>
                                                                  </LogicalAnd>
                                                                  <CheckRelationship>
                                                                    <Relationship name="hasPartTransitive" />
                                                                    <Variable name="L_ex" />
                                                                    <Variable name="z" />
                                                                  </CheckRelationship>
                                                                </ExistenceQuantifier>
                                                              </LogicalNot>
                                                              <LogicalAnd>
                                                                <CheckClass>
                                                                  <Variable name="L" />
                                                                  <Class name="loop" />
                                                                </CheckClass>
                                                                <CheckRelationship>
                                                                  <Relationship name="hasPartTransitive" />
                                                                  <Variable name="L" />
                                                                  <DecisionTreeVar name="R" />
                                                                </CheckRelationship>
                                                              </LogicalAnd>
                                                            </GetExtreme>
                                                            <Relationship name="body" />
                                                          </GetByRelationship>
                                                          <Variable name="it" />
                                                        </Compare>
                                                      </LogicalAnd>
                                                    </LogicalOr>
                                                    <LogicalAnd>
                                                      <Compare operator="EQUAL">
                                                        <GetPropertyValue>
                                                          <DecisionTreeVar name="R" />
                                                          <Property name="has_interrupt_kind" />
                                                        </GetPropertyValue>
                                                        <Enum owner="interrupt_kind" value="return" />
                                                      </Compare>
                                                      <Compare operator="EQUAL">
                                                        <GetByCondition varName="gc">
                                                          <LogicalAnd>
                                                            <LogicalAnd>
                                                              <CheckClass>
                                                                <Variable name="gc" />
                                                                <Class name="sequence" />
                                                              </CheckClass>
                                                              <ExistenceQuantifier varName="alg">
                                                                <CheckClass>
                                                                  <Variable name="alg" />
                                                                  <Class name="algorithm" />
                                                                </CheckClass>
                                                                <CheckRelationship>
                                                                  <Relationship name="entry_point" />
                                                                  <Variable name="alg" />
                                                                  <Variable name="gc" />
                                                                </CheckRelationship>
                                                              </ExistenceQuantifier>
                                                            </LogicalAnd>
                                                            <CheckRelationship>
                                                              <Relationship name="hasPartTransitive" />
                                                              <Variable name="gc" />
                                                              <DecisionTreeVar name="R" />
                                                            </CheckRelationship>
                                                          </LogicalAnd>
                                                        </GetByCondition>
                                                        <Variable name="it" />
                                                      </Compare>
                                                    </LogicalAnd>
                                                  </LogicalOr>
                                                  <Boolean value="FALSE" />
                                                </LogicalOr>
                                              </LogicalAnd>
                                            </GetByCondition>
                                          </Expression>
                                          <DecisionTreeVarDecl name="IT" type="action" />
                                          <Outcome value="Found">
                                            <QuestionNode _alias="Присутствует ли завершение прерываемого действия в трассе после &lt;b&gt;R &lt;/b&gt; ?" type="bool" isSwitch="false">
                                              <Expression>
                                                <ExistenceQuantifier varName="a">
                                                  <LogicalAnd>
                                                    <CheckClass>
                                                      <Variable name="a" />
                                                      <Class name="act_end" />
                                                    </CheckClass>
                                                    <CheckRelationship>
                                                      <Relationship name="end_of" />
                                                      <GetByRelationship varName="">
                                                        <Variable name="a" />
                                                        <Relationship name="executes" />
                                                      </GetByRelationship>
                                                      <DecisionTreeVar name="IT" />
                                                    </CheckRelationship>
                                                  </LogicalAnd>
                                                  <LogicalAnd>
                                                    <Compare operator="LESS">
                                                      <GetPropertyValue>
                                                        <DecisionTreeVar name="Ra" />
                                                        <Property name="student_index" />
                                                      </GetPropertyValue>
                                                      <GetPropertyValue>
                                                        <Variable name="a" />
                                                        <Property name="student_index" />
                                                      </GetPropertyValue>
                                                    </Compare>
                                                    <Compare operator="LESS">
                                                      <GetPropertyValue>
                                                        <Variable name="a" />
                                                        <Property name="student_index" />
                                                      </GetPropertyValue>
                                                      <GetPropertyValue>
                                                        <DecisionTreeVar name="A" />
                                                        <Property name="student_index" />
                                                      </GetPropertyValue>
                                                    </Compare>
                                                  </LogicalAnd>
                                                </ExistenceQuantifier>
                                              </Expression>
                                              <Outcome value="True">
                                                <BranchResultNode _alias="&lt;b&gt;A&lt;/b&gt;" value="true" />
                                              </Outcome>
                                              <Outcome value="False">
                                                <BranchResultNode _alias="[выполняется прерывание]" value="false" />
                                              </Outcome>
                                            </QuestionNode>
                                          </Outcome>
                                        </FindActionNode>
                                      </Outcome>
                                    </FindActionNode>
                                  </Outcome>
                                  <Outcome value="Not found">
                                    <BranchResultNode _alias="&lt;b&gt;A&lt;/b&gt;" value="true" />
                                  </Outcome>
                                </FindActionNode>
                              </ThoughtBranch>
                              <Outcome value="False">
                                <QuestionNode _alias="Является ли акт &lt;b&gt;A&lt;/b&gt; окончанием ?" type="bool" isSwitch="false">
                                  <Expression>
                                    <Compare operator="EQUAL">
                                      <GetPropertyValue>
                                        <DecisionTreeVar name="A" />
                                        <Property name="act_kind" />
                                      </GetPropertyValue>
                                      <Enum owner="act_kind" value="end" />
                                    </Compare>
                                  </Expression>
                                  <Outcome value="True">
                                    <BranchResultNode _alias="&lt;b&gt;A&lt;/b&gt;" value="true" />
                                  </Outcome>
                                  <Outcome value="False">
                                    <QuestionNode _alias="Является ли текущий контекст &lt;b&gt;B&lt;/b&gt; циклом ?" type="bool" isSwitch="false">
                                      <Expression>
                                        <CheckClass>
                                          <DecisionTreeVar name="B" />
                                          <Class name="loop" />
                                        </CheckClass>
                                      </Expression>
                                      <Outcome value="False">
                                        <QuestionNode _alias="Какому типу относится акт &lt;b&gt;A&lt;/b&gt; ?" type="enum" isSwitch="false">
                                          <Expression>
                                            <GetPropertyValue>
                                              <DecisionTreeVar name="A" />
                                              <Property name="act_kind" />
                                            </GetPropertyValue>
                                          </Expression>
                                          <Outcome value="act_kind:begin">
                                            <BranchResultNode _alias="BeginWhenInterrupting: Никакое действие не может начаться, пока выполняется прерывание" value="false" _errorNode="BeginWhenInterrupting" _explanation="Никакое действие не может начаться, пока выполняется прерывание" />
                                          </Outcome>
                                          <Outcome value="act_kind:atom">
                                            <BranchResultNode _alias="BeginWhenInterrupting: Никакое действие не может начать выполняться, пока выполняется прерывание" value="false" _errorNode="BeginWhenInterrupting" _explanation="Никакое действие не может начать выполняться, пока выполняется прерывание" />
                                          </Outcome>
                                        </QuestionNode>
                                      </Outcome>
                                      <Outcome value="True">
                                        <BranchResultNode _alias="LoopTreatBreak﻿AsContinue: Цикл не может продолжить выполняться после прерывания итерации, т.к. текущее прерывание — не по CONTINUE." value="false" _errorNode="LoopTreatBreak﻿AsContinue" _explanation="Цикл не может продолжить выполняться после прерывания итерации, т.к. текущее прерывание — не по CONTINUE." />
                                      </Outcome>
                                    </QuestionNode>
                                  </Outcome>
                                </QuestionNode>
                              </Outcome>
                            </LogicAggregationNode>
                          </Outcome>
                        </LogicAggregationNode>
                      </Outcome>
                    </FindActionNode>
                  </Outcome>
                </FindActionNode>
              </Outcome>
            </FindActionNode>
          </Outcome>
        </FindActionNode>
      </Outcome>
    </FindActionNode>
  </ThoughtBranch>
</StartNode>