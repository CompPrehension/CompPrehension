package org.vstu.compprehension.strategies;

import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.vstu.compprehension.models.businesslogic.QuestionRequest;
import org.vstu.compprehension.models.businesslogic.domain.DomainFactory;
import org.vstu.compprehension.models.businesslogic.strategies.StrategyOptions;
import org.vstu.compprehension.models.entities.EnumData.Language;
import org.vstu.compprehension.models.entities.EnumData.SearchDirections;
import org.vstu.compprehension.models.entities.ExerciseAttemptEntity;
import org.vstu.compprehension.utils.RandomProvider;

/**
 * Modification of GradeConfidenceBaseStrategy that sets 50/50 probability to select manual or auto-generated question.
 * This strategy is intended for surveys when a student is to distinguish between manual and autogenerated questions.
 */
public class GradeConfidenceBaseStrategy_Manual50Autogen50 extends GradeConfidenceBaseStrategy {
    private final RandomProvider randomProvider;

    public GradeConfidenceBaseStrategy_Manual50Autogen50(DomainFactory domainFactory, RandomProvider randomProvider) {
        super(domainFactory);
        this.options = StrategyOptions.builder()
                .multiStagesEnabled(false)
                .visibleToUser(false)
                .build();
        this.randomProvider = randomProvider;
    }

    @NotNull
    @Override
    public String getStrategyId() {
        return this.getClass().getSimpleName();  // GradeConfidenceBaseStrategy_Manual50Autogen50
    }

    @NotNull
    @Override
    public String getDisplayName(Language language) {
        if (language == Language.RUSSIAN) {
            return "Адаптивная стратегия, частично с авто-сгенерированными вопросами";
        }
        return "Adaptive strategy, partially with auto-generated questions";
    }

    @Nullable
    @Override
    public String getDescription(Language language) {
        if (language == Language.RUSSIAN) {
            return "Адаптивная стратегия с 50% шансом выбора автоматически сгенерированного вопроса";
        }
        return "Adaptive strategy with 50% chance of selecting an automatically generated question";
    }

    @Override
    public QuestionRequest generateQuestionRequest(ExerciseAttemptEntity exerciseAttempt) {
        QuestionRequest qr = super.generateQuestionRequest(exerciseAttempt);
        qr.setLawsSearchDirection(SearchDirections.TO_SIMPLE);
        qr.setChanceToPickAutogeneratedQuestion(0.55);
        qr.setSolvingDuration(5 + randomProvider.getRandom().nextInt(6));  // random duration from [1..10] range
//        qr.setComplexity(qr.getComplexity() * 2);
        qr.setComplexity(0.00f + randomProvider.getRandom().nextFloat() * 0.02f);  // [0..1]
        return qr;
    }
}
