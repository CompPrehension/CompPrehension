import { observer } from "mobx-react";
import React, { useMemo, useState } from "react";
import { useEffect } from "react";
import { Answer } from "../../../types/answer";
import { OrderQuestionFeedback } from "../../../types/feedback";
import { OrderQuestion } from "../../../types/question";
import { notNulAndUndefinded } from "../../../utils/helpers";
import { Optional } from "../optional";

type OrderQuestionComponentProps = {
    question: OrderQuestion,
    getFeedback: () => OrderQuestionFeedback | undefined, 
    answers: Answer[],
    getAnswers: () => Answer[],
    onChanged: (newAnswers: Answer[]) => void,
}
export const OrderQuestionComponent = observer((props: OrderQuestionComponentProps) => {
    const { question, getAnswers, onChanged, getFeedback } = props; 
    if (!question.options.requireContext) {
        return null;
    }
    const { options } = question;
    const orderNumberOptions = options.orderNumberOptions ?? { delimiter: '/', position: 'SUFFIX', }
    const originalText = useMemo(() => {
        const originalText = document.createElement('div')
        originalText.innerHTML = question.text;
        return originalText;
    }, []);    

    // actions on questionId changed (onInit)
    useEffect(() => {    
        // add button click event handlers
        document.querySelectorAll(`#question_${question.questionId} [data-answer-id]`).forEach(e => {
            const idStr = e.getAttribute('data-answer-id') ?? '';
            const id = +idStr;
            e.addEventListener('click', () => onChanged([...getAnswers(), { answer: [id, id], isСreatedByUser: true }]));
        })

        // show elements values
        document.querySelectorAll('[data-comp-ph-value]').forEach(e => {
            const value = e.getAttribute('data-comp-ph-value');
            e.innerHTML += `<span class="comp-ph-expr-bottom-hint">${value}</span>`;
        })

        // show elements positions
        document.querySelectorAll('[data-comp-ph-pos]').forEach(e => {
            const pos = e.getAttribute('data-comp-ph-pos');
            e.innerHTML += `<span class="comp-ph-expr-top-hint">${pos}</span>`;
        })

    }, [question.questionId]);

    useEffect(() => {
        // drop all changes, set original qustion text    
        document.querySelectorAll(`#question_${question.questionId} [data-answer-id]`).forEach(e => {
            const value = e.getAttribute('data-comp-ph-value');
            const pos = e.getAttribute("data-comp-ph-pos");
            e.innerHTML = originalText.querySelector(`#${e.id}`)?.innerHTML + (pos ? `<span class="comp-ph-expr-top-hint">${pos}</span>` : '') + (value ? `<span class="comp-ph-expr-bottom-hint">${value}</span>` : '')
            e.classList.remove('disabled');
            e.classList.remove('comp-ph-question-answer--last-selected-by-system');
        });

        // calc last generated by system answers
        const isLastAsnwerCorrect = getFeedback()?.isCorrect ?? true;
        const lastGeneratedAnswers = !isLastAsnwerCorrect
            ? []
            : [...getAnswers()].reverse().reduce<[number, Answer[]]>(((acc, answer) => {
                const [prevInteractionId, result] = acc;
                if (prevInteractionId === -1)
                    return acc;
                if (answer.isСreatedByUser || prevInteractionId !== 0 && prevInteractionId !== answer.createdByInteraction)
                    return [-1, result];
                result.push(answer);
                return [answer.createdByInteraction || -1, result];
            }), [0, []])[1].reverse();

        // apply history changes    
        getAnswers().forEach((answer, idx, answers) => {
            const { answer:asnwerPair } = answer;
            const [h] = asnwerPair;
            const answrs = document.querySelectorAll(`[data-answer-id='${h}']`);
            if (!answrs.length) {
                return 0;
            }

            answrs.forEach(answr => {
                if (lastGeneratedAnswers.includes(answer)) {
                    answr.classList.add('comp-ph-question-answer--last-selected-by-system');
                }
    
                // add pos hint        
                if (orderNumberOptions.position !== 'NONE') {
                    const delim = orderNumberOptions.delimiter;
                    const orderNumber = orderNumberOptions.replacers?.[idx] ?? (idx + 1);
                    const answerHtml = orderNumberOptions.position === 'PREFIX' ? `${orderNumber}${delim}${answr.innerHTML}` :
                                    orderNumberOptions.position === 'SUFFIX' ? `${answr.innerHTML}${delim}${orderNumber}</span>` : 
                                    orderNumberOptions.position === 'BOTTOM' ? `<span class="comp-ph-expr-bottom-hint">${delim}${orderNumber}</span>${answr.innerHTML}` :
                                    answr.innerHTML;
                   answr.innerHTML = answerHtml;
                }  
                // disable if needed
                if (!options.multipleSelectionEnabled) {            
                    answr.classList.add('disabled');
                }
            })            
        });
    }, [question.questionId, getAnswers().length])
    
    const trace = getFeedback()?.trace ?? (getAnswers().length === 0 ? question.initialTrace : null);
    const isTraceVisible = options.showTrace && notNulAndUndefinded(trace) && trace.length > 0;

    return (
        <div id={`question_${question.questionId}`}>
            <div className="comp-ph-question-text" dangerouslySetInnerHTML={{ __html: question.text }} />
            <Optional isVisible={isTraceVisible}>
                <p>
                    <table className="comp-ph-trace">
                        <tbody>                            
                            {trace?.map((t, idx) => <tr key={idx}><td dangerouslySetInnerHTML={{ __html: t }}></td></tr>)}                            
                        </tbody>
                    </table>
                </p>
            </Optional>
        </div>
    );
})
