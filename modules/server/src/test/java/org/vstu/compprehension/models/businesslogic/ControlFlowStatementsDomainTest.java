package org.vstu.compprehension.models.businesslogic;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.vstu.compprehension.ControlFlowStatementsDomain;
import org.vstu.compprehension.JenaBackend;
import org.vstu.compprehension.adapters.DomainFactoryImpl;
import org.vstu.compprehension.models.businesslogic.backends.Backend;
import org.vstu.compprehension.models.businesslogic.backends.ReasoningOptions;
import org.vstu.compprehension.models.businesslogic.backends.facts.Fact;
import org.vstu.compprehension.models.businesslogic.domain.Domain;
import org.vstu.compprehension.models.entities.EnumData.Language;

import java.util.Collection;
import java.util.List;
import java.util.Objects;
import java.util.stream.Stream;

import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest
public class ControlFlowStatementsDomainTest {

    @Autowired
    DomainFactoryImpl domainFactory;
    Domain domain = domainFactory.getDomain("ctrl_flow");

    @Test
    public void testName() {
        assertEquals(domain.getName(), "ControlFlowStatementsDomain");
    }

    @Test
    public void testLaws() {
        assertNotNull(domain.getPositiveLaw("entry_point_and_sequence"));
        assertTrue(domain.getPositiveLaw("entry_point_and_sequence").isPositiveLaw());
    }

    @Test
    public void testQuestionSolve() throws Exception {
        List<Tag> tags = Stream.of("basics", "stmt", "expr", "helper", "C++")
                .map(t -> domain.getTag(t))
                .filter(Objects::nonNull)
                .toList();

        QuestionRequest qr = new QuestionRequest();
        qr.setTargetConcepts(List.of(
                domain.getConcept("trace"),
                domain.getConcept("sequence")
        ));
        qr.setAllowedConcepts(List.of(
                domain.getConcept("sequence")
                // domain.getConcept("alternative")
        ));
        qr.setDeniedConcepts(List.of(
                domain.getConcept("loop")
        ));
        qr.setDeniedQuestionNames(List.of());
        qr.setChanceToPickAutogeneratedQuestion(0.0);
        Question question = domain.makeQuestion(null, qr, tags, Language.ENGLISH);

        Backend backend = new JenaBackend();
        Collection<Fact> solution = backend.solve(
                domain.getQuestionLaws(question.getQuestionDomainType(), tags),
                question.getStatementFacts(),
                new ReasoningOptions());
        assertFalse(solution.isEmpty());
    }}
