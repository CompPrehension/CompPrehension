UpcomingNeighbour Oжидаемый-рано	Почему вы пропустили <list-MISSING> ?	Why did you skip <list-MISSING> ?
		
NotNeighbour Hеожиданно	Почему вы выполнили <A> ?	Why did you execute <A> ?
		
WrongCondNeighbour Hе-при-том-условии	Почему вы выполнили <A>, когда условие <COND> <TrueFalse>?	Why did you execute <A>, when the condition <COND> is <TrueFalse>?
		
MisplacedBefore Раньше-объемлющего-акта	<A> не может выполняться до начала <B>, потому что <A> входит в <B>.	<A> is a part of <B> so <A> can't be executed before <B> starts
		
MisplacedAfter Позже-объемлющего-акта	<B> не может выполняться после окончания <A>, потому что <B> входит в <A>	<B> is a part of <A> so <B> can't be executed after <A> ends
		
EndedDeeper Конец-внутри-вложенного-акта	Действие не может завершиться до окончания всех вложенных действий, поэтому <A> не может закончиться до окончания действия <INNER>, которое входит в <A>	An action ends only when all its nested actions have ended, so <A> cannot end until <INNER> ends as <INNER> is a part of <A>
		
WrongContext Вне-контекста	<A> не может выполняться в рамках <OUTER>, потому что <A> не является непосредственной частью <OUTER>	<A> can't be executed inside of <OUTER> because <A> is not a direct part of "<OUTER>".
		
OneLevelShallower Через-уровень	<A> не может выполняться в рамках <OUTER>, потому что <A> является элементом <PARENT>, начните сначала <PARENT>.	<A> cannot be executed within <OUTER> because <A> is an element of <PARENT>, so start <PARENT> first.
		
TooEarlyInSequence Не-в-порядке-следования-рано	Следование выполняет все свои действия по порядку, поэтому <A> не может выполняться перед <MISSING>.	A sequence executes its nested actions in order, so <A> cannot be executed before <MISSING>
		
TooLateInSequence Не-в-порядке-следования-поздно	Следование выполняет все свои действия по порядку, поэтому <A> не может выполняться после <PREVIOUS>.	A sequence executes its nested actions in order, so <A> cannot be executed after <PREVIOUS>
		
SequenceFinishedTooEarly Следование-прервано	Следование выполняет все свои действия: нельзя закончить следование <A> не выполнив действия: <list-MISSING>.	A sequence always executes all its actions. The sequence <A> cannot finish until actions: <list-MISSING> are executed.
		
DuplicateOfAct Дубликат (sequence only)	Следование выполняет все свои действия ровно по 1 разу, поэтому во время выполнения действия <A> действие <B> должно выполниться ровно один раз.	A sequence executes each its action once, so each execution of <A> can contain only one execution of <B>
		
NoFirstCondition Нет-первого-условия	Развилка проверяет все свои условия по порядку до первого истинного. Поэтому выполнение развилки <A> должно начинаться с проверки её первого условия <B>.	An alternative evaluates its conditions in order until the first true condition. The alternative <A> should start with evaluating its first condition <B>.
		
BranchNotNextToCondition Ветка-без-условия	Развилка выполняет ветку, только если условие этой ветки истинно. Ветка <C> не может начаться, так как условие <B> еще не вычислено.	The alternative executes its branch only if the branch condition is true. The alternative <A> cannot execute the branch <C> because its condition <B> is not evaluated yet.
		
ElseBranchNotNextToLastCondition Ветка-иначе-без-условия	Развилка выполняет ветку "ИНАЧЕ", только если все условия были ложными. Альтернативная ветка <C> не может начаться, пока условие <B> не вычислено.	An alternative executes its "ELSE" branch only if all its conditions are false. The alternative <A> cannot execute the branch <C> until its condition <B> is evaluated
		
ElseBranchAfterTrueCondition Ветка-иначе-после-успешного-условия	Развилка выполняет ветку "ИНАЧЕ", только если все условия были ложными. Альтернативная ветка (ветка "ИНАЧЕ") не должна начинаться, поскольку условие <B> истинно.	An alternative executes its "ELSE" branch only if all its conditions are false. The alternative <A> must not execute the "ELSE" branch since the condition <B> is true
		
CondtionNotNextToPrevCondition Условие-не-по-порядку	Развилка проверяет свои условия по порядку до первого истинного. При выполнении развилки <A> условие <C> должно быть вычислено сразу после условия <B>, т.к. условие <B> ложно.	An alternative evaluates its conditions in order up to the first true condition. The alternative <A> should evaluate its condition <C> immediately after the condition <B> as <B> is false.
		
ConditionTooEarly Условие-слишком-рано	Развилка проверяет свои условия по порядку до первого истинного. При выполнении развилки <A> условие <C> рано проверять, т.к. условие <B> еще не вычислено.	An alternative evaluates its conditions in order up to the first true condition. The alternative <A> cannot evaluate its condition <C> until the condition <B> is evaluated.
		
ConditionAfterBranch Условие-после-ветки	Выполнив одну ветку, развилка завершается. При выполнении развилки <A> условие <B> не должно проверяться, потому что ветка <D> уже выполнена.	Each alternative executes no more than one alternative action and finishes. The alternative <A> must not evaluate its condition <B> because the branch <D> was executed.
		
DuplicateOfCondition Повтор-условия	Развилка проверяет все условия по порядку до первого истинного. При выполнении развилки <A> условие <B> не должно проверяться повторно.	An alternative evaluates its conditions in order up to the first true condition. The alternative <A> must not evaluate its condition <B> twice.
		
NoNextCondition Нет-следующего-условия	Развилка проверяет все условия по порядку до первого истинного. При выполнении развилки <A> следующим должно проверяться условие <C>, так как условие <B> ложно.	An alternative evaluates its conditions in order up to the first true condition. The alternative <A> should evaluate its condition <C> next because the condition <B> is false.
		
BranchOfFalseCondition Ветка-при-ложном-условии	Развилка выполняет ветку, только если ее условие истинно. При выполнении развилки <A> не должна выполниться ветка <C>, потому что условие <B> ложно.	An alternative executes its branch only if its condition is true. The alternative <A> must not execute the branch <C> because its condition <B> is false.
		
AnotherExtraBranch Лишняя-вторая-ветка	Выполнив одну ветку, развилка завершается. При выполнении развилки <A> ветка <B> не должна начаться, потому что ветка <D> уже выполнилась.	An alternative executes only one branch. The alternative <A> must not start its branch <B> because the branch <D> was executed.
		
BranchWithoutCondition Ветка-без-условия	Развилка выполняет ветку, только если условие этой ветки истинно. При выполнении развилки <A> ветка <C> не может начаться, потому что условие <B> не вычислено.	An alternative executes its branch when the branch condition evaluates to true. The alternative <A> must not execute the branch <C> without evaluating its condition <B> first.
		
NoBranchWhenConditionIsTrue Нет-ветки-при-истинном-условии	Развилка выполняет ветку, только если условие этой ветки истинно. При выполнении развилки <A> должна выполниться ветка <C>, потому что условие <B> истинно.	An alternative executes its branch when the corresponding condition is true. The alternative <A> must execute the branch <C> because its condition <B> is true.
		
LastFalseNoEnd Развилка-не-закончилась	Если все условия ложны и ветка "ИНАЧЕ" отсутствует, то развилка не выполнит ничего. Развилка <A>  должна завершиться, так как услови<е/я> <B1...Bn> ложн<о/ы> и ветка "ИНАЧЕ" отсутствует.	When all condtions of an alternative are false and "ELSE" branch does not exist, the alternative does not do anything. The alternative <A> does not have an 'else' branch so it must finish because its condition<s> <B1...Bn> <is/are> false.
		
AlternativeEndAfterTrueCondition Развилка-закончилась-после-истиннного-условия	Когда вычисленное условие развилки истинно, выполняется сответствующая ветка. Развилка <A> не должна завершиться, пока ветка <C> истинного условия <B> не выполнена.	When a condition of an alternative evaluates to true, the alternative executes the corresponding branch. The alternative <A> should not finish until the branch <C> of successful condition <B> is executed.
		
NoAlternativeEndAfterBranch Развилка-не-закончена-после-ветки	Развилка завершается, выполнив одну ветку. Развилка <A> выполнила ветку <B> и должна завершиться.	Each alternative finishes after executing one branch. The alternative <A> executed its branch <B> and should finish.
		
LastConditionIsFalseButNoElse Нет-ветки-иначе	Развилка выполняет ветку "ИНАЧЕ", только если все условия ложны. При выполнении развилки <A> услови<е/я> <B1...Bn> ложн<о/ы>, поэтому должна выполниться ветка "ИНАЧЕ".	An alternative executes its "ELSE" branch only if all conditions are false. The alternative <A> must execute its branch "ELSE" because the condition<s> <B1...Bn> <is/are> false.
		
NoIterationAfterSuccessfulCondition Нет-итерации	Когда условие продолжения цикла <вид цикла> истинно, цикл должен продолжиться: начинается новая итерация цикла. Поскольку условие <B> истинно, должна начаться новая итерация цикла <A>.	A <kind of loop> loop continues if its condition is true: its new iteration must begin. A new iteration of the loop <A> must begin because its condition <B> is true.
		
LoopEndAfterSuccessfulCondition Конец-цикла-при-истинном-условии	Когда условие продолжения цикла истинно, цикл должен продолжиться: начинается новая итерация цикла. Поэтому, раз условие <B> истинно, цикл <A> заканчивать рано.	A <kind of loop> loop continues if its condition is true: its new iteration must begin. It's too early to finish the loop <A> because its condition <B> is true.
		
NoLoopEndAfterFailedCondition Нет-конца-цикла	Цикл заканчивается, как только условие продолжения стало ложным. Так как условие <B> ложно, цикл <A> должен завершиться.	A <kind of loop>  loop ends when its condition becomes false. As the condition <B> is false, the loop <A> must end.
		
LoopEndsWithoutCondition Конец-цикла-без-проверки-условия	Цикл заканчивается, только если условие продолжения стало ложным. Поэтому цикл <A> не должен завершиться, пока условие <B> не вычислено.	The finish of a loop is determined by its condition. Since the condition <B> is not evaluated yet, the loop <A> must not end.
		
LoopStartIsNotCondition Цикл-начался-не-с-проверки-условия	Цикл <WHILE/FOREACH> является циклом с предусловием. Поэтому начать цикл <A> следует с проверки условия <B>.	A <WHILE/FOREACH> loop is a pre-test loop. So the loop <A> should start from evaluate its condition <B>.
		
LoopStartIsNotIteration Цикл-начался-не-с-итерации	Цикл DO является циклом с постусловием. Поэтому цикл <A> следует начинать с итерации.	A DO loop is a post-test loop. Therefore, loop <A> should begin with an iteration.
		
IterationAfterFailedCondition Итерация-при-ложном-условии	Цикл заканчивается, когда условие продолжения стало ложным. Итерация цикла <A> не может начаться, потому что условие <B> ложно.	A loop ends when its condition becomes false. Since condition <B> is false, the iteration of loop <A> cannot start.
		
NoConditionAfterIteration Нет-проверки-условия	После итерации цикла <WHILE/DO> нужно решить, продолжать ли цикл или закончить его. Для этого, после итерации цикла <A> следует вычислить условие <B>.	After an iteration of <WHILE/DO> loop, its condition must be evaluated to determine whether to continue the loop or finish it. After an iteration of loop <A>, its condition <B> should be evaluated.
		
NoConditionBetweenIterations Нет-проверки-условия-между-итерациями	После очередной итерации цикла <WHILE/DO/FOREACH> нужно решить, продолжать ли цикл или закончить его. Перед тем как перейти к следующей итерации цикла <A>, нужно вычислить условие <B>.	After an iteration of <WHILE/DO/FOREACH> loop, it is to determine whether the loop continues or ends. Before proceeding to the next iteration of loop <A>, its condition <B> should be evaluated.
		
LoopStartsNotWithInit Цикл-FOR-начался-не-с-инициализации	В начале цикла FOR выполняется инициализация. Начните выполнение цикла <A> с инициализации <B>.	A FOR loop starts from initializing its variable. Begin loop <A> from executing its initialization <B>.
		
InitNotAtLoopStart Инициализация-FOR-не-в-начале-цикла	Инициализация цикла FOR выполняется один раз в начале цикла. После <A> инициализацию <B> выполнять не следует.	The initialization of a FOR loop is executed once at the beginning of the loop. Initialization <B> should not be executed after <A>.
		
NoConditionAfterForInit Нет-проверки-условия-после-инициализации-цикла-FOR	Цикл FOR является циклом с предусловием, т.е. он должен вычислить условие перед первой итерацией. После инициализации <A> следует вычислить условие цикла <B>.	A FOR loop is a pre-test loop, so it should evaluate its condition before its first iteration. Condition <B> should be evaluated after initialization <A>.
		
IterationAfterForInit Итерация-после-инициализации-цикла-FOR	Цикл FOR является циклом с предусловием; он может не выполнить ни одной итерации если условие сразу ложно. После инициализации <A> следует вычислить условие цикла <B>.	A FOR loop is a pre-test loop, it won't start an iteration if its condition is false at the beginning. After initialization <A> condition <B> should be evaluated.
		
NoUpdateAfterIteration Нет-перехода-после-итерации-цикла-FOR	Цикл FOR имеет команду перехода к следующей итерации, которая обычно обновляет значение переменной цикла. После итерации цикла <A> следует выполнить переход <B>.	A FOR loop has an advancement that updates the loop variable before next iteration. After iteration of loop <A>, its advancement <B> should be executed.
		
UpdateNotAfterIteration Нет-перехода-после-итерации-цикла-FOR	Переход к следующей итерации выполняется сразу после окончания предыдущей итерации цикла FOR.  Переход <B> следует выполнять только после конца итерации цикла <A>.	The FOR loop has an advancement that updates the loop variable. The advancement <B> should only be executed after the iteration of loop <A>.
		
ForConditionAfterIteration Условие-после-итерации-цикла-FOR	До проверки условия цикла FOR необходимо выполнить переход к следующей итерации. После итерации цикла <A> следует выполнить переход <B>.	A FOR loop has an advancement that updates the loop variable before the loop condition is evaluated. After iteration of loop <A> its advancement <B> should be executed.
		
NoConditionAfterForUpdate Нет-условия-после-перехода-цикла-FOR	Цикл FOR проверяет истинность своего условия перед каждой итерацией. После перехода <A> следует вычислить условие <B>.	The FOR loop has an increment command that updates the loop variable before the loop condition is evaluated. After the update command <A> the condition <B> should be evaluated.
		
NoForeachUpdateAfterSuccessfulCondition Нет-перехода-после-условия-цикла-FOREACH	Цикл FOREACH обходит коллекцию или перебирает итератор, переходя к очередному элементу при его наличии. Так как проверка на следующий элемент успешна (условие истинно), следует получить очередной элемент и начать итерацию цикла <B>.	The FOREACH loop traverses a collection or iterates over an iterator and proceeds to the next element is one exists. Since the check for the next element is successful (the condition is true), the next element should be retrieved and the iteration of the <B> loop should begin.
		
ForeachUpdateNotAfterSuccessfulCondition Переход-не-после-истинного-условия-цикла-FOREACH	Цикл FOREACH обходит коллекцию или перебирает итератор, и переходить к следующему элементу должен непосредственно после проверки наличия очередного элемента. В цикле <B> переход к очередному элементу должен следовать сразу за успешной проверкой на следующий элемент.	The FOREACH loop traverses a collection or iterator and must go to the next element immediately after checking for the next element. The <B> loop should go to the next element right after a successful check for the next element.
		
NoIterationAfterForeachUpdate Нет-итерации-после-перехода-цикла-FOREACH	Цикл FOREACH обходит коллекцию или перебирает итератор, и после перехода к очередному элементу должен начинать новую итерацию. Сразу за переходом к очередному элементу должно следовать начало итерации цикла <B>.	The FOREACH loop traverses a collection or iterator and must start a new iteration after moving to the next element. Immediately after the advance to the next element, the iteration of the <B> loop should begin.
		
IterationNotAfterForeachUpdate Итерация-не-после-перехода-цикла-FOREACH	Цикл FOREACH обходит коллекцию или перебирает итератор, и начинать новую итерацию должен непосредственно после перехода к очередному элементу. Сразу за переходом к очередному элементу должно следовать начало итерации цикла <B>.	The FOREACH loop traverses a collection or iterator, and should start a new iteration immediately after moving to the next element. Right after the advance to the next element the iteration of the <B> loop should start.
