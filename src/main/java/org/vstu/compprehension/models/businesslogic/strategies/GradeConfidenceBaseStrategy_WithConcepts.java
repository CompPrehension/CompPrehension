package org.vstu.compprehension.models.businesslogic.strategies;

import org.jetbrains.annotations.NotNull;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.vstu.compprehension.models.businesslogic.Concept;
import org.vstu.compprehension.models.businesslogic.QuestionRequest;
import org.vstu.compprehension.models.businesslogic.domains.DomainFactory;
import org.vstu.compprehension.models.entities.EnumData.SearchDirections;
import org.vstu.compprehension.models.entities.ExerciseAttemptEntity;
import org.vstu.compprehension.utils.RandomProvider;

import javax.inject.Singleton;
import java.util.stream.Collectors;

@Component  @Singleton
public class GradeConfidenceBaseStrategy_WithConcepts extends GradeConfidenceBaseStrategy {
    private final RandomProvider randomProvider;

    @Autowired
    public GradeConfidenceBaseStrategy_WithConcepts(DomainFactory domainFactory, RandomProvider randomProvider) {
        super(domainFactory);
        this.randomProvider = randomProvider;
    }

    @NotNull
    @Override
    public String getStrategyId() {
        return this.getClass().getSimpleName();  // GradeConfidenceBaseStrategy_WithConcepts
    }

    @Override
    public QuestionRequest generateQuestionRequest(ExerciseAttemptEntity exerciseAttempt) {
        QuestionRequest qr = super.generateQuestionRequest(exerciseAttempt);

        qr.setTargetConcepts(
                exerciseAttempt.getExercise().getExerciseConcepts()
                    .stream().map(ece -> new Concept(ece.getConceptName()))
                    .collect(Collectors.toList())
        );

        qr.setChanceToPickAutogeneratedQuestion(0.0);
        return qr;
    }
}
